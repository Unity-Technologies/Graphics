// Surface Cache shaders do not currently work on Switch due to its limited binding range
// https://jira.unity3d.com/browse/GFXLIGHT-1730
#pragma exclude_renderers switch switch2
#pragma kernel FilterTemporally

#include "Common.hlsl"
#include "RingBuffer.hlsl"
#include "PatchUtil.hlsl"
#include "TemporalFiltering.hlsl"

StructuredBuffer<uint> _RingConfigBuffer;
StructuredBuffer<PatchUtil::PatchCounterSet> _PatchCounterSets;
StructuredBuffer<SphericalHarmonics::RGBL1> _InputPatchIrradiances;
StructuredBuffer<PatchUtil::PatchStatisticsSet> _PatchStatistics;
RWStructuredBuffer<SphericalHarmonics::RGBL1> _OutputPatchIrradiances;

uint _RingConfigOffset;
float _ShortHysteresis;

[numthreads(64, 1, 1)]
void FilterTemporally(uint patchIdx : SV_DispatchThreadID)
{
    if (RingBuffer::IsPositionUnused(_RingConfigBuffer, _RingConfigOffset, patchIdx))
        return;

    const SphericalHarmonics::RGBL1 newIrradiance = _InputPatchIrradiances[patchIdx];
    const SphericalHarmonics::RGBL1 oldIrradiance = _OutputPatchIrradiances[patchIdx];

    const PatchUtil::PatchStatisticsSet stats = _PatchStatistics[patchIdx];
    const uint updateCount = PatchUtil::GetUpdateCount(_PatchCounterSets[patchIdx]);
    SphericalHarmonics::RGBL1 output = FilterTemporallyVarianceGuided(_ShortHysteresis, updateCount, stats.variance, stats.mean, newIrradiance, oldIrradiance);

    _OutputPatchIrradiances[patchIdx] = output;
}

// This implementation is adapted from BuildProbabilityTables.compute
#pragma only_renderers d3d11 vulkan metal glcore
#define COMPUTE_PATH_TRACING_SKY_SAMPLING_DATA

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "PathTracingSkySampling.hlsl"

#define KERNEL_WIDTH 64

// Make sky data access a little less verbose
#define CONDITIONAL _PathTracingSkyConditionalBuffer
#define MARGINAL _PathTracingSkyMarginalBuffer
#define CONDITIONAL_RESOLUTION _PathTracingSkyConditionalResolution
#define MARGINAL_RESOLUTION _PathTracingSkyMarginalResolution
TextureCube<float4>  _PathTracingSkybox;
SamplerState         sampler_PathTracingSkybox;

float3 SampleSkyTexture(float3 dir, float lod, int sliceIndex)
{
    return _PathTracingSkybox.SampleLevel(sampler_PathTracingSkybox, dir, lod).xyz;
}

// Performs a block-level parallel scan.
// Ref: GPU Gems 3, Chapter 39: "Parallel Prefix Sum (Scan) with CUDA".
void ParallelScan(uint i, uint w, uint iterCount, RWStructuredBuffer<float> buf, uint bufferOffset, out float sum)
{
    uint offset;

    // Execute the up-sweep phase.
    for (offset = 1; offset <= w / 2; offset *= 2)
    {
        AllMemoryBarrierWithGroupSync();

        for (uint iter = 0; iter < iterCount; iter++)
        {
            uint idx = i + iter * KERNEL_WIDTH;

            // a1 = (2 * i + 1) * offset - 1
            uint a1 = Mad24(Mad24(2u, idx, 1u), offset, -1);
            uint a2 = a1 + offset;

            if (a2 < w)
            {
                buf[bufferOffset + a2] += buf[bufferOffset + a1];
            }
        }
    }

    AllMemoryBarrierWithGroupSync();

    // Prevent NaNs arising from the division of 0 by 0.
    sum = max(buf[bufferOffset + w - 1], FLT_MIN);

    AllMemoryBarrierWithGroupSync();

    // The exclusive scan requires the last element to be 0.
    if (i == 0)
    {
        buf[bufferOffset + w - 1] = 0.0;
    }

    // Execute the down-sweep phase.
    for (offset = w / 2; offset > 0; offset /= 2)
    {
        AllMemoryBarrierWithGroupSync();

        for (uint iter = 0; iter < iterCount; iter++)
        {
            uint idx = i + iter * KERNEL_WIDTH;

            // a1 = (2 * i + 1) * offset - 1
            uint a1 = Mad24(Mad24(2u, idx, 1u), offset, -1);
            uint a2 = a1 + offset;

            if (a2 < w)
            {
                float t1 = buf[bufferOffset + a1];
                buf[bufferOffset + a1] = buf[bufferOffset + a2];
                buf[bufferOffset + a2] += t1;
            }
        }
    }

    AllMemoryBarrierWithGroupSync();
}

#pragma kernel ComputeConditional
[numthreads(KERNEL_WIDTH, 1, 1)]
void ComputeConditional(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    const uint i = dispatchThreadId.x;
    const uint j = dispatchThreadId.y;
    const uint iterCount = CONDITIONAL_RESOLUTION / KERNEL_WIDTH;
    const uint conditionalBufferOffset = j * CONDITIONAL_RESOLUTION;

    uint iter;

    float v = (j + 0.5) / MARGINAL_RESOLUTION;
    //float sinTheta = sin(v * PI);

    for (iter = 0; iter < iterCount; iter++)
    {
        uint idx = i + iter * KERNEL_WIDTH;
        float u = (idx + 0.5) / CONDITIONAL_RESOLUTION;

        // No need for a sinTheta term in the PDF when using equiareal mapping
        float3 dir = MapUVToSkyDirection(u, v);
        CONDITIONAL[conditionalBufferOffset + idx] = Luminance(SampleSkyTexture(dir, 0.0, 0).rgb); // * sinTheta;
    }

    float rowValSum = 0.0f;

    ParallelScan(i, CONDITIONAL_RESOLUTION, iterCount, CONDITIONAL, conditionalBufferOffset, rowValSum);

    for (iter = 0; iter < iterCount; iter++)
    {
        uint idx = i + iter * KERNEL_WIDTH;
        CONDITIONAL[conditionalBufferOffset + idx] /= rowValSum;
    }

    if (i == 0)
    {
        float rowIntegralValue = rowValSum / CONDITIONAL_RESOLUTION;
        MARGINAL[j] = rowIntegralValue;
    }
}

#pragma kernel ComputeMarginal

[numthreads(KERNEL_WIDTH, 1, 1)]
void ComputeMarginal(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    const uint i = dispatchThreadId.x;
    const uint iterCount = MARGINAL_RESOLUTION / KERNEL_WIDTH;

    float rowValSum = 0.0f;

    ParallelScan(i, MARGINAL_RESOLUTION, iterCount, MARGINAL, 0, rowValSum);

    for (uint iter = 0; iter < iterCount; iter++)
    {
        uint idx = i + iter * KERNEL_WIDTH;
        MARGINAL[idx] /= rowValSum;
    }

    if (i == 0)
    {
        float imgIntegralValue = rowValSum / MARGINAL_RESOLUTION;
        float pdfNormalization = imgIntegralValue > 0.0 ? rcp(imgIntegralValue) * 0.25 * INV_PI : 0.0;
        MARGINAL[0] = pdfNormalization;
    }
}

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch switch2

#pragma kernel FilterVolumetricCloudsShadow

// #pragma enable_d3d11_debug_symbols

// HDRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/VolumetricClouds/VolumetricCloudsDef.cs.hlsl"

// LDS used to pre-fetch the neighborhood data a 8x8 region with a one pixel border (10x10)
groupshared float3 gs_cacheShadow[100];

TEXTURE2D(_VolumetricCloudsShadow);

void FillShadowLDSData(uint elementIndex, uint2 groupOrigin)
{
    // Define which value we will be acessing with this worker thread
    int acessCoordX = elementIndex % 10;
    int acessCoordY = elementIndex / 10;

    // The initial position of the access
    int2 originXY = (int2)groupOrigin - int2(1, 1) + int2(acessCoordX, acessCoordY);

    // Compute the sample position
    int2 tapCoord = int2(clamp(originXY.x, 0, _ShadowCookieResolution - 1), clamp(originXY.y, 0, _ShadowCookieResolution - 1));

    // Read the value from the texture
    float3 shadowValue = LOAD_TEXTURE2D(_VolumetricCloudsShadow, tapCoord.xy).xyz;

    // Pack it and store it into the LDS
    gs_cacheShadow[elementIndex] = shadowValue;
}

uint ShadowOffsetToLDSAdress(uint2 groupThreadId, int2 offset)
{
    // Compute the tap coordinate in the 10x10 grid
    uint2 tapAddress = (uint2)((int2)(groupThreadId + 1) + offset);
    return clamp((uint)(tapAddress.x) % 10 + tapAddress.y * 10, 0, 99);
}

RW_TEXTURE2D(float3, _VolumetricCloudsShadowRW);

float gaussian(float radius, float sigma)
{
    float v = radius / sigma;
    return exp(-v*v);
}
[numthreads(8, 8, 1)]
void FilterVolumetricCloudsShadow(uint3 currentCoords : SV_DispatchThreadID, int groupIndex : SV_GroupIndex, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(currentCoords.z);

    // Fill the LDS with the shadow data
    if (groupIndex < 50)
    {
        FillShadowLDSData(groupIndex * 2, groupId * 8);
        FillShadowLDSData(groupIndex * 2 + 1, groupId * 8);
    }

    GroupMemoryBarrierWithGroupSync();

    // Loop through the neighborhood
    float3 shadowSum = 0.0;
    float3 weightSum = 0.0;
    for (int y = -1; y <= 1; ++y)
    {
        for (int x = -1; x <= 1; ++x)
        {
            float r = sqrt(x * x + y * y);
            float weight = gaussian(r, 0.9);

            // Read the shadow data from the LDS
            float3 shadowData = gs_cacheShadow[ShadowOffsetToLDSAdress(groupThreadId, int2(x, y))];

            // here, we only take into account shadow distance data if transmission is not 1.0
            if (shadowData.y != 1.0)
            {
                shadowSum.xz += weight * shadowData.xz;
                weightSum.xz += weight;
            }
            shadowSum.y += weight * shadowData.y;
            weightSum.y += weight;
        }
    }

    if (any(weightSum.xz == 0.0))
    {
        float3 shadowData = gs_cacheShadow[ShadowOffsetToLDSAdress(groupThreadId, int2(0, 0))];
        shadowSum = shadowData;
        weightSum = 1.0;
    }

    // Normalize and return the result
    _VolumetricCloudsShadowRW[currentCoords.xy] = shadowSum / weightSum;
}

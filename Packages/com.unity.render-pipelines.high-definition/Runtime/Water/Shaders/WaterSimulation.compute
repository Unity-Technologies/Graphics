#pragma kernel InitializePhillipsSpectrum
#pragma kernel EvaluateDispersion
#pragma kernel EvaluateNormalsFoam
#pragma kernel CopyAdditionalData
#pragma kernel PrepareCausticsGeometry
#pragma kernel EvaluateInstanceData EVALUATE_INSTANCE_DATA=EvaluateInstanceData
#pragma kernel EvaluateInstanceDataInfinite EVALUATE_INSTANCE_DATA=EvaluateInstanceDataInfinite INFINITE_WATER

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

// #pragma enable_d3d11_debug_symbols

// Required to be defined for some includes
#define WATER_SIMULATION

// SRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/WaterSystemDef.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/Shaders/WaterUtilities.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/FrustumCulling.hlsl"

// InitializePhillipsSpectrum UAVS
RWTexture2DArray<float2> _H0BufferRW;

// The noise function that we use generates a visible assymetry in the spectrum, this solves the issue
#define NOISE_FUNCTION_OFFSET 64

[numthreads(8, 8, 1)]
void InitializePhillipsSpectrum(uint3 thread : SV_DispatchThreadID)
{
    // This water offset ensures that when we switch the resolution the spectrum stays about the same
    uint3 sampleCoordinate = uint3(thread.xy + _WaterSampleOffset, thread.z);

    // We need 4 random numbers from the sample coords
    float4 rn = WaterHashFunctionFloat4(sampleCoordinate + NOISE_FUNCTION_OFFSET);

    // First part of the phillips spectrum term
    float2 E = ONE_OVER_SQRT2 * float2(GaussianDis(rn.x, rn.y), GaussianDis(rn.z, rn.w));

    // Second part of the phillips spectrum term
    float2 k = TWO_PI * (thread.xy - _BandResolution * 0.5) / _PatchSize[thread.z];
    float2 windDirection = -OrientationToDirection(_PatchOrientation[thread.z]);
    float P = Phillips(k, windDirection, _PatchWindSpeed[thread.z], _PatchDirectionDampener[thread.z], _PatchSize[thread.z]);

    // Combine and output
    _H0BufferRW[int3(thread.xyz)] = E * sqrt(P);
}

// EvaluateDispersion UAVS
Texture2DArray<float2> _H0Buffer;
RWTexture2DArray<float4> _HtRealBufferRW;
RWTexture2DArray<float4> _HtImaginaryBufferRW;

[numthreads(8, 8, 1)]
void EvaluateDispersion(uint3 currentThread : SV_DispatchThreadID)
{
    float2 k = TWO_PI * (currentThread.xy - _BandResolution * 0.5) / _PatchSize[currentThread.z];

    float  kl = length(k);
    float  w = sqrt(EARTH_GRAVITY * kl);
    float2 kx = float2(k.x / kl, 0.0);
    float2 ky = float2(k.y / kl, 0.0);

    float2 h0 = LOAD_TEXTURE2D_ARRAY(_H0Buffer, currentThread.xy, currentThread.z);
    float2 ht = ComplexMult(h0, ComplexExp(w * _SimulationTime));
    float2 dx = ComplexMult(ComplexMult(float2(0, -1), kx), ht);
    float2 dy = ComplexMult(ComplexMult(float2(0, -1), ky), ht);

    if (dx.x != dx.x) dx.x = 0.f;
    if (dx.y != dx.y) dx.y = 0.f;
    if (dy.x != dy.x) dy.x = 0.f;
    if (dy.y != dy.y) dy.y = 0.f;

    // TODO: This is a work around to handle singularity at origin.
    // The above nan check should have picked it up but it doesn't
    // work on metal. Must investigate.
    uint halfBandResolution = _BandResolution / 2;
    if((currentThread.x == halfBandResolution) && (currentThread.y == halfBandResolution))
    {
        dx = float2(0, 0);
        dy = float2(0, 0);
    }

    _HtRealBufferRW[int3(currentThread.xy, currentThread.z)] = float4(ht.x, dx.x, dy.x, 0);
    _HtImaginaryBufferRW[int3(currentThread.xy, currentThread.z)] = float4(ht.y, dx.y, dy.y, 0);
}

// EvaluateNormals UAVS
Texture2DArray<float4> _PreviousWaterAdditionalDataBuffer;
RWTexture2DArray<float4> _WaterAdditionalDataBufferRW;

[numthreads(8, 8, 1)]
void EvaluateNormalsFoam(uint3 currentThread : SV_DispatchThreadID)
{
    // Extract the information about the pixel to process
    uint2 coord = currentThread.xy;
    uint bandIdx = currentThread.z;

    // Get the displacement we need for the evaluate (and re-order them)
    float3 displacementCenter = ShuffleDisplacement(LOAD_TEXTURE2D_ARRAY(_WaterDisplacementBuffer, coord, bandIdx).xyz);
    float3 displacementRight = ShuffleDisplacement(LOAD_TEXTURE2D_ARRAY(_WaterDisplacementBuffer, uint2(coord + int2(1, 0)) & (_BandResolution - 1), bandIdx).xyz);
    float3 displacementUp = ShuffleDisplacement(LOAD_TEXTURE2D_ARRAY(_WaterDisplacementBuffer, uint2(coord + int2(0, 1)) & (_BandResolution - 1), bandIdx).xyz);

    // Evaluate the displacement normalization factor and pixel size
    float pixelSize = _PatchSize[bandIdx] / _BandResolution;

    // We evaluate the displacement without the choppiness as it doesn't behave properly for distance surfaces
    float3 p0, p1, p2;
    EvaluateDisplacedPoints(displacementCenter, displacementRight, displacementUp, _PatchAmplitudeMultiplier[bandIdx], pixelSize, p0, p1, p2);

    // Compute the surface gradients of this band
    float2 surfaceGradient = EvaluateSurfaceGradients(p0, p1, p2);

    // Compute the jacobian of this texel
    float jacobian = EvaluateJacobian(p0, p1, p2, pixelSize);

    // Read the previous jacobian values
    float4 additionalData = LOAD_TEXTURE2D_ARRAY(_PreviousWaterAdditionalDataBuffer, coord, bandIdx);

    // Blend the jacobians
    float surfaceJacobian = _WaterInitialFrame ? jacobian : (jacobian * (1.0 - _JacobianDrag) + additionalData.z * _JacobianDrag);
    float scatteringJacobian = _WaterInitialFrame ? jacobian : (jacobian * (1.0 - 0.97) + additionalData.w * 0.97);

    // Output the normal and foam
    _WaterAdditionalDataBufferRW[int3(coord, bandIdx)] = float4(surfaceGradient, surfaceJacobian, scatteringJacobian);
}

[numthreads(8, 8, 1)]
void CopyAdditionalData(uint3 currentThread : SV_DispatchThreadID)
{
    _WaterAdditionalDataBufferRW[int3(currentThread.xy, currentThread.z)] = LOAD_TEXTURE2D_ARRAY(_WaterAdditionalDataBuffer, currentThread.xy, currentThread.z);
}

// Output indices for the caustics buffer
RWBuffer<int> _CauticsGeometryRW;
int _CausticGeometryResolution;

[numthreads(8, 8, 1)]
void PrepareCausticsGeometry(uint3 currentThread : SV_DispatchThreadID)
{
    // This thread is in charge of outputing the indices of the quad which coordinates is currentThread.xy
    uint2 coord = currentThread.xy;

    // For a given quad resolution N x P, we have (N + 1) x (P + 1) vertices
    // Vertices are ordered this way (N being the resolution of the grid)
    // 0                1            2            ...          N
    // N+1              N+2          N+3          ...          2N+1
    // ...              ...          ...          ...          ...
    // (P-1)*N+P-1   (P -1)N+P    (P -1)N+P+1     ...          P*N+P
    int quadIndex = currentThread.y * _CausticGeometryResolution + currentThread.x;

    // Indices are ordered this way to be up facing
    // A --- C
    // |   | |
    // | |   |
    // B ----D
    // A -> B -> C and C -> B -> D
    uint A = quadIndex + currentThread.y;
    uint B = A + _CausticGeometryResolution + 1;
    uint C = A + 1;
    uint D = B + 1;

    // Output the indices of triangle 0 of the quad
    _CauticsGeometryRW[6 * quadIndex] = A;
    _CauticsGeometryRW[6 * quadIndex + 1] = B;
    _CauticsGeometryRW[6 * quadIndex + 2] = C;

    // Output the indices of triangle 1 of the quad
    _CauticsGeometryRW[6 * quadIndex + 3] = C;
    _CauticsGeometryRW[6 * quadIndex + 4] = B;
    _CauticsGeometryRW[6 * quadIndex + 5] = D;
}

static const float sizeMultiplier[4] = {1.0, 4.0, 32.0, 128.0};

/*
0.0
1 * 0.5
1 * 0.5 + 2
1 * 0.5 + 2 + 4
1 * 0.5 + 2 + 4 + 8
1 * 0.5 + 2 + 4 + 8 + 16
*/
static const float offsets[4] = {0.0, 0.5, 4.5, 36.5};

// Function that evaluates the bounds of a given grid based on it's coordinates
void ComputeGridBounds(int x, int y, float centerGridSize,
                        inout float2 center,
                        inout float2 size)
{
    int absX = abs(x);
    int absY = abs(y);
    float signX = sign(x);
    float signY = sign(y);

    // Size of the patch
    size = float2(centerGridSize * sizeMultiplier[absX], centerGridSize * sizeMultiplier[absY]);

    // Offset position of the patch
    center = float2(signX * (offsets[absX] * centerGridSize + size.x * 0.5), signY * (offsets[absY] * centerGridSize + size.y * 0.5));
}

bool ClampPatchToRegion(inout float2 center, inout float2 size)
{
    // AABB of the region
    float2 regionMin = _RegionCenter - _RegionExtent * 0.5;
    float2 regionMax = _RegionCenter + _RegionExtent * 0.5;

    // AABB of the patch
    float2 patchMin = center - size * 0.5;
    float2 patchMax = center + size * 0.5;

    float2 intersectionMin = max(regionMin, patchMin);
    float2 intersectionMax = min(regionMax, patchMax);

    // Evaluate the new dimensions
    center = (intersectionMax + intersectionMin) * 0.5;
    size = (intersectionMax - intersectionMin);

    // Validate the patch
    return all(intersectionMin < intersectionMax);
}

// Group share flag that allows us to keep track of the valid instances
groupshared int gs_instanceValidity[49];
groupshared float4 gs_instanceData[49];

// Structure that holds the per data patch info
StructuredBuffer<FrustumGPU> _FrustumGPUBuffer;
RWStructuredBuffer<float4> _WaterPatchDataRW;
RWStructuredBuffer<int> _WaterInstanceDataRW;

[numthreads(49, 1, 1)]
void EVALUATE_INSTANCE_DATA(uint3 currentThread : SV_DispatchThreadID)
{
    // Grab the index of the patch to evaluate
    uint currentPatch = currentThread.x;

    // Evaluate the grid parameters
    uint radius = (_WaterLODCount - 1);
    uint gridResolution = 1 + radius * 2;
    int x = currentPatch % gridResolution;
    int y = currentPatch / gridResolution;

    // Compute the grid center and size
    float2 center;
    float2 size;
    ComputeGridBounds(x - radius, y - radius, _GridSize.x, center, size);

    // Frustum cull the patch while accounting for it's maximal deformation
    OrientedBBox obb;
    obb.right = float3(1.0, 0, 0);
    obb.up = float3(0, 1.0, 0);
    obb.extentX = size.x * 0.5 + _MaxWaveDisplacement;
    obb.extentY = _MaxWaveHeight;
    obb.extentZ = size.y * 0.5 + _MaxWaveDisplacement;
    obb.center = float3(_PatchOffset.x + center.x, _PatchOffset.y, _PatchOffset.z + center.y);

    // Need to make sure that
    obb.center = GetCameraRelativePositionWS(obb.center);

    // Only include the instance if it is valid and potientially visible
    bool patchIsVisible = currentPatch < _NumWaterPatches ? FrustumOBBIntersection(obb, _FrustumGPUBuffer[0]) : 0;

    // In case this is an non-infinite surface, we need to clamp the patch to the allowed region
#if !defined(INFINITE_WATER)
    float2 centerWS = center + _PatchOffset.xz;
    patchIsVisible = patchIsVisible && ClampPatchToRegion(centerWS, size);
    center = centerWS - _PatchOffset.xz;
#endif

    // Propagate the patch data
    gs_instanceValidity[currentPatch] = patchIsVisible;
    gs_instanceData[currentPatch] = float4(size.x, size.y, center.x, center.y);

    // Wait untill all workers have processed their patch data
    GroupMemoryBarrierWithGroupSync();

    // The first thread is in charge of outputing the instance data, their count
    if (currentPatch == 0)
    {
        // For each patch that needs to be processed
        uint totalInstanceCount = 0;
        for (uint patchIdx = 0; patchIdx < _NumWaterPatches; ++patchIdx)
        {
            if (gs_instanceValidity[patchIdx])
            {
                // Output the patch data to the next slot
                _WaterPatchDataRW[totalInstanceCount] = gs_instanceData[patchIdx];

                // Increment the count
                totalInstanceCount++;
            }
        }

        // Output the actual instance count
        // NOTE: Here we have to multiply by the XR view count as it redispatches the geometry
        // for each view
        _WaterInstanceDataRW[1] = totalInstanceCount * _XRViewCount;
    }
}

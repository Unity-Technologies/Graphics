#pragma kernel ReflectionAdjustWeight
#pragma kernel ReflectionUpscale

#pragma only_renderers d3d11 xboxseries ps5

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/BSDF.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/PreIntegratedFGD/PreIntegratedFGD.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/BilateralUpsample.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/HDStencilUsage.cs.hlsl"

// Raytracing Includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/OnlineVariance.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"

// Tile size of this compute
#define RAYTRACING_REFLECTION_TILE_SIZE 8

// #pragma enable_d3d11_debug_symbols

// Input textures for the spatial filtering
TEXTURE2D_X(_DepthTexture);
TEXTURE2D_X(_SsrLightingTextureRW);
TEXTURE2D_X(_DirectionPDFTexture);
TEXTURE2D_X(_SsrClearCoatMaskTexture);
TYPED_TEXTURE2D_X(uint2, _StencilTexture);

// Output Textures for the spatial filtering
RW_TEXTURE2D_X(float4, _RaytracingReflectionTexture);

// Compute the weight of this pixel based on the smoothness of the pixel and the min and fadestart values
float ComputeWeightValue(float perceptualSmoothness)
{
    return (_RaytracingReflectionSmoothnessFadeStart == _RaytracingReflectionMinSmoothness) ? 1.0 : max(saturate((perceptualSmoothness - _RaytracingReflectionMinSmoothness) / (_RaytracingReflectionSmoothnessFadeStart -_RaytracingReflectionMinSmoothness)), 0.001);
}

// Function that evaluates the normal data for a given pixel
NormalData EvaluateNormalData(uint2 sourceCoord)
{
    // Fetch the normal
    NormalData normalData;
    DecodeFromNormalBuffer(sourceCoord, normalData);

    // We use a texture to identify if we use a clear coat constant for perceptualRoughness for SSR or use value from normal buffer.
    // When we use a forward material we can output the normal and perceptualRoughness for the coat for SSR, so we simply bind a black 1x1 texture
    // When we use deferred material we need to bind the gbuffer2 and read the coat mask
    float4 coatMask = LOAD_TEXTURE2D_X(_SsrClearCoatMaskTexture, sourceCoord);
    normalData.perceptualRoughness = HasClearCoatMask(coatMask) ? CLEAR_COAT_SSR_PERCEPTUAL_ROUGHNESS : normalData.perceptualRoughness;
    return normalData;
}

[numthreads(RAYTRACING_REFLECTION_TILE_SIZE, RAYTRACING_REFLECTION_TILE_SIZE, 1)]
void ReflectionAdjustWeight(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Target texture coordinate
    uint2 targetCoord = dispatchThreadId.xy;

    // Fetch the depth and normal
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, targetCoord).x;

    // Fetch the normal data
    NormalData normalData = EvaluateNormalData(targetCoord);

    // Does this pixel have SSR?
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, targetCoord));

    // Duplicating same early out condition we do on reflection dispatchrays as that info is 1/2 res while we need full res granularity here.
    // Also, this operates on data we fetch anyway, while the _SsrLightingTextureRW at central pixel is needed only if that pixel contributes to filtering below.
    float perceptualSmoothness = PerceptualRoughnessToPerceptualSmoothness(normalData.perceptualRoughness);
    if (depth == UNITY_RAW_FAR_CLIP_VALUE || perceptualSmoothness < _RaytracingReflectionMinSmoothness || (stencilValue & STENCILUSAGE_TRACE_REFLECTION_RAY) == 0)
    {
        _RaytracingReflectionTexture[COORD_TEXTURE2D_X(targetCoord)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        return;
    }

    // Fetch the lighting and compute the weight
    float3 lighting = LOAD_TEXTURE2D_X(_SsrLightingTextureRW, targetCoord).rgb;
    float weight = ComputeWeightValue(perceptualSmoothness);

    // Output the result to the half resolution part of the texture
    _RaytracingReflectionTexture[COORD_TEXTURE2D_X(targetCoord)] = float4(lighting, weight);
}

groupshared float3 gs_cacheLighting[36];
groupshared float gs_cacheDepth[36];
groupshared bool gs_cacheValidity[36];

void FillRegionLDS(uint groupIndex, uint2 groupOrigin)
{
    // Define which value we will be acessing with this worker thread
    int acessCoordX = groupIndex % 6;
    int acessCoordY = groupIndex / 6;

    // The initial position of the access
    int2 originXY = groupOrigin / 2 - int2(1, 1);

    // Compute the sample position
    int2 sampleCoord = int2(clamp(originXY.x + acessCoordX, 0, _ScreenSize.x / 2 - 1), clamp(originXY.y + acessCoordY, 0, _ScreenSize.y / 2 - 1));

    // The representative coordinate to use depends if we are using the checkerboard integration pattern (or not)
    int2 representativeCoord = ComputeSourceCoordinates(sampleCoord, _RayTracingCheckerIndex);

    // Read the depth value and linearize it
    float sampleDepth = LOAD_TEXTURE2D_X(_DepthTexture, representativeCoord).x;
    gs_cacheDepth[groupIndex] = Linear01Depth(sampleDepth, _ZBufferParams);

    // Evaluate if the the pixel's data can be used (if it is not unlit, has receive SSR and has the right smoothness value)
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, representativeCoord));
    bool validity = (stencilValue & STENCILUSAGE_IS_UNLIT) == 0;
    validity = validity && (stencilValue & STENCILUSAGE_TRACE_REFLECTION_RAY) != 0;
    validity = validity && (sampleDepth != UNITY_RAW_FAR_CLIP_VALUE);
    gs_cacheValidity[groupIndex] = validity;

    // Read the lighting data
    float3 sampleLighting = LOAD_TEXTURE2D_X(_SsrLightingTextureRW, sampleCoord).xyz;
    gs_cacheLighting[groupIndex] = sampleLighting;
}

uint OffsetToLDSAdress(uint2 groupThreadId, int2 offset)
{
    // Compute the tap coordinate in the 6x6 grid
    uint2 tapAddress = (uint2)((int2)(groupThreadId / 2 + 1) + offset);
    return clamp((uint)(tapAddress.x) % 6 + tapAddress.y * 6, 0, 35);
}

// Couple helper functions
float sqr(float value)
{
    return value * value;
}
float gaussian(float radius, float sigma)
{
    return exp(-sqr(radius / sigma));
}

[numthreads(RAYTRACING_REFLECTION_TILE_SIZE, RAYTRACING_REFLECTION_TILE_SIZE, 1)]
void ReflectionUpscale(uint3 dispatchThreadId : SV_DispatchThreadID,
                uint2 groupThreadId : SV_GroupThreadID,
                int groupIndex : SV_GroupIndex,
                uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Only 36 workers of the 64 do the pre-fetching
    if (groupIndex < 36)
    {
        // Load 1 value per thread
        FillRegionLDS(groupIndex, groupId * 8);
    }
    // Make sure all values are loaded in LDS by now.
    GroupMemoryBarrierWithGroupSync();

    // Compute the three coordinates we need to be reading from
    uint2 fullResolution = dispatchThreadId.xy;

    // Fetch the full resolution depth
    float hiResDepth = Linear01Depth(LOAD_TEXTURE2D_X(_DepthTexture, fullResolution).x, _ZBufferParams); 

    // If the full resolution depth is a background pixel, write the invalid data and we are done
    if (hiResDepth == 1.0)
    {
        _RaytracingReflectionTexture[COORD_TEXTURE2D_X(fullResolution)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        return;
    }

    // Does this pixel have SSR, otherwise no need to upscale
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, fullResolution));
    if ((stencilValue & STENCILUSAGE_TRACE_REFLECTION_RAY) == 0)
        return;

    float4 fallbackLighting = 0.0;
    float weightSum = 0.0;
    for (int y = -1; y <= 1; ++y)
    {
        for (int x = -1; x <= 1; ++x)
        {
            // Evaluate the initial weight
            float radius = sqrt(x * x + y * y);
            float weight = gaussian(radius, 0.5);

            // Compute the LDS index of this half res tap
            int tapHalfResLDSIndex = OffsetToLDSAdress(groupThreadId, int2(x, y));
            float tapDepth = gs_cacheDepth[tapHalfResLDSIndex];

            // Make sure the depth is not a background depth and is similar to the final one
            weight *= ((tapDepth != 1.0) ? 1.0 : 0.0);
            weight *= (((abs(tapDepth - hiResDepth) < hiResDepth * 0.1)) ? 1.0 : 0.0);

            // Make sure the pixel has a valid signal
            weight *= gs_cacheValidity[tapHalfResLDSIndex] ? 1.0 : 0.0;
            
            // Add the contribution of the sample
            fallbackLighting += float4(gs_cacheLighting[tapHalfResLDSIndex], 0.0) * weight;
            weightSum += weight; 
        }
    }

    // Bilateral upscale and output the result
    _RaytracingReflectionTexture[COORD_TEXTURE2D_X(fullResolution)] = weightSum == 0.0 ? float4(0, 0, 0, 0) : fallbackLighting / weightSum;;
}

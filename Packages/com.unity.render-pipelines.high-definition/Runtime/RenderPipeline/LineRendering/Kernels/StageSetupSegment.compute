#pragma kernel Main

#pragma multi_compile INDEX_FORMAT_UINT_16 INDEX_FORMAT_UINT_32

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/LineRendering/Core/LineRenderingCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#define THREADING_BLOCK_SIZE NUM_LANE_SEGMENT_SETUP
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Threading.hlsl"

typedef Threading::Wave  Wave;
typedef Threading::Group Group;

// Merge group offsets
int _VertexOffset;
int _SegmentOffset;

// LOD Data
int               _SegmentsPerLine;
int               _LineCount;
float             _LOD;
ByteAddressBuffer _LODBuffer;

// Inputs
ByteAddressBuffer _IndexBuffer;
ByteAddressBuffer _Vertex0RecordBuffer;

// Outputs
RWByteAddressBuffer _SegmentRecordBuffer;
RWByteAddressBuffer _ViewSpaceDepthRangeBuffer;
RWByteAddressBuffer _CounterBuffer;
RWByteAddressBuffer _ShadingSampleVisibilityBuffer;

// Utility
void UpdateDepthRange(Wave wave, SegmentRecord segment, bool shouldUpdate)
{
    const float depthVS  = (segment.depthVS0 + segment.depthVS1) * 0.5;

    uint minOut = shouldUpdate ? asuint(depthVS) : UINT_MAX;
    uint maxOut = shouldUpdate ? asuint(depthVS) : 0;

    const uint waveNear = wave.Min(minOut);
    const uint waveFar  = wave.Max(maxOut);

    if (wave.IsFirstLane())
    {
        // Pad the depth range a bit to avoid precision issues.
        _ViewSpaceDepthRangeBuffer.InterlockedMin(0 << 2, waveNear);
        _ViewSpaceDepthRangeBuffer.InterlockedMax(1 << 2, waveFar );
    }
}

groupshared uint gs_SegmentOffset;

uint ComputeOutputIndex(Wave wave, bool segmentActive)
{
    const uint waveOffset = wave.PrefixCountBits(segmentActive);

#if _THREADING_ENABLE_WAVE_EMULATION
    // Seems this sync is required for emulated path.
    GroupMemoryBarrierWithGroupSync();
#endif

    const uint waveCount  = wave.CountBits(segmentActive);

    uint globalOffset = 0u;
    if (wave.IsFirstLane())
    {
        _CounterBuffer.InterlockedAdd(COUNTER_ACTIVE_SEGMENTS, waveCount, globalOffset);
    }

    // Broadcast the offset to the rest of the lanes.
    globalOffset = wave.ReadLaneFirst(globalOffset);

    return globalOffset + waveOffset;
}

bool CulledLineLOD(uint segmentIndex)
{
    const uint lineIndex = floor(segmentIndex / _SegmentsPerLine);
    return (int)_LODBuffer.Load(lineIndex << 2) >= _LineCount * _LOD;
}

// Kernel
[numthreads(NUM_LANE_SEGMENT_SETUP, 1, 1)]
void Main(Group group)
{
    if (group.groupIndex == 0u)
    {
        gs_SegmentOffset = _CounterBuffer.Load(COUNTER_GROUP_SEG_OFFSET);
    }
    GroupMemoryBarrierWithGroupSync();

    const uint segmentIndex = group.dispatchID.x;

    bool culled = segmentIndex >= (uint)_SegmentCount;

    if (segmentIndex >= (uint)_SegmentOffset)
        culled = true;

    if (CulledLineLOD(segmentIndex))
        culled = true;

    // Load Indices
#if INDEX_FORMAT_UINT_32
    const uint2 segmentIndices = _VertexOffset + _IndexBuffer. Load2(segmentIndex << 3);
#else
    const uint segmentIndicesCompressed = _IndexBuffer.Load(segmentIndex << 2);

    const uint2 segmentIndices = _VertexOffset + uint2
    (
        segmentIndicesCompressed >> 0  & 0xFFFF,
        segmentIndicesCompressed >> 16 & 0xFFFF
    );
#endif

    // Load Vertices
    const float4 positionCS0 = asfloat(_Vertex0RecordBuffer.Load4(segmentIndices.x << 4));
    const float4 positionCS1 = asfloat(_Vertex0RecordBuffer.Load4(segmentIndices.y << 4));

    // Cull segments with degenerate vertices (could be produced by vertex shader).
    if (AnyIsNaN(positionCS0) || AnyIsNaN(positionCS1))
    {
        culled = true;
    }

    // Fast rejection for segments behind the near clipping plane.
    if (positionCS0.w <= 0 || positionCS1.w <= 0)
    {
        culled = true;
    }

    // Perspective divide. Homogenous -> NDC.
    float3 positionNDC0 = positionCS0.xyz * rcp(positionCS0.w);
    float3 positionNDC1 = positionCS1.xyz * rcp(positionCS1.w);

    // Cohen-Sutherland algorithm to perform line segment clipping in NDC space.
    if(!ClipSegmentCohenSutherland(positionNDC0.x, positionNDC0.y, positionNDC1.x, positionNDC1.y))
    {
        culled = true;
    }

    // NDC -> Screen Space.
    const float2 positionSS0 = _ScreenSize.xy * (0.5 + 0.5 * positionNDC0.xy);
    const float2 positionSS1 = _ScreenSize.xy * (0.5 + 0.5 * positionNDC1.xy);

    // Depth test against each segment vertex.
    if(positionNDC1.z < LoadCameraDepth(float2(positionSS1.x, _ScreenSize.y - positionSS1.y)))
    {
        culled = true;
    }

    SegmentRecord record;
    {
        record.positionSS0  = positionSS0.xy;
        record.positionSS1  = positionSS1.xy;
        record.depthVS0     = LinearEyeDepth(positionNDC0.z, _ZBufferParams);
        record.depthVS1     = LinearEyeDepth(positionNDC1.z, _ZBufferParams);
        record.vertexIndex0 = segmentIndices.x;
        record.vertexIndex1 = segmentIndices.y;
    }

    Wave wave = group.GetWave();

    // Compute the minimum and maximum view space depths (needed for clustering).
    UpdateDepthRange(wave, record, !culled);

    const uint segmentOutputIndex = ComputeOutputIndex(wave, !culled);

    if (!culled)
    {

        // Don't let culled segments interfere with the write.
        StoreSegmentRecord(_SegmentRecordBuffer, record, gs_SegmentOffset + segmentOutputIndex);

        //mark vertices visible
        _ShadingSampleVisibilityBuffer.Store((record.vertexIndex0 - _VertexOffset) << 2, 1u);
        _ShadingSampleVisibilityBuffer.Store((record.vertexIndex1 - _VertexOffset) << 2, 1u);
    }
}

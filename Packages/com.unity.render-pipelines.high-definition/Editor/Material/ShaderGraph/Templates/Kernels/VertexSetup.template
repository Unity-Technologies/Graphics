// Pragmas
$splice(PassPragmas)

// TODO: Keywords (shader_feature) incompatible with compute
$splice(GraphKeywords)

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition

// --------------------------------------------------
// Defines

// Attribute
$AttributesMesh.normalOS:                           #define ATTRIBUTES_NEED_NORMAL
$AttributesMesh.tangentOS:                          #define ATTRIBUTES_NEED_TANGENT
$AttributesMesh.uv0:                                #define ATTRIBUTES_NEED_TEXCOORD0
$AttributesMesh.uv1:                                #define ATTRIBUTES_NEED_TEXCOORD1
$AttributesMesh.uv2:                                #define ATTRIBUTES_NEED_TEXCOORD2
$AttributesMesh.uv3:                                #define ATTRIBUTES_NEED_TEXCOORD3
$AttributesMesh.color:                              #define ATTRIBUTES_NEED_COLOR
$AttributesMesh.vertexID:                           #define ATTRIBUTES_NEED_VERTEXID
$VaryingsMeshToPS.positionRWS:                      #define VARYINGS_NEED_POSITION_WS
$VaryingsMeshToPS.positionPredisplacementRWS:       #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
$VaryingsMeshToPS.normalWS:                         #define VARYINGS_NEED_TANGENT_TO_WORLD
$VaryingsMeshToPS.texCoord0:                        #define VARYINGS_NEED_TEXCOORD0
$VaryingsMeshToPS.texCoord1:                        #define VARYINGS_NEED_TEXCOORD1
$VaryingsMeshToPS.texCoord2:                        #define VARYINGS_NEED_TEXCOORD2
$VaryingsMeshToPS.texCoord3:                        #define VARYINGS_NEED_TEXCOORD3
$VaryingsMeshToPS.color:                            #define VARYINGS_NEED_COLOR
$VaryingsMeshToPS.elementToWorld0:                  #define VARYINGS_NEED_ELEMENT_TO_WORLD
$VaryingsMeshToPS.worldToElement0:                  #define VARYINGS_NEED_WORLD_TO_ELEMENT

$features.graphVertex:                              #define HAVE_MESH_MODIFICATION

$SurfaceDescriptionInputs.FaceSign:                 // Define when IsFontFaceNode is included in ShaderGraph
$SurfaceDescriptionInputs.FaceSign:                 #define VARYINGS_NEED_CULLFACE

$VertexDescription.CustomVelocity: #define _ADD_CUSTOM_VELOCITY

$splice(GraphDefines)

#ifndef SHADER_UNLIT
// We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
// VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
    #define VARYINGS_NEED_CULLFACE
#endif
#endif

// -- Graph Properties
$splice(GraphProperties)

// Includes
$splice(PreGraphIncludes)
$splice(GraphIncludes)

// --------------------------------------------------
// Structs and Packing

$splice(PassStructs)

$splice(InterpolatorPack)

// --------------------------------------------------
// Graph

// Graph Functions
$splice(GraphFunctions)

// Graph Vertex
$splice(GraphVertex)

// --------------------------------------------------
// Build Graph Inputs

$features.graphVertex:  $include("Vertex.template.hlsl")

// --------------------------------------------------
// Main

// For now don't include the pass, we just call VertMesh directly.
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

// --------------------------------------------------
// Kernel

int _VertexCount;

#define DECLARE_ATTRIBUTE_BUFFER(attr)     \
    ByteAddressBuffer _VertexBuffer##attr; \
    int _VertexBuffer##attr##Stride;       \
    int _VertexBuffer##attr##Offset;

DECLARE_ATTRIBUTE_BUFFER(Position)
DECLARE_ATTRIBUTE_BUFFER(Normal)
DECLARE_ATTRIBUTE_BUFFER(Tangent)
DECLARE_ATTRIBUTE_BUFFER(Color)
DECLARE_ATTRIBUTE_BUFFER(TexCoord0)
DECLARE_ATTRIBUTE_BUFFER(TexCoord1)
DECLARE_ATTRIBUTE_BUFFER(TexCoord2)
DECLARE_ATTRIBUTE_BUFFER(TexCoord3)
DECLARE_ATTRIBUTE_BUFFER(TexCoord4)
DECLARE_ATTRIBUTE_BUFFER(TexCoord5)
DECLARE_ATTRIBUTE_BUFFER(TexCoord6)
DECLARE_ATTRIBUTE_BUFFER(TexCoord7)
DECLARE_ATTRIBUTE_BUFFER(BlendWeight)
DECLARE_ATTRIBUTE_BUFFER(BlendIndices)

#define LOAD_ATTRIBUTE_FLOAT3(attr, i)\
    asfloat(_VertexBuffer##attr.Load3((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset));

#define LOAD_ATTRIBUTE_FLOAT4(attr, i)\
    asfloat(_VertexBuffer##attr.Load4((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset));

RWByteAddressBuffer _PostTransformVertexBuffer;

[numthreads(64, 1, 1)]
void VertexSetup (uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint i = dispatchThreadID.x;

    if (i >= (uint)_VertexCount)
        return;

    // Construct the input vertex.
    AttributesMesh inputMesh;
    {
        ZERO_INITIALIZE(AttributesMesh, inputMesh);
        inputMesh.positionOS = LOAD_ATTRIBUTE_FLOAT3(Position, i);
#ifdef ATTRIBUTES_NEED_NORMAL
    // TODO
#endif
#ifdef ATTRIBUTES_NEED_TANGENT
    // TODO
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD0
        inputMesh.uv0 = LOAD_ATTRIBUTE_FLOAT4(TexCoord0, i);
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD1
        inputMesh.uv1 = LOAD_ATTRIBUTE_FLOAT4(TexCoord1, i);
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD2
    // TODO
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD3
    // TODO
#endif
#ifdef ATTRIBUTES_NEED_COLOR
    // TODO
#endif
    }

    // Invoke the HDRP vertex setup.
    VaryingsMeshType vmesh = VertMesh(inputMesh);

    // Store the clip space position for now (should be every interpolator).
    _PostTransformVertexBuffer.Store4(16 * i, asuint(vmesh.positionCS));
}

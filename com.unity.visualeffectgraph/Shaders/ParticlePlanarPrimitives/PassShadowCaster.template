// Shadow pass
Pass
{		
	Tags { "LightMode"=${VFXPassShadow} }

	ZClip [_ZClip]
	ZWrite On
	Blend Off
	
	HLSLPROGRAM
	#pragma target 4.5
	#if !USE_ALPHA_TEST && IS_TRANSPARENT_PARTICLE
	#define USE_ALPHA_TEST 1
	#endif

	struct ps_input
	{
		float4 pos : SV_POSITION;
		#if USE_FLIPBOOK_INTERPOLATION
		float4 uv : TEXCOORD0;
		#else
		float2 uv : TEXCOORD0;	
		#endif
		#if USE_ALPHA_TEST || USE_FLIPBOOK_INTERPOLATION || VFX_USE_ALPHA_CURRENT
		// x: alpha threshold
		// y: frame blending factor
		// z: alpha
		VFX_OPTIONAL_INTERPOLATION float3 builtInInterpolants : TEXCOORD1;
		#endif
		#if USE_FLIPBOOK_MOTIONVECTORS
		// x: motion vectors scale X
		// y: motion vectors scale Y
		VFX_OPTIONAL_INTERPOLATION float2 builtInInterpolants2 : TEXCOORD2;
		#endif

		#if VFX_NEEDS_POSWS_INTERPOLATOR
		float3 posWS : TEXCOORD4;
		#endif

		${VFXAdditionalInterpolantsDeclaration}

		UNITY_VERTEX_OUTPUT_STEREO
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_ALPHA builtInInterpolants.z
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.x
#define VFX_VARYING_FRAMEBLEND builtInInterpolants.y
#define VFX_VARYING_MOTIONVECTORSCALE builtInInterpolants2.xy
#define VFX_VARYING_UV uv
		
${VFXBegin:VFXVertexAdditionalProcess}
float3 posWS = TransformPositionVFXToWorld(vPos);
VFXApplyShadowBias(o.VFX_VARYING_POSCS, posWS, normalWS);
${VFXEnd}

	${VFXPassShadowDefine}	
	${VFXInclude("Shaders/ParticlePlanarPrimitives/Pass.template")}	

	${SHADERGRAPH_PIXEL_CODE_DEPTHONLY}
		
	#pragma fragment frag
	float frag(ps_input i) : SV_TARGET
	{
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
		VFXTransformPSInputs(i);
		#ifdef VFX_SHADERGRAPH
			${VFXAdditionalInterpolantsPreparation}

			${SHADERGRAPH_PIXEL_CALL_DEPTHONLY}

			float alpha = OUTSG.${SHADERGRAPH_PARAM_ALPHA};
		#else
			float alpha = VFXGetFragmentColor(i).a;
			alpha *= VFXGetTextureColor(VFX_SAMPLER(mainTexture),i).a;
		#endif
		VFXClipFragmentColor(alpha,i);

#ifndef USE_ALPHA_TEST
		clip(alpha - 1e-5);
#endif

		return 0;
	}
	ENDHLSL
}

// Forward pass
Pass
{
    Name ${VFXPassForward}
	Tags { "LightMode"=${VFXPassForward} }

	${VFXStencilForward}

	HLSLPROGRAM
	#pragma target 4.5

	struct ps_input
	{
		float4 pos : SV_POSITION;

		#if VFX_NEEDS_COLOR_INTERPOLATOR
		nointerpolation float4 color : COLOR0;
		#endif
		#if USE_SOFT_PARTICLE || USE_ALPHA_TEST || USE_EXPOSURE_WEIGHT
		// x: inverse soft particles fade distance
		// y: alpha threshold
		// z: exposure weight
		nointerpolation float3 builtInInterpolants : TEXCOORD1;
		#endif

        UNITY_VERTEX_OUTPUT_STEREO

        VFX_VERTEX_OUTPUT_INSTANCE_INDEX
	};

	struct ps_output
	{
		float4 color : SV_Target0;
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_COLOR color.rgb
#define VFX_VARYING_ALPHA color.a
#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y
#if USE_EXPOSURE_WEIGHT
#define VFX_VARYING_EXPOSUREWEIGHT builtInInterpolants.z
#endif

	${VFXPassForwardDefine}
	${VFXInclude("Shaders/ParticleHexahedron/Pass.template")}

	#pragma fragment frag
	ps_output frag(ps_input i)
	{
    #if VFX_USE_GRAPH_VALUES
        uint instanceActiveIndex = i.VFX_VARYINGS_INSTANCE_ACTIVE_INDEX;
        ${VFXLoadGraphValues}
    #endif
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
		ps_output o = (ps_output)0;
		VFXTransformPSInputs(i);

		o.color = VFXGetFragmentColor(i);

        o.color = VFXApplyPreExposure(o.color, i);
		o.color = VFXApplyFog(o.color,i);
		VFXClipFragmentColor(o.color.a,i);
		o.color.a = saturate(o.color.a);
        o.color = VFXTransformFinalColor(o.color);
		return o;
	}
	ENDHLSL
}

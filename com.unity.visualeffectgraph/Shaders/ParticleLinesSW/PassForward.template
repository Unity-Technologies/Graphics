// Forward pass
Pass
{		
	Tags { "LightMode"=${VFXPassForward} }

	${VFXStencilForward}

	HLSLPROGRAM
	#pragma target 4.5
	${VFXPassForwardAdditionalPragma}
	
	struct ps_input
	{
		float4 pos : SV_POSITION;
		#if IS_TRANSPARENT_PARTICLE
#ifdef SHADER_API_PSSL
		/*noperspective (see case 1237742)*/ float pixelOffset : TEXCOORD0; // for AA
#else
		noperspective float pixelOffset : TEXCOORD0; // for AA
#endif
		#endif
		#if VFX_NEEDS_COLOR_INTERPOLATOR
		VFX_OPTIONAL_INTERPOLATION float4 color : COLOR0;
		#endif
		#if USE_SOFT_PARTICLE || USE_ALPHA_TEST || USE_EXPOSURE_WEIGHT
		VFX_OPTIONAL_INTERPOLATION float3 builtInInterpolants : TEXCOORD1;
		#endif
		#if VFX_NEEDS_POSWS_INTERPOLATOR
		float3 posWS : TEXCOORD2;
		#endif

		UNITY_VERTEX_OUTPUT_STEREO
	};
	
	struct ps_output
	{
		float4 color : SV_Target0;
	};

#define VFX_VARYING_PS_INPUTS ps_input
#define VFX_VARYING_POSCS pos
#define VFX_VARYING_COLOR color.rgb
#define VFX_VARYING_ALPHA color.a
#define VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE builtInInterpolants.x
#define VFX_VARYING_ALPHATHRESHOLD builtInInterpolants.y
#if IS_TRANSPARENT_PARTICLE
#define VFX_VARYING_PIXELOFFSET pixelOffset
#endif
#if VFX_NEEDS_POSWS_INTERPOLATOR
#define VFX_VARYING_POSWS posWS
#endif
#if USE_EXPOSURE_WEIGHT
#define VFX_VARYING_EXPOSUREWEIGHT builtInInterpolants.z
#endif

    ${VFXPassForwardDefine}
	${VFXInclude("Shaders/ParticleLinesSW/Pass.template")}	
		
	#pragma fragment frag
	ps_output frag(ps_input i)
	{
		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(i);
		ps_output o = (ps_output)0;
		VFXTransformPSInputs(i);
		
		${VFXApplyColor}
		
		// Line AA
		#if IS_TRANSPARENT_PARTICLE	
		o.color.a *= 1.0f - abs(i.pixelOffset);
		#endif
		
		o.color = VFXApplyPreExposure(o.color, i);
		o.color = VFXApplyFog(o.color,i);
		VFXClipFragmentColor(o.color.a,i);
		o.color.a = saturate(o.color.a);
        o.color = VFXTransformFinalColor(o.color);
		return o;
	}
	ENDHLSL
}

#pragma kernel CSMain
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch opengl
${VFXGlobalInclude}
${VFXGlobalDeclaration}
${VFXPerPassInclude}



CBUFFER_START(params)
    uint nbMax;
    uint dispatchWidth;
CBUFFER_END

ByteAddressBuffer attributeBuffer;
StructuredBuffer<uint> inputBuffer;

#if USE_DEAD_LIST_COUNT
ByteAddressBuffer deadListCount;
#endif

struct Kvp
{
	float sortKey;
	uint index;
};

RWStructuredBuffer<Kvp> outputBuffer;

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint threshold = nbMax;
#if USE_DEAD_LIST_COUNT
	threshold -= deadListCount.Load(0);
#endif
	uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP + groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
	if (id < threshold)
	{
		uint index = inputBuffer[id];

		VFXAttributes attributes = (VFXAttributes)0;
        ${VFXLoadAttributes}

        Kvp output;
#if VFX_CUSTOM_SORT_KEY
        ${VFXLoadParameter:{sortKey}}
        output.sortKey = -1.0f * sortKey; //Lowest values are rendered first
#elif VFX_DISTANCE_SORT_KEY
#if VFX_LOCAL_SPACE
        float3 posRWS = TransformObjectToWorld(attributes.position);
#else
        float3 posRWS = GetCameraRelativePositionWS(attributes.position);
#endif
        float3 camToPos = posRWS - GetCurrentViewPosition();

        output.sortKey = dot(camToPos,camToPos); // sqr distance to the camera
#elif VFX_DEPTH_SORT_KEY
#if VFX_LOCAL_SPACE
        float3 posRWS = TransformObjectToWorld(attributes.position);
#else
        float3 posRWS = GetCameraRelativePositionWS(attributes.position);
#endif
        float3 zAxisCam = -GetWorldToViewMatrix()[2].xyz;
        float depth = dot(posRWS, zAxisCam);
        output.sortKey = depth;

#elif VFX_YOUNGEST_SORT_KEY
        ${VFXLoadAttributes:{age}}
        output.sortKey = attributes.age;
#endif //VFX_[CRITERION]_SORT_KEY
        output.index = index;
        output.sortKey *= SORTING_SIGN;

		outputBuffer[id] = output;
	}
}

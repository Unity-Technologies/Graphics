#pragma only_renderers d3d11 ps4 xboxone vulkan metal switch

#pragma kernel CSMainH      HORIZONTAL      KerName=CSMainH
#pragma kernel CSMainV      VERTICAL        KerName=CSMainV

#pragma kernel CSMainHemiH  HORIZONTAL HEMI KerName=CSMainHemiH
#pragma kernel CSMainHemiV  VERTICAL   HEMI KerName=CSMainHemiV

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Core/CoreResources/ImportanceSampling2D.hlsl"

  Texture2D<float4> _Marginal;
  Texture2D<float4> _ConditionalMarginal;
RWTexture2D<float4> _Output;

float4               _Sizes;

#define _SizeInfos      _Sizes.xyz
#define _SamplesCount   ((uint)_Sizes.w)

[numthreads(8, 1, 1)]
void KerName(uint3 id : SV_DispatchThreadID)
{
    if (all(id.x < _SamplesCount.x))
    {
        float2 xi = Hammersley2dSeq(id.x, _SamplesCount);

        float2 latLongUV;
        float3 sampleDir;

#ifdef HEMI
        float2 infos = ImportanceSamplingHemiLatLong(latLongUV, sampleDir, xi, _SizeInfos.xyz, _Marginal, s_linear_clamp_sampler, _ConditionalMarginal, s_linear_clamp_sampler);
#else
        float2 infos = ImportanceSamplingLatLong    (latLongUV, sampleDir, xi, _SizeInfos.xyz, _Marginal, s_linear_clamp_sampler, _ConditionalMarginal, s_linear_clamp_sampler);
#endif

        latLongUV = saturate(latLongUV);

        _Output[id.xy] = float4(latLongUV.xy, infos.xy);
    }
}

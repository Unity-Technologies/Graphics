//--------------------------------------------------------------------------------------------------
// Definitions
//--------------------------------------------------------------------------------------------------

// #pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma kernel FilterVolumetricLightingX FilterVolumetricLighting=FilterVolumetricLightingX LIGHTLOOP_DISABLE_TILE_AND_CLUSTER VL_PRESET_HQ
#pragma kernel FilterVolumetricLightingY FilterVolumetricLighting=FilterVolumetricLightingY LIGHTLOOP_DISABLE_TILE_AND_CLUSTER VL_PRESET_HQ VERTICAL_PASS

//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

//--------------------------------------------------------------------------------------------------
// Inputs & outputs
//--------------------------------------------------------------------------------------------------

RW_TEXTURE3D(float4, _VBufferLightingIntegral);
RW_TEXTURE3D(float4, _VBufferLightingFeedback);


#define SIGMA_FILTER 2.0
#define GROUP_SIZE_1D                      8

float Gaussian(float radius, float sigma)
{
    float v = radius / sigma;
    return exp(-(v*v));
}

[numthreads(GROUP_SIZE_1D, GROUP_SIZE_1D, 1)]
void FilterVolumetricLighting(uint3 dispatchThreadId : SV_DispatchThreadID,
                                uint2 groupId          : SV_GroupID,
                                uint2 groupThreadId    : SV_GroupThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the coordinate that this thread needs to process
    uint2 currentCoord  = groupId * GROUP_SIZE_1D + groupThreadId;

    // Compute the half size of the slices, used to define the filtering radius
    uint halfSliceCount = _VBufferSliceCount / 2;

    // Loop through the slices that this thread needs to process
    for (uint currentSlice = 0; currentSlice < _VBufferSliceCount; currentSlice++)
    {
        // Compute the output voxel coordinate
        uint3 voxelCoord = uint3(currentCoord, currentSlice + _VBufferSliceCount * unity_StereoEyeIndex);

        // Values used for accumulation
        float sumW = 0.0;
        float4 value = float4(0.0, 0.0, 0.0, 0.0);
        #ifdef VERTICAL_PASS
        int3 vec = int3(0, 1, 0);
        #else
        int3 vec = int3(1, 0, 0);
        #endif

        // Compute the radius for this slice
        int radius =  currentSlice > halfSliceCount ? 2 : 1;
        // Loop through the values required for our kernel
        for (int idx = -radius; idx <= radius; ++idx)
        {
            // Compute the next tapping coordinate
            int3 tapCoord = int3(voxelCoord.x, voxelCoord.y, voxelCoord.z) + vec * idx;
            // Tap the value we should be tapping from
            float4 currentValue = _VBufferLightingFeedback[tapCoord];
            // Compute the weight for this tap
            float weight = Gaussian(abs(idx), SIGMA_FILTER);

            // If this is outside of the image, force the weight to 0
            #ifdef VERTICAL_PASS
            if (tapCoord.y < 0.0 || tapCoord.y >= _VBufferViewportSize.y) weight = 0;
            #else
            if (tapCoord.x < 0.0|| tapCoord.x >= _VBufferViewportSize.x) weight = 0;
            #endif

            // Accumulate the value and weight
            value += currentValue * weight;
            sumW += weight;
        }
        // Normalize and output
        _VBufferLightingIntegral[voxelCoord] = value / sumW;
    }
}

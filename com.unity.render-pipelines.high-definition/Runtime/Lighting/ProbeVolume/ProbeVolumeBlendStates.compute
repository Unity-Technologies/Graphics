#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
//#pragma enable_d3d11_debug_symbols

#pragma kernel BlendStates

#pragma multi_compile _ PROBE_VOLUMES_L2

#include "Packages/com.unity.render-pipelines.core/Runtime/Lighting/ProbeVolume/ProbeVolumeBlendStates.hlsl"

Texture3D<float4> _State0_L0_L1Rx;
Texture3D<float4> _State0_L1G_L1Ry;
Texture3D<float4> _State0_L1B_L1Rz;

Texture3D<float4> _State1_L0_L1Rx;
Texture3D<float4> _State1_L1G_L1Ry;
Texture3D<float4> _State1_L1B_L1Rz;

RWTexture3D<float4> _Out_L0_L1Rx;
RWTexture3D<float4> _Out_L1G_L1Ry;
RWTexture3D<float4> _Out_L1B_L1Rz;

#ifdef PROBE_VOLUMES_L2
Texture3D<float4> _State0_L2_0;
Texture3D<float4> _State0_L2_1;
Texture3D<float4> _State0_L2_2;
Texture3D<float4> _State0_L2_3;

Texture3D<float4> _State1_L2_0;
Texture3D<float4> _State1_L2_1;
Texture3D<float4> _State1_L2_2;
Texture3D<float4> _State1_L2_3;

RWTexture3D<float4> _Out_L2_0;
RWTexture3D<float4> _Out_L2_1;
RWTexture3D<float4> _Out_L2_2;
RWTexture3D<float4> _Out_L2_3;
#endif

StructuredBuffer<uint> _ChunkMapping;

float4 _ChunkDim_LerpFactor;
#define _ChunkDim _ChunkDim_LerpFactor.xyz
#define _LerpFactor _ChunkDim_LerpFactor.w

float4 _PoolDims;
#define _SrcPoolChunkCount _PoolDims.xy
#define _DstPoolDim _PoolDims.zw

uint ChunkToIndex(uint3 chunk, float2 poolSize)
{
    return chunk.z * (poolSize.x*poolSize.y) + chunk.y * poolSize.x + chunk.x;
}

uint3 IndexToChunk(uint index, float2 poolSize)
{
    uint coordZ = index / (poolSize.x*poolSize.y);
    uint offsetXY = index - coordZ * (poolSize.x*poolSize.y);
    return uint3(offsetXY % poolSize.x, offsetXY / poolSize.x, coordZ);
}

uint3 LocationToChunk(uint3 loc)
{
    return loc / _ChunkDim;
}

uint3 ChunkToLocation(uint3 chunk)
{
    return chunk * _ChunkDim;
}

[numthreads(4, 4, 4)]
void BlendStates(uint3 loc : SV_DispatchThreadID)
{
    uint3 srcChunk = LocationToChunk(loc);
    uint srcChunkIdx = ChunkToIndex(srcChunk, _SrcPoolChunkCount);
    uint dstChunkIdx = _ChunkMapping[srcChunkIdx];
    if (dstChunkIdx == 0xFFFFFFFF) // Chunk not uploaded
        return;

    uint3 dstLoc = IndexToChunk(dstChunkIdx, _DstPoolDim) + (loc - ChunkToLocation(srcChunk));

    // Load
    APVResources resources0, resources1;
    LOAD_APV_RES(resources0, _State0);
    LOAD_APV_RES(resources1, _State1);

    APVSample state0 = LoadAndDecodeAPV(resources0, loc);
    APVSample state1 = LoadAndDecodeAPV(resources1, loc);

    // Blend
    state0 = BlendAPVSamples(state0, state1, _LerpFactor);

    // Store
    APVResourcesRW output;
    LOAD_APV_RES(output, _Out);

    EncodeAndStoreAPV(output, state0, dstLoc);
}

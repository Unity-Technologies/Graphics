#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/MotionBlurCommon.hlsl"

#pragma kernel MotionVecPreppingCS MOTION_VEC_PREPPING

#pragma only_renderers d3d11 playstation xboxone vulkan metal switch


#define SKIP_PREPPING_IF_NOT_NEEDED defined(PLATFORM_SUPPORTS_WAVE_INTRINSICS)



// We use polar coordinates. This has the advantage of storing the length separately and we'll need the length several times.
float2 EncodeMotionVector(float2 motionVec)
{
    float motionVecLen = length(motionVec);
    if (motionVecLen < 0.0001)
    {
        return 0.0;
    }
    else
    {
        float theta = atan2(motionVec.y, motionVec.x)  * (0.5 / PI) + 0.5;
        return float2(motionVecLen, theta);
    }
}

float2 ClampMotionVec(float2 motionVec, float maxMotionVec)
{
    float len = length(motionVec);
    return (len > 0.0) ? min(len, maxMotionVec) * (motionVec * rcp(len)) : 0.0;
}

// Prep motion vectors so that the velocity due to rotation is clamped more lightly
float2 ComputeMotionVec(PositionInputs posInput, float2 sampledMotionVec)
{
    float4 worldPos = float4(posInput.positionWS, 1.0);
    float4 prevPos = worldPos;

    float4 prevClipPos = mul(_DisableCameraMotion ? UNITY_MATRIX_PREV_VP : _PrevVPMatrixNoTranslation, prevPos);
    float4 curClipPos = mul(UNITY_MATRIX_UNJITTERED_VP, worldPos);

    float2 previousPositionCS = prevClipPos.xy / prevClipPos.w;
    float2 positionCS = curClipPos.xy / curClipPos.w;

    float2 cameraMv = (positionCS - previousPositionCS);
#if UNITY_UV_STARTS_AT_TOP
    cameraMv.y = -cameraMv.y;
#endif
    cameraMv *= 0.5;

    [branch]
    if (_DisableCameraMotion)
    {
        return ClampMotionVec((sampledMotionVec - cameraMv) * _MotionBlurIntensity, _MotionBlurMaxMotionVec);
    }
    else
    {
        float2 velWithoutRot = sampledMotionVec - cameraMv;
        cameraMv *= _MotionBlurIntensity;
        float2 clampedMotionVecRot = ClampMotionVec(cameraMv, _CameraRotationClampNDC);
        return ClampMotionVec(velWithoutRot * _MotionBlurIntensity, _MotionBlurMaxMotionVec) + clampedMotionVecRot;
    }

}

[numthreads(8, 8,1)]
void MotionVecPreppingCS(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    float3 motionVecAndDepth = 0.0f;
    float4 motionVecBufferSample = LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, dispatchThreadId.xy);
    // if we have a value > 1.0f, it means we have selected the "no motion option", hence we force motionVec 0. 
    bool forceNoMotion = PixelSetAsNoMotionVectors(motionVecBufferSample);

    float2 motionVec;
    DecodeMotionVector(motionVecBufferSample, motionVec);

    float depth = LoadCameraDepth(dispatchThreadId.xy);


    if ( !forceNoMotion
#if SKIP_PREPPING_IF_NOT_NEEDED
        && WaveActiveAnyTrue(dot(motionVec, motionVec) * _ScreenMagnitudeSq > _MinMotionVecThresholdSq)
#endif
        )
    {

        PositionInputs posInput = GetPositionInput(dispatchThreadId.xy, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V);

        float2 finalMotionVec = ComputeMotionVec(posInput, motionVec);
        motionVecAndDepth.xy = EncodeMotionVector(finalMotionVec);
        motionVecAndDepth.z = posInput.linearDepth;
    }
    else
    {
        motionVecAndDepth.z = LinearEyeDepth(depth, _ZBufferParams);
    }

    _MotionVecAndDepth[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = motionVecAndDepth;
}

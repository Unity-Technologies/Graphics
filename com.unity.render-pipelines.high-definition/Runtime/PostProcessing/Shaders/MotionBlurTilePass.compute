#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/MotionBlurCommon.hlsl"

// We need to manually declare variants as PS4 supports R32Uint only >19.2 and there is currently no way to detect that in shader.
#pragma kernel TileGenPass_Scattering              TILE_GEN_KERNEL_NAME=TileGenPass_Scattering GEN_PASS SCATTERING
#pragma kernel TileNeighbourhood_Scattering        TILE_NEIGHBOURHOOD_KERNEL_NAME=TileNeighbourhood_Scattering NEIGHBOURHOOD_PASS SCATTERING
#pragma kernel TileMinMaxMerge                     MERGE_PASS SCATTERING

#pragma kernel TileGenPass                        TILE_GEN_KERNEL_NAME=TileGenPass GEN_PASS
#pragma kernel TileNeighbourhood                  TILE_NEIGHBOURHOOD_KERNEL_NAME=TileNeighbourhood NEIGHBOURHOOD_PASS

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#define USE_WAVE_INTRINSICS         defined(PLATFORM_SUPPORTS_WAVE_INTRINSICS)

#ifdef SCATTERING
#define TILE_SIZE                   16u
#else
#define TILE_SIZE                   32u
#endif

uint PackMotionVec(float2 packedMotionVec)
{
    // Most relevant bits contain the length of the motion vector, so that we can sort directly on uint value.
    return f32tof16(packedMotionVec.y) | f32tof16(packedMotionVec.x) << 16;
}

float2 UnpackMotionVec(uint packedMotionVec)
{
    float2 outMotionVec;
    outMotionVec.x = f16tof32(packedMotionVec >> 16);
    outMotionVec.y = f16tof32(packedMotionVec);
    return outMotionVec;
}

#if USE_WAVE_INTRINSICS

#define LDS_SIZE  (TILE_SIZE * TILE_SIZE) / WAVE_SIZE

#else

#define LDS_SIZE TILE_SIZE * TILE_SIZE

#endif

groupshared float gs_minMotionVec[LDS_SIZE];
groupshared uint gs_maxMotionVec[LDS_SIZE];

// Returns min motionVec length in x, max motionVec in zw
float3 ParallelReduction(uint gid, uint threadIdx, float2 motionVec)
{
    uint packedMotionVec = PackMotionVec(motionVec);
    float motionVecLength = MotionVecLengthFromEncoded(motionVec);
    float minMotionVecLen = 0.0f;
    uint  maxMotionVecPacked = 0.0f;

#if USE_WAVE_INTRINSICS // This works only with multiple of 8 for TILE_SIZE.

    uint waveCount = ((TILE_SIZE * TILE_SIZE) / WAVE_SIZE);

    // Find min/max for this wave and store it in LDS. 
    float waveMin = WaveActiveMin(motionVecLength);
    uint waveMax = WaveActiveMax(packedMotionVec);

    uint waveIDInGroup = gid / WAVE_SIZE;
    if (WaveIsFirstLane())
    {
        gs_minMotionVec[waveIDInGroup] = waveMin;
        gs_maxMotionVec[waveIDInGroup] = waveMax;
    }

    // We have values for all the waves, let's sync. 
    GroupMemoryBarrierWithGroupSync();

    if (threadIdx == 0)
    {
        // Find min and max across waves.
        minMotionVecLen = gs_minMotionVec[0];
        maxMotionVecPacked = gs_maxMotionVec[0];
        for (uint i = 1u; i < waveCount; ++i)
        {
            minMotionVecLen = min(minMotionVecLen, gs_minMotionVec[i]);
            maxMotionVecPacked = max(maxMotionVecPacked, gs_maxMotionVec[i]);
        }
    }
#else
    gs_minMotionVec[threadIdx] = motionVecLength;
    gs_maxMotionVec[threadIdx] = packedMotionVec;

    GroupMemoryBarrierWithGroupSync();


    UNITY_UNROLL
    for (uint s = (TILE_SIZE * TILE_SIZE) / 2u; s > 0u; s >>= 1u)
    {
        if (threadIdx < s)
        {
            gs_minMotionVec[threadIdx] = min(gs_minMotionVec[threadIdx], gs_minMotionVec[threadIdx + s]);
            gs_maxMotionVec[threadIdx] = max(gs_maxMotionVec[threadIdx], gs_maxMotionVec[threadIdx + s]);
        }

        GroupMemoryBarrierWithGroupSync();
    }

    maxMotionVecPacked = gs_maxMotionVec[0];
    minMotionVecLen = gs_minMotionVec[0];

#endif
    float2 unpackedMaxMotionVec = UnpackMotionVec(maxMotionVecPacked);
    return float3(minMotionVecLen, unpackedMaxMotionVec);
}


#ifdef GEN_PASS

[numthreads(TILE_SIZE, TILE_SIZE,1)]
void TILE_GEN_KERNEL_NAME(uint3 id : SV_DispatchThreadID, uint gid : SV_GroupIndex, uint2 groupThreadId : SV_GroupThreadID, uint3 groupID: SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(id.z);
    uint threadIdx = groupThreadId.y * TILE_SIZE + groupThreadId.x;

    float2 motionVec = LOAD_TEXTURE2D_X(_MotionVecAndDepth, id.xy).xy;

    float3 minMaxMotionVec = ParallelReduction(gid, threadIdx, motionVec);
    float minMotionVecLength = minMaxMotionVec.x;
    float2 maxMotionVec = minMaxMotionVec.yz;

    if (threadIdx == 0)
    {
#ifdef SCATTERING
        _TileToScatterMax[COORD_TEXTURE2D_X(groupID.xy)] = PackMotionVec(maxMotionVec);
        _TileToScatterMin[COORD_TEXTURE2D_X(groupID.xy)] = f32tof16(minMotionVecLength);
#else
        _TileMinMaxMotionVec[COORD_TEXTURE2D_X(groupID.xy)] = float3(maxMotionVec.x, maxMotionVec.y, minMotionVecLength);
#endif
    }

}

#elif NEIGHBOURHOOD_PASS 

#ifdef SCATTERING

// TODO: Consider a conservative line rasterization.
// Line drawing algorithms.
#if 0
void Bresenham(int2 center, float2 lineToDraw, uint centerInfo)
{
    int2 maxCoords = int2(_TileTargetSize.xy - 1);

    // Determine start and end point of the line. Forward
    int2 startPoint = center;
    int2 endPoint = int2(ceil(startPoint.x + lineToDraw.x), ceil(startPoint.y + lineToDraw.y));
    endPoint = clamp(endPoint, int2(0, 0), maxCoords);

    int2 delta = int2(abs(startPoint - endPoint));
    int2 steps = int2(startPoint.x < endPoint.x ? 1 : -1, startPoint.y < endPoint.y ? 1 : -1);
    int tMax = (delta.x > delta.y ? delta.x : -delta.y) / 2;

    int x = startPoint.x;
    int y = startPoint.y;

    for (int i = 0; i < 32; ++i)
    {
        if (x >= endPoint.x && y >= endPoint.y)
        {
            break;
        }
        if (tMax > -delta.x)
        {
            tMax -= delta.y;
            x += steps.x;
        }
        if (tMax < delta.y)
        {
            tMax += delta.x;
            y += steps.y;
        }

        InterlockedMax(_TileToScatterMax[int2(x, y)], uint(centerInfo));
    }
}
#endif

void DDA(int2 center, float2 lineToDraw, uint centerInfo)
{
    int2 maxCoords = int2(_TileTargetSize.xy);

    int2 startPoint = center;
    int2 endPoint = int2(ceil(startPoint.x + lineToDraw.x), ceil(startPoint.y + lineToDraw.y));
    endPoint = clamp(endPoint, int2(0, 0), maxCoords);

    bool permute = false;
    if (abs(lineToDraw.x) < abs(lineToDraw.y))
    {
        permute = true;
        lineToDraw = lineToDraw.yx;
        startPoint = startPoint.yx;
        endPoint = endPoint.yx;
    }
    float dirSign = sign(lineToDraw.x);

    float invDeltaX = dirSign / lineToDraw.x;
    float2 step = float2(dirSign, lineToDraw.y * invDeltaX);

    float end = endPoint.x * dirSign;
    float2 currPoint = startPoint;

    const int maxIter = 64;
    for (int i = 0; ((currPoint.x * dirSign) <= end) && (i < maxIter); ++i)
    {
        currPoint += step;
        float2 hitPixel = permute ? currPoint.yx : currPoint;
        hitPixel = clamp(hitPixel, 0, _TileTargetSize.xy);
        InterlockedMax(_TileToScatterMax[COORD_TEXTURE2D_X(ceil(hitPixel))], uint(centerInfo));
    }
}

#define USE_NEIGHBOURHOOD_MIN 1
[numthreads(8, 8, 1)]
void TILE_NEIGHBOURHOOD_KERNEL_NAME(uint3 dispatchID : SV_DispatchThreadID, uint gid : SV_GroupIndex, uint2 groupThreadId : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
#ifndef SHADER_API_METAL
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchID.z);
    int2 id = dispatchID.xy;
    int2 maxCoords = int2(_TileTargetSize.xy - 1);

    if (any(id > maxCoords)) return;

    // Sample the motionVec at this tile.
    uint packedTileInfo = _TileToScatterMax[COORD_TEXTURE2D_X(id)];
    float minMotionVec = _TileToScatterMin[COORD_TEXTURE2D_X(id)];

    float2 MotionVecData = UnpackMotionVec(packedTileInfo);

    // Covert to a per pixel motionVec.
    float2 maxMotionVectorInTiles = DecodeMotionVectorFromPacked(MotionVecData.xy) *  _TileTargetSize.xy * 0.5f;

    // If the central motionVec is small, no need to spread it.
    if (MotionVecLengthInPixelsFromEncoded(MotionVecData) > 0.5f)
    {
        // Spread Forward
        DDA(id, maxMotionVectorInTiles, packedTileInfo);
        // Spread Backward
        DDA(id, -maxMotionVectorInTiles, packedTileInfo);
    }

    // TODO: We need to find a better min motionVec determination.
    #if USE_NEIGHBOURHOOD_MIN
    // Find min of the tile in the 1-ring neighbourhood? This is incorrect, but might be worth perf wise. 
    float v0 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(-1, 1), int2(0, 0), maxCoords))];
    float v1 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(0, 1), int2(0, 0), maxCoords))];
    float v2 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(1, 1), int2(0, 0), maxCoords))];

    float v3 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(-1, 0), int2(0, 0), maxCoords))];
    float v4 = minMotionVec;
    float v5 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(1, 0), int2(0, 0), maxCoords))];

    float v6 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(-1, -1), int2(0, 0), maxCoords))];
    float v7 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(0, -1), int2(0, 0), maxCoords))];
    float v8 = _TileToScatterMin[COORD_TEXTURE2D_X(clamp(id.xy + int2(1, -1), int2(0, 0), maxCoords))];

    float minMotionVec0 = Min3(v0, v1, v2);
    float minMotionVec1 = Min3(v3, v4, v5);
    float minMotionVec2 = Min3(v6, v7, v8);
    minMotionVec = Min3(minMotionVec0, minMotionVec1, minMotionVec2);
    #endif
    _TileToScatterMin[COORD_TEXTURE2D_X(id)] = minMotionVec;
#endif
}

#else

RW_TEXTURE2D_X(float3, _TileMaxNeighbourhood);

[numthreads(8, 8, 1)]
void TILE_NEIGHBOURHOOD_KERNEL_NAME(uint3 dispatchID : SV_DispatchThreadID, uint gid : SV_GroupIndex, uint2 groupThreadId : SV_GroupThreadID, uint3 groupID : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchID.z);
    int2 id = dispatchID.xy;
    int2 maxCoords = int2(_TileTargetSize.xy - 1);

    float3 centralSample = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(id.xy + uint2(0, 0))].xyz;
    
    float3 v0 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2(-1,  1), int2(0, 0), maxCoords))].xyz;
    float3 v1 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2( 0,  1), int2(0, 0), maxCoords))].xyz;
    float3 v2 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2( 1,  1), int2(0, 0), maxCoords))].xyz;

    float3 v3 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2(-1,  0), int2(0, 0), maxCoords))].xyz;
    float3 v4 = centralSample.xyz;
    float3 v5 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2( 1,  0), int2(0, 0), maxCoords))].xyz;

    float3 v6 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2(-1,  -1), int2(0, 0), maxCoords))].xyz;
    float3 v7 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2( 0,  -1), int2(0, 0), maxCoords))].xyz;
    float3 v8 = _TileMinMaxMotionVec[COORD_TEXTURE2D_X(clamp(id.xy + int2( 1,  -1), int2(0, 0), maxCoords))].xyz;


    float2 maxMotionVec0 = MaxMotionVec(v0.xy, MaxMotionVec(v1.xy, v2.xy));
    float2 maxMotionVec1 = MaxMotionVec(v3.xy, MaxMotionVec(v4.xy, v5.xy));
    float2 maxMotionVec2 = MaxMotionVec(v6.xy, MaxMotionVec(v7.xy, v8.xy));

    float minMotionVec0 = Min3(v0.z, v1.z, v2.z);
    float minMotionVec1 = Min3(v3.z, v4.z, v5.z);
    float minMotionVec2 = Min3(v6.z, v7.z, v8.z);


    _TileMaxNeighbourhood[COORD_TEXTURE2D_X(id.xy)] = float3(MaxMotionVec(maxMotionVec0, MaxMotionVec(maxMotionVec1, maxMotionVec2)), Min3(minMotionVec0, minMotionVec1, minMotionVec2)) ;
}

#endif

#endif

#if MERGE_PASS

#if SCATTERING
TEXTURE2D_X_UINT(_TileToScatterMax);
TEXTURE2D_X(_TileToScatterMin);
RW_TEXTURE2D_X(float3, _TileMaxNeighbourhood);
#endif

[numthreads(8, 8, 1)]
void TileMinMaxMerge(uint3 dispatchID : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchID.z);

#ifdef SCATTERING
    int2 id = dispatchID.xy;

    // If we scattered wider than a 3 tile radius, then we do an additional neighbourhood search.
    float2 maxVelData = UnpackMotionVec(_TileToScatterMax[COORD_TEXTURE2D_X(id)]);
    float maxVelLen = MotionVecLengthInPixelsFromEncoded(maxVelData);

    // TODO: In theory this could have to be even wider. In general, we need a better way to determine min velocities.
    float minVel = 0.0f;
    int2 maxCoords = int2(_TileTargetSize.xy - 1);

    if (maxVelLen > TILE_SIZE * 3.5)
    {

        float4 data0 = GATHER_TEXTURE2D_X(_TileToScatterMin, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((id + float2(-2.0, 0.0))  * _TileTargetSize.zw, _TileTargetSize.zw));
        float4 data1 = GATHER_TEXTURE2D_X(_TileToScatterMin, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((id + float2(0.0, 2.0))  * _TileTargetSize.zw, _TileTargetSize.zw));
        float4 data2 = GATHER_TEXTURE2D_X(_TileToScatterMin, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((id + float2(-2.0, 2.0))  * _TileTargetSize.zw, _TileTargetSize.zw));
        float4 data3 = GATHER_TEXTURE2D_X(_TileToScatterMin, s_linear_clamp_sampler, ClampAndScaleUVForBilinear((id + float2(0.0, 0.0))  * _TileTargetSize.zw, _TileTargetSize.zw));

        float minData0 = min(data0.x, Min3(data0.y, data0.z, data0.w));
        float minData1 = min(data1.x, Min3(data1.y, data1.z, data1.w));
        float minData2 = min(data2.x, Min3(data2.y, data2.z, data2.w));
        float minData3 = min(data3.x, Min3(data3.y, data3.z, data3.w));

         minVel = min(minData0, Min3(minData1, minData2, minData3));
    }
    else
    {
        minVel = _TileToScatterMin[COORD_TEXTURE2D_X(id)].x;
    }

    _TileMaxNeighbourhood[COORD_TEXTURE2D_X(id)] = float3(UnpackMotionVec(_TileToScatterMax[COORD_TEXTURE2D_X(id)]), f16tof32(minVel));
#endif
}
#endif

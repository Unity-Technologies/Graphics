// Definitions
//--------------------------------------------------------------------------------------------------

// #pragma enable_d3d11_debug_symbols
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma kernel MainCS

//#pragma multi_compile _ SSR_APPROX

//--------------------------------------------------------------------------------------------------
// Included headers
//--------------------------------------------------------------------------------------------------

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ShaderVariablesScreenSpaceReflection.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

#ifdef DEBUG_DISPLAY
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Debug.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
#endif

RW_TEXTURE2D_X(float, _LensFlareOcclusion);

groupshared float localOcclusion[8][8];

[numthreads(8, 8, 1)]
void MainCS(uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupThreadID : SV_GroupThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Row[0] is reserved to store the results
    localOcclusion[groupThreadID.x][groupThreadID.y] = _LensFlareOcclusion[COORD_TEXTURE2D_X(dispatchThreadId.xy + uint2(0, 1))].x;
    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.y < 4)
        localOcclusion[groupThreadID.x][groupThreadID.y] = max(localOcclusion[groupThreadID.x][groupThreadID.y], localOcclusion[groupThreadID.x][groupThreadID.y + 4]);
    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.y < 2)
        localOcclusion[groupThreadID.x][groupThreadID.y] = max(localOcclusion[groupThreadID.x][groupThreadID.y], localOcclusion[groupThreadID.x][groupThreadID.y + 2]);
    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.y == 0)
    {
        _LensFlareOcclusion[COORD_TEXTURE2D_X(uint2(dispatchThreadId.x, 0))] = max(localOcclusion[groupThreadID.x][0], localOcclusion[groupThreadID.x][1]);
    }
}

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/PostProcessDefines.hlsl"

#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma kernel KMain

#pragma multi_compile LOW_QUALITY HIGH_QUALITY
#pragma multi_compile _ ENABLE_ALPHA

TEXTURE2D_X(_InputTexture);

RW_TEXTURE2D_X(CTYPE, _OutputTexture);

CBUFFER_START(cb0)
    float4 _TexelSize;
    float4 _BloomThreshold;
CBUFFER_END

float3 BilinearSample(float2 uv, float2 offset, out float weight)
{
    CTYPE c = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, s_linear_clamp_sampler, ClampAndScaleUVForBilinear(uv + offset * _ScreenSize.zw), 0.0).CTYPE_SWIZZLE;
#ifdef ENABLE_ALPHA
    // When alpha is enabled, regions with zero alpha should not generate any bloom / glow. Therefore we pre-multipy the color with the alpha channel here and the rest  
    // of the computations remain float3. Still, when bloom is applied to the final image, bloom will still be spread on regions with zero alpha (see UberPost.compute)
    c.xyz *= c.w;
#endif
    c.xyz = QuadraticThreshold(c.xyz, _BloomThreshold.x, _BloomThreshold.yzw);

    weight = 1.0 / (Luminance(c.xyz) + 1.0);
    return c.xyz;
}

float3 PartialAverage(float3 c0, float3 c1, float3 c2, float3 c3, float w0, float w1, float w2, float w3)
{
    return (c0*w0 + c1*w1 + c2*w2 + c3*w3) / (w0 + w1 + w2 + w3);
}

#define GROUP_SIZE 8

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void KMain(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _TexelSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    float2 uv = posInputs.positionNDC;

#if LOW_QUALITY
    // Use a rotated grid to minimize artifacts coming from horizontal and vertical boundaries
    // "High Quality Antialiasing" [Lorach07]
    const float2 kTaps[] = {
        float2( 0.0,  0.0),
        float2( 0.9, -0.4),
        float2(-0.9,  0.4),
        float2( 0.4,  0.9),
        float2(-0.4, -0.9)
    };

    float w0, w1, w2, w3, w4;
    float3 color0 = BilinearSample(uv, kTaps[0], w0);
    float3 color1 = BilinearSample(uv, kTaps[1], w1);
    float3 color2 = BilinearSample(uv, kTaps[2], w2);
    float3 color3 = BilinearSample(uv, kTaps[3], w3);
    float3 color4 = BilinearSample(uv, kTaps[4], w4);

    // Luma weighted average [Karis13]
    float wSum = w0 + w1 + w2 + w3 + w4;

    color0 *= w0;
    color1 *= w1;
    color2 *= w2;
    color3 *= w3;
    color4 *= w4;

    float3 acc = color0 + color1 + color2 + color3 + color4;
    float3 output = acc / wSum;
#else
    // "Post-Processing in CoD Advanced Warfare" [Jimenez14]
    float wA, wB, wC, wD, wE, wF, wG, wH, wI, wJ, wK, wL, wM;
    float3 A = BilinearSample(uv, float2(-1.0, -1.0), wA);
    float3 B = BilinearSample(uv, float2( 0.0, -1.0), wB);
    float3 C = BilinearSample(uv, float2( 1.0, -1.0), wC);
    float3 D = BilinearSample(uv, float2(-0.5, -0.5), wD);
    float3 E = BilinearSample(uv, float2( 0.5, -0.5), wE);
    float3 F = BilinearSample(uv, float2(-1.0,  0.0), wF);
    float3 G = BilinearSample(uv, float2( 0.0,  0.0), wG);
    float3 H = BilinearSample(uv, float2( 1.0,  0.0), wH);
    float3 I = BilinearSample(uv, float2(-0.5,  0.5), wI);
    float3 J = BilinearSample(uv, float2( 0.5,  0.5), wJ);
    float3 K = BilinearSample(uv, float2(-1.0,  1.0), wK);
    float3 L = BilinearSample(uv, float2( 0.0,  1.0), wL);
    float3 M = BilinearSample(uv, float2( 1.0,  1.0), wM);

    float3 output = 0;
    output += PartialAverage(D, E, I, J, wD, wE, wI, wJ) * 0.5;
    output += PartialAverage(A, B, F, G, wA, wB, wF, wG) * 0.125;
    output += PartialAverage(B, C, G, H, wB, wC, wG, wH) * 0.125;
    output += PartialAverage(F, G, K, L, wF, wG, wK, wL) * 0.125;
    output += PartialAverage(G, H, L, M, wG, wH, wL, wM) * 0.125;
#endif

    // Guard bands
    output *= all(dispatchThreadId.xy <= uint2(_TexelSize.xy));

#ifdef ENABLE_ALPHA
    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = float4(output,1);
#else
    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = output;
#endif
}

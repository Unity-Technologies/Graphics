#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/BloomCommon.hlsl"

#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma kernel KMain

TEXTURE2D_X(_InputTexture);

RW_TEXTURE2D_X(float3, _OutputTexture);

SAMPLER(sampler_LinearClamp);

CBUFFER_START(cb0)
    float4 _TexelSize;
    float4 _BloomThreshold;
CBUFFER_END

#define GROUP_SIZE 8

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void KMain(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    PositionInputs posInputs = GetPositionInput(float2(dispatchThreadId.xy), _TexelSize.zw, uint2(GROUP_SIZE, GROUP_SIZE));
    float2 uv = posInputs.positionNDC;

    // Use a rotated grid to minimize artifacts coming from horizontal and vertical boundaries
    // "High Quality Antialiasing" [Lorach07]
    const float2 kTaps[] = {
        float2( 0.0,  0.0),
        float2( 0.9, -0.4),
        float2(-0.9,  0.4),
        float2( 0.4,  0.9),
        float2(-0.4, -0.9)
    };

    float3 color0 = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(_TexelSize.zw * kTaps[0] + uv, _TexelSize.zw), 0.0).xyz;
    float3 color1 = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(_TexelSize.zw * kTaps[1] + uv, _TexelSize.zw), 0.0).xyz;
    float3 color2 = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(_TexelSize.zw * kTaps[2] + uv, _TexelSize.zw), 0.0).xyz;
    float3 color3 = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(_TexelSize.zw * kTaps[3] + uv, _TexelSize.zw), 0.0).xyz;
    float3 color4 = SAMPLE_TEXTURE2D_X_LOD(_InputTexture, sampler_LinearClamp, ClampAndScaleUVForBilinear(_TexelSize.zw * kTaps[4] + uv, _TexelSize.zw), 0.0).xyz;

    color0 = QuadraticThreshold(color0, _BloomThreshold.x, _BloomThreshold.yzw);
    color1 = QuadraticThreshold(color1, _BloomThreshold.x, _BloomThreshold.yzw);
    color2 = QuadraticThreshold(color2, _BloomThreshold.x, _BloomThreshold.yzw);
    color3 = QuadraticThreshold(color3, _BloomThreshold.x, _BloomThreshold.yzw);
    color4 = QuadraticThreshold(color4, _BloomThreshold.x, _BloomThreshold.yzw);

    // Luma weighted average [Karis13]
    float w0 = 1.0 / (Luminance(color0) + 1.0);
    float w1 = 1.0 / (Luminance(color1) + 1.0);
    float w2 = 1.0 / (Luminance(color2) + 1.0);
    float w3 = 1.0 / (Luminance(color3) + 1.0);
    float w4 = 1.0 / (Luminance(color4) + 1.0);
    float wSum = w0 + w1 + w2 + w3 + w4;

    color0 *= w0;
    color1 *= w1;
    color2 *= w2;
    color3 *= w3;
    color4 *= w4;

    float3 acc = color0 + color1 + color2 + color3 + color4;
    float3 output = acc / wSum;

    // Guard bands
    output *= all(dispatchThreadId.xy < uint2(_TexelSize.xy));

    _OutputTexture[COORD_TEXTURE2D_X(posInputs.positionSS)] = output;
}

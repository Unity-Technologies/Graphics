#pragma kernel KMain
#pragma kernel KInitialize

#pragma multi_compile _ ENABLE_ALPHA
#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#define A_GPU 1
#define A_HLSL 1
#define FSR_RCAS_F 1

#include "Packages/com.unity.render-pipelines.core/Runtime/PostProcessing/Shaders/ffx/ffx_a.hlsl"

// one element:
// [0] = const0
// ComputeBuffer is allocated with stride sizeof(int)*4, 1 element
RWStructuredBuffer<uint4> _RCasParameters;

float _RCASScale;

TEXTURE2D_X(_InputTexture);
RW_TEXTURE2D_X(float4, _OutputTexture);

AF4 FsrRcasLoadF(ASU2 p)  {return _InputTexture[COORD_TEXTURE2D_X(p)]; }
void FsrRcasInputF(inout AF1 r,inout AF1 g,inout AF1 b) {}

#include "Packages/com.unity.render-pipelines.core/Runtime/PostProcessing/Shaders/ffx/ffx_fsr1.hlsl"

void WritePix(AU2 gxy, AF4 casPix)
{
    _OutputTexture[COORD_TEXTURE2D_X(gxy)] = casPix;
}


[numthreads(64, 1, 1)]
void KMain(uint3 LocalThreadId : SV_GroupThreadID, uint3 WorkGroupId : SV_GroupID, uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Do remapping of local xy in workgroup for a more PS-like swizzle pattern.
    AU2 gxy = ARmp8x8(LocalThreadId.x) + AU2(WorkGroupId.x << 3u, WorkGroupId.y << 3u);
#ifdef ENABLE_ALPHA
    float alpha = LOAD_TEXTURE2D_X(_InputTexture, gxy.xy).a;
#else
    float alpha = 1.0;
#endif

    AF4 c = (AF4)0;
    AU4 con = _RCasParameters[0];
    FsrRcasF(c.r,c.g,c.b,gxy,con);
    c.a = alpha;
    WritePix(gxy, c);
}


/*
Doing this to avoid having to deal with any CPU side compilation of the headers.
The FsrRcasCon is doing some extra parameter packing (log space / pows etc) so its better
to keep this all in the GPU for simplicity sake, and avoid paying this cost for every wave.
The headers also dont compile for c#, they are meant for c and c++.
*/
[numthreads(1,1,1)]
void KInitialize()
{
    AU4 con;
    FsrRcasCon(con, _RCASScale);
    _RCasParameters[0] = con;
}

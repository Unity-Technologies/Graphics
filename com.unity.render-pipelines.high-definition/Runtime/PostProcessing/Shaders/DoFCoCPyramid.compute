#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

#pragma only_renderers d3d11 playstation xboxone vulkan metal switch

#pragma kernel KMainCoCPyramid

RW_TEXTURE2D_X(float, _InputTexture);

RW_TEXTURE2D_X(float, _OutputMip1);
RW_TEXTURE2D_X(float, _OutputMip2);
RW_TEXTURE2D_X(float, _OutputMip3);
RW_TEXTURE2D_X(float, _OutputMip4);

#define GROUP_SIZE 8

groupshared float gs_cache[GROUP_SIZE * GROUP_SIZE];

void StorePixel(uint index, float color)
{
    gs_cache[index] = color;
}

float LoadPixel(uint index)
{
    return gs_cache[index];
}

// Generate four mips in one pass
[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void KMainCoCPyramid(uint3 dispatchThreadId : SV_DispatchThreadID, uint groupIndex : SV_GroupIndex)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    uint2 ul = dispatchThreadId.xy << 1u;

    // First mip
    float color = _InputTexture[COORD_TEXTURE2D_X(ul)];
    color = max(color, _InputTexture[COORD_TEXTURE2D_X(ul + uint2(1u, 0u))]);
    color = max(color, _InputTexture[COORD_TEXTURE2D_X(ul + uint2(0u, 1u))]);
    color = max(color, _InputTexture[COORD_TEXTURE2D_X(ul + uint2(1u, 1u))]);

    // TODO: also compute and pack the min value
    StorePixel(groupIndex, color);

    _OutputMip1[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = color;

    GroupMemoryBarrierWithGroupSync();

    // Second mip - checks that X and Y are even
    if ((groupIndex & 0x9) == 0)
    {
        color = max(color, LoadPixel(groupIndex + 1u));
        color = max(color, LoadPixel(groupIndex + 8u));
        color = max(color, LoadPixel(groupIndex + 9u));

        StorePixel(groupIndex, color);

        _OutputMip2[COORD_TEXTURE2D_X(dispatchThreadId.xy / 2u)] = color;
    }

    GroupMemoryBarrierWithGroupSync();

    // Third mip - checks that X and Y are multiples of four
    if ((groupIndex & 0x1b) == 0)
    {
        color = max(color, LoadPixel(groupIndex + 2u));
        color = max(color, LoadPixel(groupIndex + 16u));
        color = max(color, LoadPixel(groupIndex + 18u));
        StorePixel(groupIndex, color);

        _OutputMip3[COORD_TEXTURE2D_X(dispatchThreadId.xy / 4u)] = color;
    }

    GroupMemoryBarrierWithGroupSync();

    // Last mip - only one thread
    if (groupIndex == 0)
    {
        color = max(color, LoadPixel(groupIndex + 4u));
        color = max(color, LoadPixel(groupIndex + 32u));
        color = max(color, LoadPixel(groupIndex + 36u));

        _OutputMip4[COORD_TEXTURE2D_X(dispatchThreadId.xy / 8u)] = color;
    }
}

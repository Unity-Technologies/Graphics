#pragma kernel WaterPrepareSSR
#pragma kernel WaterDeferredLighting
#pragma kernel UnderWater

// Given that the algorithm requires BSDF evaluation, we need to define this macro
#define HAS_LIGHTLOOP
#define SCREEN_SPACE_INDIRECT_DIFFUSE_DISABLED
#define USE_CLUSTERED_LIGHTLIST
#define HAS_REFRACTION 1

// Shadow qualities are supported
#pragma multi_compile SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH SHADOW_VERY_HIGH

// Include and define the shader pass
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS SHADERPASS_DEFERRED_LIGHTING
#define LIGHT_EVALUATION_NO_CONTACT_SHADOWS

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal

// #pragma enable_d3d11_debug_symbols

// HDRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Water/Water.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/HDStencilUsage.cs.hlsl"

// Input textures of the kernels
TEXTURE2D_X(_DepthTexture);
TEXTURE2D_X_UINT2(_StencilTexture);

// Output textures of the kernels
RW_TEXTURE2D_X(float4, _CameraColorTextureRW);
RW_TEXTURE2D_X(float4, _NormalBufferRW);

[numthreads(8, 8, 1)]
void WaterPrepareSSR(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 currentCoord = groupId * 8 + groupThreadId;

    // Is this a water pixel?
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, currentCoord));
    if ((stencilValue & STENCILUSAGE_WATER_SURFACE) == 0)
        return;

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;

    // If this is a background pixel or an invalid ray, leave right away
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Decode the normal and the smoothness
    NormalData normalData;
    DecodeWaterFromNormalBuffer(currentCoord, normalData);

    // Grab the surface index of the current surface
    uint surfaceIndex;
    DecodeWaterSurfaceIndexFromGBuffer(currentCoord, surfaceIndex);

    // Adjust the normal based on where we are w/r to the surface
    bool cameraAboveWater = CameraIsAboveWater(surfaceIndex);
    if (cameraAboveWater)
        normalData.normalWS.y = abs(normalData.normalWS.y);

    // Encode the normal data and output it
    float4 outputNormalData;
    EncodeIntoNormalBuffer(normalData, outputNormalData);
    _NormalBufferRW[COORD_TEXTURE2D_X(currentCoord)] = outputNormalData;
}

[numthreads(8, 8, 1)]
void WaterDeferredLighting(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 currentCoord = groupId * 8 + groupThreadId;

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;

    // If this is a background pixel or an invalid ray, leave right away
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Is this a water pixel?
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, currentCoord));
    if ((stencilValue & 16) ==  0)
        return;

    // Compute the posInput
    uint2 tileCoord = currentCoord / GetTileSize();
    PositionInputs posInput = GetPositionInput(currentCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), tileCoord);

    // Compute the view vector
    float3 V = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

    // Read the bsdf data and builtin data from the gbuffer
    BSDFData bsdfData;
    ZERO_INITIALIZE(BSDFData, bsdfData);

    BuiltinData builtinData;
    ZERO_INITIALIZE(BuiltinData, builtinData);

    // Decode the water data from the gbuffer
    DecodeFromGBuffer(currentCoord, bsdfData, builtinData);

    // Compute the prelight data
    PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

    // Evaluate the light loop
    uint featureFlags = UINT_MAX;
    LightLoopOutput lightLoopOutput;
    LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

    // Alias
    float3 diffuseLighting = lightLoopOutput.diffuseLighting;
    float3 specularLighting = lightLoopOutput.specularLighting;

    // Apply the exposure
    diffuseLighting *= GetCurrentExposureMultiplier();
    specularLighting *= GetCurrentExposureMultiplier();

    // Combine both lighting terms
    float3 finalColor = (diffuseLighting + specularLighting);

    // Evaluate the fog and combine
    float3 volColor, volOpacity;
    EvaluateAtmosphericScattering(posInput, V, volColor, volOpacity);
    finalColor = finalColor * (1 - volOpacity) + volColor;

    // Output to the color buffer
    _CameraColorTextureRW[COORD_TEXTURE2D_X(currentCoord)] = float4(finalColor, 1.0);
}

// Input color value
TEXTURE2D_X(_CameraColorTexture);

// Need to be moved to a constant buffer
[numthreads(8, 8, 1)]
void UnderWater(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 currentCoord = groupId * 8 + groupThreadId;

    // Fetch the direct camera color
    float4 camColor = LOAD_TEXTURE2D_X(_CameraColorTexture, currentCoord);

    // Grab the vertical distance to the surface
    float distanceToSurface = _WaterCameraHeightBuffer[0];

    // If the camera is under the water plane
    if (distanceToSurface > _WaterTransitionSize)
    {
        // Read the color buffer
        _CameraColorTextureRW[COORD_TEXTURE2D_X(currentCoord)] = camColor;
        return;
    }

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;
    PositionInputs posInput = GetPositionInput(currentCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);

    // Evaluate the caustics for this position
    float caustics = 0;

    // Read the stencil value
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, currentCoord));
    if ((stencilValue & 16) ==  0)
        caustics = EvaluateSimulationCaustics(posInput.positionWS, posInput.positionWS + float3(0, _CausticsPlaneBlendDistance, 0), currentCoord * _ScreenSize.zw);

    // Evaluate the fog of the target surface
    float cameraDistance = depthValue == UNITY_RAW_FAR_CLIP_VALUE ? _ProjectionParams.z : length(posInput.positionWS);

    // Evaluate the monochrome absorption
    float waterAbsorption = exp(-_OutScatteringCoeff * cameraDistance / _MaxViewDistanceMultiplier);

    // Evaluate the underwater color
    const float3 farColor = _WaterScatteringColor.xyz * UNDER_WATER_SCATTERING_ATTENUATION;
    const float3 clearColor = camColor.xyz * (1.0 + caustics) * exp(-(1.0-_WaterRefractionColor.xyz));
    float3 underWaterColor = lerp(farColor, clearColor, waterAbsorption);

    // Evaluate the vertical distance to the water surface
    float underWaterBlend = saturate(distanceToSurface / _WaterTransitionSize);

    // Use (or do not use) the underwater color based on the vertical distance to the surface
    float3 color = lerp(underWaterColor, camColor.xyz, underWaterBlend * underWaterBlend);

    // Output the camera color
    _CameraColorTextureRW[COORD_TEXTURE2D_X(currentCoord)] = float4(color, 1.0);
}

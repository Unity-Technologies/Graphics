#pragma kernel ReprojectFoam
#pragma kernel PostProcessFoam

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

// #pragma enable_d3d11_debug_symbols

// Required to be defined for some includes
#define WATER_SIMULATION

// SRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/WaterSystemDef.cs.hlsl"

// EvaluateNormals UAVS
Texture2D<float2> _WaterFoamBuffer;
RWTexture2D<float2> _WaterFoamBufferRW;
float4 _PreviousFoamRegionData;

bool PreviousLocationInsideRegion(float2 foamPrevUV)
{
    return all(foamPrevUV >= 0.0) && all(foamPrevUV <= 1.0);
}

[numthreads(8, 8, 1)]
void ReprojectFoam(uint3 currentThread : SV_DispatchThreadID,
                        int groupIndex : SV_GroupIndex,
                        uint2 groupId : SV_GroupID,
                        uint2 groupThreadId : SV_GroupThreadID)
{
    // Extract the information about the pixel to process
    uint2 coord = currentThread.xy;

    // Evaluate the UV coordinates of this pixel
    float2 foamRegionCoord = (coord + 0.5) / _WaterFoamRegionResolution * 2 - 1;

    // Evaluate the world space position of this pixel
    float2 foamPosWS = foamRegionCoord * 0.5 / _FoamRegionScale + _FoamRegionOffset;

    // Evaluate the previous foam region
    float2 foamWriteCoord = (foamPosWS - _PreviousFoamRegionData.zw) / (_PreviousFoamRegionData.xy * 0.5);

    // Evaluate the UV to use for the sampling
    float2 foamPrevUV = foamWriteCoord * 0.5 + 0.5;

    // Output the normal and foam
    _WaterFoamBufferRW[coord] = PreviousLocationInsideRegion(foamPrevUV) ? SAMPLE_TEXTURE2D_LOD(_WaterFoamBuffer, s_linear_clamp_sampler, foamPrevUV, 0).xy : 0.0;
}


[numthreads(8, 8, 1)]
void PostProcessFoam(uint3 currentThread : SV_DispatchThreadID,
                        int groupIndex : SV_GroupIndex,
                        uint2 groupId : SV_GroupID,
                        uint2 groupThreadId : SV_GroupThreadID)
{
    // Extract the information about the pixel to process
    uint2 coord = currentThread.xy;

    // Output the normal and foam
    _WaterFoamBufferRW[coord] = saturate(LOAD_TEXTURE2D_LOD(_WaterFoamBuffer, coord, 0).xy);
}

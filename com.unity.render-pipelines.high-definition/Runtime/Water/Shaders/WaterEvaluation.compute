#pragma kernel FindVerticalDisplacements

#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

// #pragma enable_d3d11_debug_symbols

// Required for finding the vertical displacements
#pragma multi_compile WATER_ONE_BAND WATER_TWO_BANDS WATER_THREE_BANDS
#pragma multi_compile _ WATER_LOCAL_CURRENT

// Required to be defined for some includes
#define WATER_SIMULATION

// SRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/WaterSystemDef.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/Shaders/WaterUtilities.hlsl"

// The set of input position we need to process
RWStructuredBuffer<float> _WaterCameraHeightBufferRW;

// We allow up to 10 steps to figure out the height of the point
#define SEARCH_ITERATION_COUNT 8

// We consider that we found the point if we were able to
#define SEARCH_DISTANCE_THRESHOLD 0.001

struct TapData
{
    float3 currentDisplacement;
    float3 displacedPoint;
    float2 offset;
    float distance;
    float height;
};

TapData EvaluateDisplacementData(float3 currentLocation, float3 referencePosition)
{
    TapData data;

    // Evaluate the displacement at the current point
    WaterDisplacementData displacementData;
    EvaluateWaterDisplacement(currentLocation, displacementData);
    data.currentDisplacement = displacementData.displacement;

    // Evaluate the complete position
    data.displacedPoint = currentLocation + data.currentDisplacement;

    // Evaluate the distance to the reference point
    data.offset = data.displacedPoint.xz - referencePosition.xz;

    // Length of the offset vector
    data.distance = length(data.offset);

    // Simulation height of the position of the offset vector
    data.height = displacementData.displacement.y;

    return data;
}

[numthreads(1, 1, 1)]
void FindVerticalDisplacements(uint3 currentThread : SV_DispatchThreadID)
{
    // Get the index of the position to process
    uint coord = currentThread.z;

    // The point we will be looking for needs to be converted into the local space of the water simulation
    float3 targetPosition = mul(_WaterSurfaceTransform_Inverse, float4(_WorldSpaceCameraPos.xyz, 1.0)).xyz;

    // Initialize the search data
    bool found = false;
    int stepCount = 0;
    TapData tapData = EvaluateDisplacementData(targetPosition, targetPosition);
    float3 currentLocation = targetPosition;
    float2 stepSize = tapData.offset;
    float currentError = tapData.distance;
    float currentHeight = tapData.height;

    while (stepCount < SEARCH_ITERATION_COUNT)
    {
        bool progress = false;
        // Is the point close enough to target position?
        if (currentError < SEARCH_DISTANCE_THRESHOLD)
        {
            found = true;
            break;
        }

        // Keep track of the step size that will be use for the 4 samples
        float2 localSearchStepSize = stepSize;

        float3 candidateLocation = currentLocation - float3(localSearchStepSize.x, 0, localSearchStepSize.y);
        TapData tapData = EvaluateDisplacementData(candidateLocation, targetPosition);
        if (tapData.distance < currentError)
        {
            currentLocation = candidateLocation;
            stepSize = tapData.offset;
            currentError = tapData.distance;
            currentHeight = tapData.height;
            progress = true;
        }

        // If we didn't make any progress in this step, this means out steps are probably too big make them smaller
        if (!progress)
            stepSize *= 0.25;

        // If none of the 4 steps managed to get closer, we need a smaller step
        stepCount++;
    }

    _WaterCameraHeightBufferRW[4 * coord] = targetPosition.y - currentHeight;
    _WaterCameraHeightBufferRW[4 * coord + 1] = currentError;
    _WaterCameraHeightBufferRW[4 * coord + 2] = stepCount;
    _WaterCameraHeightBufferRW[4 * coord + 3] = 0.0;
}

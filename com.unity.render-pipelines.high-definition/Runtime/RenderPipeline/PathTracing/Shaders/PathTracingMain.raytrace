// We need N bounces given that we want to support complex light paths
#pragma max_recursion_depth 11

// HDRP include
#define SHADER_TARGET 50

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

// Ray tracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"

// Path tracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/PathTracing/Shaders/PathTracingIntersection.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/PathTracing/Shaders/PathTracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/RayTracing/Shaders/Common/AtmosphericScatteringRayTracing.hlsl"

// Input(s)
float4x4 _PixelCoordToViewDirWS;
int      _RaytracingCameraSkyEnabled;
float3   _RaytracingCameraClearColor;

// DoF related parameters
float4   _PathTracedDoFConstants;     // x: aperture radius, y: focus distance, zw: unused
float4   _InvViewportScaleBias;

// Output(s)
RWTexture2D<float4> _RadianceTexture;

[shader("miss")]
void MissCamera(inout PathIntersection pathIntersection : SV_RayPayload)
{
    // If the _RaytracingCameraClearColor content is positive, we override the camera sky display with a bg color
    pathIntersection.value = _EnvLightSkyEnabled && _RaytracingCameraSkyEnabled ?
        SampleSkyTexture(WorldRayDirection(), 0.0, 0).xyz : _RaytracingCameraClearColor * GetInverseCurrentExposureMultiplier();

    ApplyFogAttenuation(WorldRayOrigin(), WorldRayDirection(), pathIntersection.value);
}

[shader("miss")]
void MissLight(inout PathIntersection pathIntersection : SV_RayPayload)
{
}

[shader("miss")]
void MissMaterial(inout PathIntersection pathIntersection : SV_RayPayload)
{
    if ((_RaytracingMaxRecursion - pathIntersection.remainingDepth) < _RaytracingMinRecursion)
    {
        pathIntersection.value = 0.0;
        return;
    }

    pathIntersection.value = _EnvLightSkyEnabled ? SampleSkyTexture(WorldRayDirection(), 0.0, 0).xyz : 0.0;
    ApplyFogAttenuation(WorldRayOrigin(), WorldRayDirection(), pathIntersection.value);
}

[shader("raygeneration")]
void RayGen()
{
    uint2 LaunchIndex = DispatchRaysIndex();

    // Get the current pixel coordinates
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Jitter them (we use 4x10 dimensions of our sequence during path tracing atm, so pick the next available ones)
    float3 jitteredPixelCoord = float3(currentPixelCoord, 1.0);
    jitteredPixelCoord.x += GetSample(currentPixelCoord, _RaytracingSampleIndex, 40);
    jitteredPixelCoord.y += GetSample(currentPixelCoord, _RaytracingSampleIndex, 41);

    float3 directionWS;
    float3 cameraPosWS;

    float apertureRadius = _PathTracedDoFConstants.x;
    if (apertureRadius == 0.0)
    {
        // Compute the ray direction from those coordinates (fast path for zero aperture)
        directionWS = -normalize(mul(jitteredPixelCoord, (float3x3)_PixelCoordToViewDirWS));
        cameraPosWS = _WorldSpaceCameraPos;
    }
    else
    {
        // Compute the ray origin and direction for a lens with non-zero aperture

        // Apply the inverse viewport transform to go from viewport coordinates to NDC
        jitteredPixelCoord.xy = jitteredPixelCoord.xy * _InvViewportScaleBias.xy + _InvViewportScaleBias.zw;

        // Sample the lens apperture using the next available dimensions (we use 40 for path tracing, 2 for sub-pixel jittering, 64 for SSS -> 106, 107)
        float r1 = GetSample(currentPixelCoord, _RaytracingSampleIndex, 106);
        float r2 = GetSample(currentPixelCoord, _RaytracingSampleIndex, 107);
        float2 uv = apertureRadius * SampleDiskUniform(r1, r2);

        // Compute the new ray origin ( _ViewMatrix[0] = right, _ViewMatrix[1] = up, _ViewMatrix[2] = forward )
        float focusDistance = _PathTracedDoFConstants.y;
        float3 focusPoint = _WorldSpaceCameraPos - _ViewMatrix[2] * focusDistance;
        cameraPosWS = _WorldSpaceCameraPos + _ViewMatrix[0] * uv.x + _ViewMatrix[1] * uv.y;

        // Create the new view matrix 
        float3 newForward = normalize(focusPoint - cameraPosWS);
        float3 newRight = cross(newForward, _ViewMatrix[1]);
        float3x3 newViewMatrix = GetLocalFrame(newForward, newRight);

        directionWS = normalize(mul(jitteredPixelCoord, newViewMatrix));
    }

    // Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin = cameraPosWS;
    rayDescriptor.Direction = directionWS;
    rayDescriptor.TMin = _RaytracingCameraNearPlane;
    rayDescriptor.TMax = FLT_INF;

    // Create and init the PathIntersection structure for this
    PathIntersection pathIntersection;
    pathIntersection.value = 1.0;
    pathIntersection.remainingDepth = _RaytracingMaxRecursion;
    pathIntersection.pixelCoord = currentPixelCoord;
    pathIntersection.maxRoughness = 0.001;

    // In order to achieve filtering for the textures, we need to compute the spread angle of the pixel
    pathIntersection.cone.spreadAngle = _RaytracingPixelSpreadAngle;
    pathIntersection.cone.width = 0.0;

    // Evaluate the ray intersection
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, RAYTRACINGRENDERERFLAG_PATH_TRACING, 0, 1, 0, rayDescriptor, pathIntersection);

    _RadianceTexture[currentPixelCoord] = float4(pathIntersection.value, 1.0);
}

// This should never be called, return magenta just in case
[shader("closesthit")]
void ClosestHit(inout PathIntersection pathIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
    pathIntersection.value = float3(1.0, 0.0, 0.5);
}

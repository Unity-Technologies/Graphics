#pragma kernel ValidateHistory

#pragma kernel TemporalAccumulationSingle                       TEMPORAL_ACCUMULATION=TemporalAccumulationSingle SINGLE_CHANNEL
#pragma kernel TemporalAccumulationSingleArray                  TEMPORAL_ACCUMULATION=TemporalAccumulationSingleArray SINGLE_CHANNEL HISTORY_IS_ARRAY
#pragma kernel TemporalAccumulationColor                        TEMPORAL_ACCUMULATION=TemporalAccumulationColor
#pragma kernel TemporalAccumulationColorArray                   TEMPORAL_ACCUMULATION=TemporalAccumulationColorArray HISTORY_IS_ARRAY

#pragma kernel CopyHistorySingle                                COPY_HISTORY=CopyHistorySingle SINGLE_CHANNEL
#pragma kernel CopyHistorySingleArray                           COPY_HISTORY=CopyHistorySingleArray SINGLE_CHANNEL OUTPUT_IS_ARRAY
#pragma kernel CopyHistorySingleArrayNoValidity                 COPY_HISTORY=CopyHistorySingleArrayNoValidity SINGLE_CHANNEL OUTPUT_IS_ARRAY NO_VALIDITY

#pragma kernel CopyHistoryColor                                 COPY_HISTORY=CopyHistoryColor 
#pragma kernel CopyHistoryColorArray                            COPY_HISTORY=CopyHistoryColorArray OUTPUT_IS_ARRAY

// Common includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

// HDRP includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/TemporalAntialiasing.hlsl"

#pragma only_renderers d3d11
// #pragma enable_d3d11_debug_symbols

// Tile size of this compute shaders
#define TEMPORAL_FILTER_TILE_SIZE 8

// Depth buffer of the current frame
TEXTURE2D_X(_DepthTexture);
// Depth buffer of the previous frame
TEXTURE2D_X(_HistoryDepthTexture);
// Normal buffer of the previous frame
TEXTURE2D_X(_HistoryNormalBufferTexture);
// Buffer that stores the result of the validation pass of the history
RW_TEXTURE2D_X(float, _ValidationBufferRW);
// Velocity buffer for history rejection
TEXTURE2D_X(_VelocityBuffer);
// This holds the fov angle of a pixel
float _PixelSpreadAngleTangent;
// Value that tells us if the current history should be discarded based on scene-level data
float _HistoryValidity;

// The maximal world space distance for temporal reprojection
#define MAX_WORLD_SPACE_DISTANCE 0.1
// The maximal pixel reprojection distance
#define PIXEL_RADIUS_TOLERANCE_THRESHOLD 8
// The maximal normal difference threshold
#define MAX_NORMAL_DIFFERENCE 0.65
// The minimal motion distance
#define MINIMAL_MOTION_DISTANCE 0.001 

[numthreads(TEMPORAL_FILTER_TILE_SIZE, TEMPORAL_FILTER_TILE_SIZE, 1)]
void ValidateHistory(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinates
    uint2 centerCoord = groupId * TEMPORAL_FILTER_TILE_SIZE + groupThreadId;

    // Get the posinputs of the current version of the pixel
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, centerCoord).r;
    PositionInputs posInputs = GetPositionInput(centerCoord, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, GetWorldToViewMatrix());

    // If the current point we are processing is a background point or the whole history should be discarded for an other reason, we invalidate the history
    if (depth == UNITY_RAW_FAR_CLIP_VALUE || _HistoryValidity == 0.0f)
    {
        _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 0;
        return;
    }

    // Decode the velocity of the pixel
    float2 velocity = float2(0.0, 0.0);
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, (float2)centerCoord), velocity);

    // Compute the pixel coordinate for the history tapping
    int2 historyTapCoord = (int2)((posInputs.positionNDC - velocity) * _ScreenSize.xy);

    // If the pixel was outside of the screen during the previous frame, invalidate the history
    if (historyTapCoord.x > _ScreenSize.x || historyTapCoord.x < 0 || historyTapCoord.y > _ScreenSize.y || historyTapCoord.y < 0)
    {
        _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 0;
        return;
    }

    // Fetch the depth of the history pixel. If the history position was a background point, invalidate the history
    float historyDepth = LOAD_TEXTURE2D_X(_HistoryDepthTexture, historyTapCoord).r;
    if (historyDepth == UNITY_RAW_FAR_CLIP_VALUE)
    {
        _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 0;
        return;
    }


    // Real the normal data for this pixel
    NormalData normalData;
    DecodeFromNormalBuffer(centerCoord, normalData);

    // Compute the world space position (from previous frame)
    float3 historyPositionWS = ComputeWorldSpacePosition(posInputs.positionNDC - velocity, historyDepth, UNITY_MATRIX_PREV_I_VP);

    // Compute the max reprojection distance. This is evaluated as the max between a fixed radius value and an approximation of the footprint of the pixel.
    float3 viewWS = normalize(-posInputs.positionWS);
    float parallelPixelFootPrint = _PixelSpreadAngleTangent * length(posInputs.positionWS);
    float realPixelFootPrint = parallelPixelFootPrint / abs(dot(normalData.normalWS, viewWS));
    float maxRadius = max(MAX_WORLD_SPACE_DISTANCE, realPixelFootPrint * PIXEL_RADIUS_TOLERANCE_THRESHOLD);

    // Is it too far from the current position?
    if (length(historyPositionWS - posInputs.positionWS) > maxRadius)
    {
        _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 0;
        return;
    }

    // Compute the world space normal (from previous frame)
    float4 historyNormal = LOAD_TEXTURE2D_X(_HistoryNormalBufferTexture, historyTapCoord);
    NormalData historyNormalData;
    DecodeFromNormalBuffer(historyNormal, uint2(0,0), historyNormalData);
    
    // If the current normal is too different from the previous one, discard the history.
    if (dot(normalData.normalWS, historyNormalData.normalWS) < MAX_NORMAL_DIFFERENCE)
    {
        _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 0;
        return;
    }
    
    // We sample the velocity buffer, if not null
    float sampleVelocity = LOAD_TEXTURE2D_X(_VelocityBuffer, centerCoord).r;
    if (sampleVelocity > MINIMAL_MOTION_DISTANCE)
    {
        _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 0;
        return;
    }

    // If none of the previous conditions have failed, the the history is valid
    _ValidationBufferRW[COORD_TEXTURE2D_X(centerCoord)] = 1;
}

// Validation buffer that tells us if the history should be ignored for a given pixel.
TEXTURE2D_X(_ValidationBuffer);
#ifdef HISTORY_IS_ARRAY
// This buffer holds the previously accumualted signal
TEXTURE2D_ARRAY(_HistoryBuffer);
// This buffers holds additional previously accumulated data
TEXTURE2D_ARRAY(_HistoryValidityBuffer);
#else
// This buffer holds the previously accumualted signal
TEXTURE2D_X(_HistoryBuffer);
#endif
// Noisy Input Buffer from the current rame
TEXTURE2D_X(_DenoiseInputTexture);
#if defined (HISTORY_IS_ARRAY) || defined (OUTPUT_IS_ARRAY)
    // In the case of an array signal, this tells us which slice of the array we should be fetching
    int _DenoisingHistorySlice;
    // This value tells us which channels hold the value
    float4 _DenoisingHistoryMask;
#endif
// Generic output buffer for our kernels
RW_TEXTURE2D_ARRAY(float4, _DenoiseOutputTextureRW);

[numthreads(TEMPORAL_FILTER_TILE_SIZE, TEMPORAL_FILTER_TILE_SIZE, 1)]
void TEMPORAL_ACCUMULATION(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * TEMPORAL_FILTER_TILE_SIZE + groupThreadId;

    // If the depth of this pixel is the depth of the background, we can end the process right away
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, centerCoord).r;
    if (depth == UNITY_RAW_FAR_CLIP_VALUE)
    {
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(0.0, 0.0, 0.0, 0);
        return;
    }

    // Fetch the position of the current pixel
    PositionInputs posInputs = GetPositionInput(centerCoord, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, GetWorldToViewMatrix());

    // Compute the velocity information for this pixel
    float2 velocity = float2(0.0, 0.0);
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, (float2)centerCoord), velocity);
    uint2 historyTapCoord = (uint2)((posInputs.positionNDC - velocity) * _ScreenSize.xy);

    // Fetch the current value, history value and current sample count
#if HISTORY_IS_ARRAY
    #if SINGLE_CHANNEL
        float color = LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).x;
        float history = dot(_DenoisingHistoryMask, LOAD_TEXTURE2D_ARRAY(_HistoryBuffer, historyTapCoord, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlice)));
        float sampleCount = dot(_DenoisingHistoryMask, LOAD_TEXTURE2D_ARRAY(_HistoryValidityBuffer, historyTapCoord, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlice)));
    #else
        float3 color = LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).xyz;
        // In case we are processing a color texture, it is always stored in the first three channels
        float3 history = LOAD_TEXTURE2D_ARRAY(_HistoryBuffer, historyTapCoord, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlice)).xyz;
        float sampleCount = LOAD_TEXTURE2D_ARRAY(_HistoryValidityBuffer, historyTapCoord, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlice)).x;
    #endif
#else
    #if SINGLE_CHANNEL
        float color = LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).x;
        float2 history = LOAD_TEXTURE2D_X(_HistoryBuffer, historyTapCoord).xy;
        float sampleCount = history.y;
    #else
        float3 color = LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).xyz;
        float4 history = LOAD_TEXTURE2D_X(_HistoryBuffer, historyTapCoord);
        float sampleCount = history.w;
    #endif
#endif
    
    // Get the velocity of the current sample
    float sampleVelocity = LOAD_TEXTURE2D_X(_VelocityBuffer, centerCoord).r;

    // Accumulation factor that tells us how much we need to keep the history data
    float accumulationFactor = 0.0;

    // If the history is invalid or the history was flagged as moving (sampleCount == 0.0)
    if (_ValidationBuffer[COORD_TEXTURE2D_X(centerCoord)].x < 1.0 || sampleCount == 0.0)
    {
        // We only take the current value
        accumulationFactor = 0.0;
        // And the sample count of history becomes 1 (or 0 if the previous sample was mooving)
        sampleCount = sampleVelocity > MINIMAL_MOTION_DISTANCE ? 0.0 : 1.0;
    }
    else
    {
        // Otherwise we compute the accumulation factor
        accumulationFactor = sampleCount > 8.0 ? 1.0 : (sampleCount / (sampleCount + 1.0));
        // Update the sample count
        sampleCount = min(sampleCount + 1.0, 8.0);
    }

    // Store our accumulated value
    #if SINGLE_CHANNEL
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(color * (1.0 - accumulationFactor) + history.x * accumulationFactor, sampleCount, 0.0, 1.0);
    #else
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(color * (1.0 - accumulationFactor) + history.xyz * accumulationFactor, sampleCount);
    #endif
}

#if defined(OUTPUT_IS_ARRAY) && !defined(NO_VALIDITY)
    // This is an additional history texture that holds the validity of the currently accumulated signal
    RW_TEXTURE2D_ARRAY(float4, _ValidityOutputTextureRW);
#endif

[numthreads(TEMPORAL_FILTER_TILE_SIZE, TEMPORAL_FILTER_TILE_SIZE, 1)]
void COPY_HISTORY(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    if (any(dispatchThreadId.xy > uint2(_ScreenSize.xy)))
        return;  // Out of bounds, discard

#if OUTPUT_IS_ARRAY
        // Define which pixel we shall be reading from, writing to.
        uint3 targetPixel = uint3(dispatchThreadId.xy, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlice));

        // In the case the output being an array, we only need to override the channels that we are currently processing
        float4 previousHistoryValues = _DenoiseOutputTextureRW[targetPixel];
    #if !defined(NO_VALIDITY)
        float4 previousValidityValues = _ValidityOutputTextureRW[targetPixel];
    #endif

    #if SINGLE_CHANNEL
        _DenoiseOutputTextureRW[targetPixel] = (1.0 - _DenoisingHistoryMask) * previousHistoryValues 
                                              + _DenoisingHistoryMask * LOAD_TEXTURE2D_X(_DenoiseInputTexture, dispatchThreadId.xy).x;
        #if !defined(NO_VALIDITY)
        _ValidityOutputTextureRW[targetPixel] = (1.0 - _DenoisingHistoryMask) * previousValidityValues 
                                              + _DenoisingHistoryMask * LOAD_TEXTURE2D_X(_DenoiseInputTexture, dispatchThreadId.xy).y;
        #endif
    #else
        // If this is a color data, it means we need to override the first three channels
        _DenoiseOutputTextureRW[targetPixel] = float4(LOAD_TEXTURE2D_X(_DenoiseInputTexture, dispatchThreadId.xy).xyz
                                                                                , previousHistoryValues.w);
        #if !defined(NO_VALIDITY)
        _ValidityOutputTextureRW[targetPixel] = float4(LOAD_TEXTURE2D_X(_DenoiseInputTexture, dispatchThreadId.xy).www
                                                                                , previousValidityValues.w);
        #endif
    #endif
#else
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = LOAD_TEXTURE2D_X(_DenoiseInputTexture, dispatchThreadId.xy);
#endif
}

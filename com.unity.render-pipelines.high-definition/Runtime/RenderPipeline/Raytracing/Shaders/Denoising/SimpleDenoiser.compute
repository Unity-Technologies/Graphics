#pragma only_renderers d3d11

// Temporal Filtering kernels
#pragma kernel TemporalAccumulationSingle       TEMPORAL_ACCUMULATION_SINGLE=TemporalAccumulationSingle          SINGLE_CHANNEL
#pragma kernel TemporalAccumulationSingleArray  TEMPORAL_ACCUMULATION_SINGLE=TemporalAccumulationSingleArray     SINGLE_CHANNEL     HISTORY_IS_ARRAY

#pragma kernel TemporalAccumulationColor    TEMPORAL_ACCUMULATION_COLOR=TemporalAccumulationColor      HISTORY_IS_ARRAY

#pragma kernel CopyHistorySingle            COPY_HISTORY=CopyHistorySingle SINGLE_CHANNEL
#pragma kernel CopyHistorySingleArray       COPY_HISTORY=CopyHistorySingleArray HISTORY_IS_ARRAY SINGLE_CHANNEL

#pragma kernel CopyHistoryColor             COPY_HISTORY=CopyHistoryColor

#pragma kernel BilateralFilterHSingle       BILATERAL_FILTER=BilateralFilterHSingle     SINGLE_CHANNEL
#pragma kernel BilateralFilterVSingle       BILATERAL_FILTER=BilateralFilterVSingle     FINAL_PASS SINGLE_CHANNEL

#pragma kernel BilateralFilterHColor        BILATERAL_FILTER=BilateralFilterHColor
#pragma kernel BilateralFilterVColor        BILATERAL_FILTER=BilateralFilterVColor     FINAL_PASS

#pragma only_renderers d3d11

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/TemporalAntialiasing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Denoising/BilateralFilter.hlsl"

// Tile size of this compute
#define SPATIO_TEMPORAL_TILE_SIZE 8

TEXTURE2D_X(_DenoiseInputTexture);
int _DenoiserFilterRadius;

#ifdef HISTORY_IS_ARRAY
int _DenoisingHistorySlot;
Texture2DArray<float4> _HistoryBuffer;
#else
TEXTURE2D_X(_HistoryBuffer);
#endif

#if SINGLE_CHANNEL
    #ifdef HISTORY_IS_ARRAY
    RWTexture2DArray<float> _DenoiseOutputTextureRW;
    #else
    RW_TEXTURE2D_X(float, _DenoiseOutputTextureRW);
    #endif
#else
    RW_TEXTURE2D_X(float4, _DenoiseOutputTextureRW);
#endif

#if SINGLE_CHANNEL
[numthreads(SPATIO_TEMPORAL_TILE_SIZE, SPATIO_TEMPORAL_TILE_SIZE, 1)]
void TEMPORAL_ACCUMULATION_SINGLE(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * SPATIO_TEMPORAL_TILE_SIZE + groupThreadId;

    float depth = LOAD_TEXTURE2D_X(_DepthTexture, centerCoord).r;
    PositionInputs posInputs = GetPositionInput(centerCoord, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, GetWorldToViewMatrix());

    float2 closest = GetClosestFragmentCompute(posInputs.positionSS);

    float2 velocity;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, closest), velocity);
    float velocityLength = length(velocity);

    float2 uv = posInputs.positionNDC;

    float color = Fetch4(_DenoiseInputTexture, uv, 0.0, _RTHandleScale.xy).x;
    #ifdef HISTORY_IS_ARRAY
    float history = Fetch4Array(_HistoryBuffer, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlot), posInputs.positionNDC - velocity, 0.0, _RTHandleScaleHistory.xy).x;
    #else
    float history = Fetch4(_HistoryBuffer, posInputs.positionNDC - velocity, 0.0, _RTHandleScaleHistory.xy).x;
    #endif

    float topLeft = Fetch4(_DenoiseInputTexture, uv, -RADIUS, _RTHandleScale.xy).x;
    float bottomRight = Fetch4(_DenoiseInputTexture, uv, RADIUS, _RTHandleScale.xy).x;

    float corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    color = clamp(color, 0.0, CLAMP_MAX);

    float average = FastTonemapPerChannel((corners + color) / 7.0);

    topLeft = FastTonemapPerChannel(topLeft);
    bottomRight = FastTonemapPerChannel(bottomRight);
    color = FastTonemapPerChannel(color);

    float colorLuma = color;
    float averageLuma = average;
    float nudge = lerp(4.0, 0.25, saturate(velocityLength * 100.0)) * abs(averageLuma - colorLuma);

    float minimum = min(bottomRight, topLeft) - nudge;
    float maximum = max(topLeft, bottomRight) + nudge;

    history = FastTonemapPerChannel(history);

    // Clip history samples
    history = clamp(history, minimum, maximum);

    // Blend color & history
    // Feedback weight from unbiased luminance diff (Timothy Lottes)
    float historyLuma = history;
    float diff = abs(colorLuma - historyLuma) / Max3(colorLuma, historyLuma, 0.2);
    float weight = 1.0 - diff;
    const float feedbackMin = 0.96;
    const float feedbackMax = 0.91;
    float feedback = lerp(feedbackMin, feedbackMax, weight * weight);

    color = FastTonemapPerChannelInvert(lerp(color, history, feedback));
    color = clamp(color, 0.0, CLAMP_MAX);

#ifdef HISTORY_IS_ARRAY
    _DenoiseOutputTextureRW[uint3(centerCoord, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlot))] = color;
#else
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = color;
#endif
}

#else

[numthreads(SPATIO_TEMPORAL_TILE_SIZE, SPATIO_TEMPORAL_TILE_SIZE, 1)]
void TEMPORAL_ACCUMULATION_COLOR(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * SPATIO_TEMPORAL_TILE_SIZE + groupThreadId;

    float depth = LOAD_TEXTURE2D_X(_DepthTexture, centerCoord).r;
    PositionInputs posInputs = GetPositionInput(centerCoord, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, GetWorldToViewMatrix());

    float2 closest = GetClosestFragmentCompute(posInputs.positionSS);

    float2 velocity;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, closest), velocity);
    float velocityLength = length(velocity);

    float2 uv = posInputs.positionNDC;

    float3 color = Fetch(_DenoiseInputTexture, uv, 0.0, _RTHandleScale.xy);
    float3 history = Fetch(_HistoryBuffer, posInputs.positionNDC - velocity, 0.0, _RTHandleScaleHistory.xy);
    float3 topLeft = Fetch(_DenoiseInputTexture, uv, -RADIUS, _RTHandleScale.xy);
    float3 bottomRight = Fetch(_DenoiseInputTexture, uv, RADIUS, _RTHandleScale.xy);

    float3 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    color = clamp(color, 0.0, CLAMP_MAX);

    float3 average = FastTonemap((corners + color) / 7.0);

    topLeft = FastTonemap(topLeft);
    bottomRight = FastTonemap(bottomRight);
    color = FastTonemap(color);

    float colorLuma = Luminance(color);
    float averageLuma = Luminance(average);
    float nudge = lerp(4.0, 0.25, saturate(velocityLength * 100.0)) * abs(averageLuma - colorLuma);

    float3 minimum = min(bottomRight, topLeft) - nudge;
    float3 maximum = max(topLeft, bottomRight) + nudge;

    history = FastTonemap(history);

    // Clip history samples
    history = DirectClipToAABB(history, minimum, maximum);

    // Blend color & history
    // Feedback weight from unbiased luminance diff (Timothy Lottes)
    float historyLuma = Luminance(history);
    float diff = abs(colorLuma - historyLuma) / Max3(colorLuma, historyLuma, 0.2);
    float weight = 1.0 - diff;
    const float feedbackMin = 0.96;
    const float feedbackMax = 0.91;
    float feedback = lerp(feedbackMin, feedbackMax, weight * weight);


    color = FastTonemapInvert(lerp(color, history, feedback));
    color = clamp(color, 0.0, CLAMP_MAX);

    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(color, LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).w);
}
#endif

[numthreads(SPATIO_TEMPORAL_TILE_SIZE, SPATIO_TEMPORAL_TILE_SIZE, 1)]
void COPY_HISTORY(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    if (any(dispatchThreadId.xy > uint2(_ScreenSize.xy)))
        return;  // Out of bounds, discard

    #ifdef HISTORY_IS_ARRAY
        #ifdef SINGLE_CHANNEL
        _DenoiseOutputTextureRW[uint3(dispatchThreadId.xy, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlot))] = _DenoiseInputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)].x;
        #else
        _DenoiseOutputTextureRW[uint3(dispatchThreadId.xy, INDEX_TEXTURE2D_ARRAY_X(_DenoisingHistorySlot))] = _DenoiseInputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)];
        #endif
    #else
        #ifdef SINGLE_CHANNEL
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = _DenoiseInputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)].x;
        #else
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = _DenoiseInputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)];
        #endif
    #endif
}

// Separated bilateral filter (two passes, each with 2*Radius taps)
[numthreads(SPATIO_TEMPORAL_TILE_SIZE, SPATIO_TEMPORAL_TILE_SIZE, 1)]
void BILATERAL_FILTER(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * SPATIO_TEMPORAL_TILE_SIZE + groupThreadId;

    #if SINGLE_CHANNEL
    float colorSum = 0.0;
    #else
    float3 colorSum = float3(0.0, 0.0, 0.0);
    #endif

    float wSum = 0.0;

    #if FINAL_PASS
    const uint2 passIncr = uint2(1, 0);
    #else
    const uint2 passIncr = uint2(0, 1);
    #endif

    const float sigma = 0.5 * _DenoiserFilterRadius;
    const int effectiveRadius = min(sigma * 2.0, _DenoiserFilterRadius);

    const BilateralData center = TapBilateralData(centerCoord);

    uint2 tapCoord = centerCoord - effectiveRadius * passIncr;
    for (int r = -effectiveRadius; r <= effectiveRadius; ++r, tapCoord += passIncr)
    {
        // We should not tap outside of the screen (given that its a unit, if we go below zero we wrap around)
        if ((int)tapCoord.x > _ScreenSize.x || (int)tapCoord.y > _ScreenSize.y)
            continue;

        // Compute the weight (skip computation for the center)
        const float w = r ? gaussian(r, sigma) * ComputeBilateralWeight(center, TapBilateralData(tapCoord)) : 1.0;

        #if SINGLE_CHANNEL
        colorSum += LOAD_TEXTURE2D_X(_DenoiseInputTexture, tapCoord).x * w;
        #else
        colorSum += LOAD_TEXTURE2D_X(_DenoiseInputTexture, tapCoord).xyz * w;
        #endif
        wSum += w;
    }

    // Store the intermediate result
    #if SINGLE_CHANNEL
    float finalColor = colorSum / wSum;
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = finalColor;
    #else
    float3 finalColor = colorSum / wSum;
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(finalColor, 1.0);
    #endif
}

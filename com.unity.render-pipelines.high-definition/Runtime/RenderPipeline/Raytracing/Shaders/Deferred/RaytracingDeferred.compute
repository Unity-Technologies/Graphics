#pragma kernel RaytracingDeferred RAYTRACING_DEFERRED=RaytracingDeferred
#pragma kernel RaytracingDeferredHalf RAYTRACING_DEFERRED=RaytracingDeferredHalf HALF_RESOLUTION
#pragma kernel RaytracingDiffuseDeferred

// Given that the algorithm requires BSDF evaluation, we need to define this macro
#define HAS_LIGHTLOOP

// Given that this pass does not use the shadow algorithm multi-compile, we need to define SHADOW_LOW to quite the shadow algorithm error
#define SHADOW_LOW

#pragma only_renderers d3d11

// Include and define the shader pass
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT

// HDRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRayTracing.hlsl"

// Ray tracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/RayTracing/Shaders/Common/AtmosphericScatteringRayTracing.hlsl"

#define RAYTRACING_DEFERRED_TILE_SIZE 8

TEXTURE2D_X(_DepthTexture);
TEXTURE2D_X(_RaytracingDirectionBuffer);
TEXTURE2D_X(_RaytracingDistanceBuffer);

RW_TEXTURE2D_X(float4, _RaytracingLitBufferRW);

[numthreads(RAYTRACING_DEFERRED_TILE_SIZE, RAYTRACING_DEFERRED_TILE_SIZE, 1)]
void RAYTRACING_DEFERRED(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 currentCoord = groupId * RAYTRACING_DEFERRED_TILE_SIZE + groupThreadId;

    #ifdef HALF_RESOLUTION
    currentCoord *=2;
    #endif

    // Initialize the output buffer
    _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)] = float4(0.0, 0.0, 0.0, 0.0);

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE || LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentCoord).w < 0.0f)
        return;

    if (LOAD_TEXTURE2D_X(_RaytracingDistanceBuffer, currentCoord).x < 0.0)
    {
        float3 newSampleColor = clamp(LOAD_TEXTURE2D_X(_GBufferTexture3, currentCoord).rgb * GetCurrentExposureMultiplier(), 0.0, _RaytracingIntensityClamp) 
                                * (_RaytracingPreExposition ? 1.0 : GetInverseCurrentExposureMultiplier() );
        _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)] = float4(newSampleColor, 0.0);
        return;
    }

    // First let's compute the position of the pixel from which the ray has been shot
    PositionInputs sourcePosInput = GetPositionInput(currentCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 positionWS = GetAbsolutePositionWS(sourcePosInput.positionWS);

    // Then compute the pos input of the intersection vertice
    float3 rayDirection = LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentCoord).xyz;
    float rayDistance = LOAD_TEXTURE2D_X(_RaytracingDistanceBuffer, currentCoord).x;
    float3 intersectionPositionWS = positionWS + rayDirection * rayDistance;

    PositionInputs posInput;
    posInput.positionWS = GetCameraRelativePositionWS(intersectionPositionWS);
    posInput.positionSS = currentCoord;

    float3 V = -rayDirection;

    // Read the bsdf data and builtin data from the gbuffer
    BSDFData bsdfData;
    ZERO_INITIALIZE(BSDFData, bsdfData);
    BuiltinData builtinData;
    ZERO_INITIALIZE(BuiltinData, builtinData);
    uint  featureFlags = UINT_MAX;
    DecodeFromGBuffer(currentCoord, featureFlags, bsdfData, builtinData);

    PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

    // Evaluate the complete lighting
    float3 diffuseLighting;
    float3 specularLighting;
    LightLoop(V, posInput, preLightData, bsdfData, builtinData, 0.0, 0.0, float3(0.0, 0.0, 0.0),  float3(0.0, 0.0, 0.0), diffuseLighting, specularLighting);
    float3 finalColor = (diffuseLighting + specularLighting);
    // Apply fog attenuation
    ApplyFogAttenuation(positionWS, rayDirection, rayDistance, finalColor, true);
    // Expose, clamp and inverse exposure
    finalColor = clamp(finalColor * GetCurrentExposureMultiplier(), 0.0, _RaytracingIntensityClamp) * (_RaytracingPreExposition ? 1.0 : GetInverseCurrentExposureMultiplier());
    _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)] = float4(finalColor, 0.0);
}

// Input textures for the diffuse deferred lightloop that we will be executing
    // Position at the exit point
TEXTURE2D_X(_PositionTextureRW);
    // Normal value at the exit point
TEXTURE2D_X(_NormalTextureRW);
    // Direction value at the exit point
TEXTURE2D_X(_DirectionTextureRW);
    // Diffuse lighting at the exit point
TEXTURE2D_X(_DiffuseLightingTextureRW);
    // Through put of the walk that was calculated
TEXTURE2D_X(_ThroughputTextureRW);

[numthreads(RAYTRACING_DEFERRED_TILE_SIZE, RAYTRACING_DEFERRED_TILE_SIZE, 1)]
void RaytracingDiffuseDeferred(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 currentCoord = groupId * RAYTRACING_DEFERRED_TILE_SIZE + groupThreadId;

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Read the throughput
    float3 throughput = LOAD_TEXTURE2D_X(_ThroughputTextureRW, currentCoord).xyz;

    // If the path is black, no need to light this
    if (length(throughput) == 0.0)
    {
        // Simply propagate the previous value
        float3 previousValue = _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)].xyz;
        _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)] = float4(previousValue, 0.0);
        return;
    }

    // Read the normal
    float3 normalWS = LOAD_TEXTURE2D_X(_NormalTextureRW, currentCoord).xyz;

    // Create our diffuse white BSDF Data
    BSDFData bsdfData;
    ZERO_INITIALIZE(BSDFData, bsdfData);
    bsdfData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
    bsdfData.diffuseColor = float3(1.0, 1.0, 1.0);
    bsdfData.fresnel0 = DEFAULT_SPECULAR_VALUE;
    bsdfData.ambientOcclusion = 1.0;
    bsdfData.perceptualRoughness = 1.0;
    bsdfData.specularOcclusion = 1.0;
    bsdfData.normalWS = normalWS;
    bsdfData.geomNormalWS = normalWS;
    ConvertAnisotropyToRoughness(bsdfData.perceptualRoughness, bsdfData.anisotropy, bsdfData.roughnessT, bsdfData.roughnessB);

    // Create the built-in data
    BuiltinData builtinData;
    ZERO_INITIALIZE(BuiltinData, builtinData);
    builtinData.bakeDiffuseLighting = LOAD_TEXTURE2D_X(_DiffuseLightingTextureRW, currentCoord).xyz;  // This also contain emissive (and * AO if no lightlayers)
    builtinData.renderingLayers = DEFAULT_LIGHT_LAYERS;
    builtinData.shadowMask0 = 1.0;
    builtinData.shadowMask1 = 1.0;
    builtinData.shadowMask2 = 1.0;
    builtinData.shadowMask3 = 1.0;

    // We are evaluating a diffuse signal so view does not matter, let's pick the one that is guaranteed to be right (for some reason the LTC code fails if V == N)
    float3 viewWS = LOAD_TEXTURE2D_X(_DirectionTextureRW, currentCoord).xyz;

    // Create the pos input
    PositionInputs posInput;
    posInput.positionWS = GetCameraRelativePositionWS(LOAD_TEXTURE2D_X(_PositionTextureRW, currentCoord).xyz);
    posInput.positionSS = currentCoord;

    // Compute the prelight data
    PreLightData preLightData = GetPreLightData(viewWS, posInput, bsdfData);
    
    // Evaluate lighting
    float3 diffuseLighting;
    float3 specularLighting;
    LightLoop(viewWS, posInput, preLightData, bsdfData, builtinData, 0.0, 0.0, float3(0.0, 0.0, 0.0),  float3(0.0, 0.0, 0.0), diffuseLighting, specularLighting);

    // Read the previous value and combine with the current lighting
    float3 previousValue = _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)].xyz;
    _RaytracingLitBufferRW[COORD_TEXTURE2D_X(currentCoord)] = float4(previousValue + throughput * diffuseLighting, 0.0);
}

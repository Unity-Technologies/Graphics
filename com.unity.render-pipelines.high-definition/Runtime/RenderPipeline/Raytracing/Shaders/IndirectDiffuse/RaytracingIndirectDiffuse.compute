#pragma kernel RaytracingIndirectDiffuseHalfRes
#pragma kernel RaytracingIndirectDiffuseFullRes
#pragma kernel IndirectDiffuseIntegrationUpscaleHalfRes INDIRECT_DIFFUSE_INTEGRATION_UPSCALE=IndirectDiffuseIntegrationUpscaleHalfRes HALF_RESOLUTION
#pragma kernel IndirectDiffuseIntegrationUpscaleFullRes INDIRECT_DIFFUSE_INTEGRATION_UPSCALE=IndirectDiffuseIntegrationUpscaleFullRes
#pragma kernel AdjustIndirectDiffuseWeight

#pragma only_renderers d3d11

// Include and define the shader pass
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS SHADERPASS_RAYTRACING

// HDRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"

// Raytracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"

// Tile size of this compute
#define RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE 8

TEXTURE2D_X(_DepthTexture);
RW_TEXTURE2D_X(float4, _RaytracingDirectionBuffer);

// Flag value that defines if a given pixel recieves reflections or not
TEXTURE2D_X_UINT2(_StencilTexture);
int _SsrStencilBit;

[numthreads(RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, 1)]
void RaytracingIndirectDiffuseHalfRes(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 halfResCoord = groupId * RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE + groupThreadId;

    // Pick which subpixel we will be launching our effects from
    float subPixelSample = GetBNDSequenceSample(halfResCoord, _RaytracingFrameIndex, 3);
    int subPixel =  clamp((int)(subPixelSample * 4.0), 0, 3);
    uint2 shift = HalfResIndexToCoordinateShift[subPixel];

    // Pixel where we will store the result of the raytracing
    uint2 outputCoord = halfResCoord * 2;

    // Pixel coordinate in full res of the pixel that we will be using for our computation
    uint2 sourceCoord = outputCoord + shift;

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, sourceCoord).r;

    // This point is part of the background, we don't really care
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Convert this to a world space position
    PositionInputs posInput = GetPositionInput(sourceCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    // Compute the view in world space
    const float3 viewWS = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(sourceCoord, normalData);

    // Generate the new sample (follwing values of the sequence)
    float2 newSample;
    newSample.x = GetBNDSequenceSample(halfResCoord, _RaytracingFrameIndex, 0);
    newSample.y = GetBNDSequenceSample(halfResCoord, _RaytracingFrameIndex, 1);

    // Importance sample with a cosine lobe
    float3 sampleDir = SampleHemisphereCosine(newSample.x, newSample.y, normalData.normalWS);

    // PDF is the cosine
    float samplePDF = dot(sampleDir, normalData.normalWS);

    // In the second texture, we store the sampled direction and the invPDF of the sample
    _RaytracingDirectionBuffer[COORD_TEXTURE2D_X(outputCoord)] = float4(sampleDir, 1.0 / samplePDF);
}


[numthreads(RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, 1)]
void RaytracingIndirectDiffuseFullRes(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Compute the pixel position to process
    uint2 currentCoord = groupId * RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE + groupThreadId;

    // Clear the output color texture
    _RaytracingDirectionBuffer[COORD_TEXTURE2D_X(currentCoord)] = float4(0.0, 0.0, 0.0, -1.0f);

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;

    // This point is part of the background, we don't really care
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Convert this to a world space position
    PositionInputs posInput = GetPositionInput(currentCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    // Compute the view in world space
    const float3 viewWS = GetWorldSpaceNormalizeViewDir(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentCoord, normalData);

    // Generate the new sample (follwing values of the sequence)
    float2 sample;
    sample.x = GetBNDSequenceSample(currentCoord, _RaytracingFrameIndex, 0);
    sample.y = GetBNDSequenceSample(currentCoord, _RaytracingFrameIndex, 1);

    // Importance sample with a cosine lobe
    float3 sampleDir = SampleHemisphereCosine(sample.x, sample.y, normalData.normalWS);

    // PDF is the cosine
    float samplePDF = dot(sampleDir, normalData.normalWS);

    // Write the output ray data
    _RaytracingDirectionBuffer[COORD_TEXTURE2D_X(currentCoord)] = float4(sampleDir, 1.0 / samplePDF);
}

// Input textures for the spatial filtering
Texture2DArray<float> _BlueNoiseTexture;

// Output Textures for the spatial filtering
RW_TEXTURE2D_X(float4, _UpscaledIndirectDiffuseTextureRW);
int _SpatialFilterRadius;

[numthreads(RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, 1)]
void INDIRECT_DIFFUSE_INTEGRATION_UPSCALE(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    #ifdef HALF_RESOLUTION
    // Compute the half res coordinate that we shall be using for our effect
    uint2 targetCoord = dispatchThreadId.xy;
    uint2 sourceCoord = targetCoord / 2;
    #else
    uint2 targetCoord = dispatchThreadId.xy;
    uint2 sourceCoord = targetCoord;
    #endif

    // Compute the index of the noise texture to use
    int noiseIndex = (int)(clamp((int)(_ScramblingTexture[sourceCoord].y * 32.0f), 0, 31));

    // Compute the subpixel index that matches this full screen pixel.
    int localIndex = (targetCoord.x & 1) + (targetCoord.y & 1) * 2;

    // Fetch the depth
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, targetCoord).x;

    NormalData normalData;
    DecodeFromNormalBuffer(targetCoord, normalData);

    if (depth == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Fetch the normal WS
    float3 normalWS = normalData.normalWS;

    // Compute the world space position
    PositionInputs posInput = GetPositionInput(targetCoord, _ScreenSize.zw, depth, UNITY_MATRIX_I_VP, UNITY_MATRIX_V);
    float3 positionWS = posInput.positionWS;

    // Initialize the output pixels
    float4 resultSum = float4(0.0 ,0.0, 0.0, 0.0);
    uint sampleCount = 0;

    float radiusSq = _SpatialFilterRadius * _SpatialFilterRadius;

    for(int y = -_SpatialFilterRadius; y < _SpatialFilterRadius; ++y)
    {
        for(int x = -_SpatialFilterRadius; x < _SpatialFilterRadius; ++x)
        {
            float radiusDistanceSq = (y*y + x*x);
            if(radiusDistanceSq > radiusSq) continue;

            // Compute the noise position that shall be used
            int2 relativeHRShift = uint2(8 + x, 8 + y);

            // Full res sample position
            #ifdef HALF_RESOLUTION
            int2 sampleCoord = (sourceCoord + uint2(x,y)) * 2;
            #else
            int2 sampleCoord = (sourceCoord + uint2(x,y));
            #endif

            // If this pixel is outside of the screen, we cannot use it
            if(sampleCoord.x < 0 || sampleCoord.x > _ScreenSize.x
                || sampleCoord.y < 0 || sampleCoord.y > _ScreenSize.y)
            continue;

            // Fetch the target color
            float4 sampleColor = LOAD_TEXTURE2D_X(_IndirectDiffuseTexture, sampleCoord);

            // Compute the position of the actual source pixel
            uint subPixel =  clamp(floor(sampleColor.w * 4.0f), 0, 3);
            uint2 shift = HalfResIndexToCoordinateShift[subPixel];
            #ifdef HALF_RESOLUTION
            uint2 actualSourceCoord = sampleCoord + shift;
            #else
            uint2 actualSourceCoord = sampleCoord;
            #endif

            // Fetch the Depth
            float sampleDepth = LOAD_TEXTURE2D_X(_DepthTexture, actualSourceCoord).x;

            // If this the background, it should not be used as a valid sample
            if(sampleDepth == UNITY_RAW_FAR_CLIP_VALUE) continue;

            // Compute the target pixel that it will impact
            float sample = _BlueNoiseTexture[int3(relativeHRShift, noiseIndex)].x;
            int index = clamp(floor(sample * 4.0f), 0, 3);

            if (index != localIndex) continue;

            // Contirbute to all the output values
            resultSum += float4(sampleColor.xyz, 1.0);
            sampleCount += 1;
        }
    }

    // Compute the full res coordinate
    if(depth == 0.0f || sampleCount == 0 || resultSum.w == 0.0)
    {
        _UpscaledIndirectDiffuseTextureRW[COORD_TEXTURE2D_X(targetCoord)] = float4(0.0f, 0.0f, 0.0f, 0.0f);
    }
    else
    {
        _UpscaledIndirectDiffuseTextureRW[COORD_TEXTURE2D_X(targetCoord)] = float4(resultSum.xyz / resultSum.w, 1.0);
    }
}

RW_TEXTURE2D_X(float4, _IndirectDiffuseTextureRW);

[numthreads(RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, 1)]
void AdjustIndirectDiffuseWeight(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);
    uint2 sourceCoord = dispatchThreadId.xy;

    // Fetch the depth
    float depth = LOAD_TEXTURE2D_X(_DepthTexture, sourceCoord).x;
    // If this is a background pixel, there is nothing to do
    if (depth == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    float4 previousGIValue = _IndirectDiffuseTextureRW[COORD_TEXTURE2D_X(sourceCoord)];

    // Nullify the weight if the surface is not supposed to recieve SSGI
    uint stencilValue = GetStencilValue(LOAD_TEXTURE2D_X(_StencilTexture, sourceCoord));
    if ((stencilValue & _SsrStencilBit) == 0)
        previousGIValue.w = 0.0f;
    else
        previousGIValue.w = 1.0f;

    _IndirectDiffuseTextureRW[COORD_TEXTURE2D_X(sourceCoord)] = previousGIValue;
}

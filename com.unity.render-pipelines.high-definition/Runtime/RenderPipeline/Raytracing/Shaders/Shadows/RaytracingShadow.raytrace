// We need only need one bounce given that we want to see the if there is anything that occludes the area light
#pragma max_recursion_depth 1

// Macro that defines if we are raytracing from the light source to the object in backface culling or the opposite in frontface culling
#define LIGHT_TO_SURFACE

// Given that the algorithm requires BSDF evaluation, we need to define this macro
#define HAS_LIGHTLOOP

// Given that the algorithm requires BSDF evaluation, we need to define this macro
#define SKIP_RASTERIZED_SHADOWS

// Given that this pass does not use the shadow algorithm multi-compile, we need to define SHADOW_LOW to quite the shadow algorithm error
#define SHADOW_LOW

// Required for contact shadows
#define USE_FPTL_LIGHTLIST

// We are using DX12 here
#define SHADER_TARGET 50
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS SHADERPASS_RAYTRACING
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Packing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariablesFunctions.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Shadow/ContactShadows.hlsl"

// Raytracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Shadows/SphericalQuad.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Shadows/RaytracingMIS.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/RayCountManager.cs.hlsl"

// Light Data
uint     _RaytracingTargetAreaLight;

// The target acceleration structure that we will evaluate the reflexion in
TEXTURE2D_X(_DepthTexture);

// Output structure of the shadows raytrace shader
RW_TEXTURE2D_X(float2, _RaytracedAreaShadowSample);
RW_TEXTURE2D_X(float2, _RaytracedAreaShadowIntegration);
RW_TEXTURE2D_X(float2, _AnalyticProbBuffer);

[shader("miss")]
void MissShaderShadows(inout RayIntersection rayIntersection : SV_RayPayload)
{
    rayIntersection.color = float3(1.0, 1.0, 1.0);
}

[shader("miss")]
void MissShaderShadowsColor(inout RayIntersection rayIntersection : SV_RayPayload)
{
    // Does nothing intentionally
}

[shader("raygeneration")]
void RayGenAreaShadows()
{
    // Grab the dimensions of the current raytrace shader
    uint3 LaunchIndex = DispatchRaysIndex();
    uint3 LaunchDim = DispatchRaysDimensions();

    UNITY_XR_ASSIGN_VIEW_INDEX(LaunchIndex.z);

    // Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Initialize the output textures
    _RaytracedAreaShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(0.0, 0.0);
    _AnalyticProbBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(-1.0, +1.0);

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Compute the position input structure
    PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentPixelCoord, normalData);

    // Convert this to a world space position
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Compute the view vector on the surface
    float3 viewWS = normalize(_WorldSpaceCameraPos - positionWS);

    // Fetch the data of the area light
    LightData lightData = _LightDatas[_RaytracingTargetAreaLight];

    // Structure that holds all the input data for the MIS
    MISSamplingInput misInput;
    ZERO_INITIALIZE(MISSamplingInput, misInput);
    misInput.roughness = PerceptualRoughnessToRoughness(normalData.perceptualRoughness);
    misInput.viewWS = viewWS;
    misInput.positionWS = positionWS;
    misInput.rectDimension = lightData.size.xy;
    misInput.rectWSPos = GetAbsolutePositionWS(lightData.positionRWS);

    // Setup and check the spherical rectangle
    SphQuad squad;
    if (!InitSphericalQuad(lightData, positionWS, normalData.normalWS, squad))
    {
        return;
    }
    
    // Compute the local frame that matches the normal
    misInput.localToWorld = GetLocalFrame(normalData.normalWS);

    // Let's now decode the BSDF data from the  gbuffer
    BSDFData bsdfData;
    ZERO_INITIALIZE(BSDFData, bsdfData);
    BuiltinData builtinData;
    ZERO_INITIALIZE(BuiltinData, builtinData);
    uint  featureFlags = MATERIALFEATUREFLAGS_LIT_STANDARD;
    DecodeFromGBuffer(posInput.positionSS, featureFlags, bsdfData, builtinData);

    // Beyond a certain value of smoothness, we clamp due to the invalidity of the ratio BRDF / MIS.
    // TODO: investigate this and find a way to by pass it
    bsdfData.perceptualRoughness = ClampPerceptualRoughnessForRaytracing(bsdfData.perceptualRoughness);
    bsdfData.roughnessT = ClampRoughnessForRaytracing(bsdfData.roughnessT);
    bsdfData.roughnessB = ClampRoughnessForRaytracing(bsdfData.roughnessB);

    // Compute the prelight data
    PreLightData preLightData = GetPreLightData(viewWS, posInput, bsdfData);

    // Compute the direct lighting of the light (used for MIS)
    LightLoopContext context;
    // Given that the approximation used for LTC is completely different from what we would get from a real integration, we only rely on the not textured intensity.
    // To acheive that, we set cookie index to -1 so that the evaluatebsdf_rect function to not use any cookie. We also keep track of that cookie value to restore it after the evaluation.
    int cookieIndex = lightData.cookieIndex;
    int cookieMode = lightData.cookieMode;
    lightData.cookieIndex = -1;
    lightData.cookieIndex = COOKIEMODE_NONE;
    DirectLighting lighting = EvaluateBSDF_Rect(context, viewWS, posInput, preLightData, lightData, bsdfData, builtinData);
    lighting.diffuse = lighting.diffuse * bsdfData.diffuseColor;
    lightData.cookieIndex = cookieIndex;
    lightData.cookieIndex = cookieMode;

    // Compute the non-occluded analytic luminance value
    float U = Luminance(lighting.diffuse + lighting.specular);

    // NOTE: Due to a VGPR optimisation in we need to restore the previous value (position, dimmer, and other thing are overriden)
    lightData = _LightDatas[_RaytracingTargetAreaLight];

    // Here we need to evaluate the diffuseProbablity and the unshadowed lighting
    if(!EvaluateMISProbabilties(lighting, bsdfData.perceptualRoughness, misInput.brdfProb))
    {
        // We want this to be flagged as a proper shadow, and not a 0/0 case
        _RaytracedAreaShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(0.0, 0.0);
        _AnalyticProbBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(-1.0, -1.0);
        return;
    }

    // Initialize Sn and Un
    float3 Sn = 0.0;
    float3 Un = 0.0;

    // Structure that holds all the output data from the MIS
    MISSamplingOuput misOutput;
    ZERO_INITIALIZE(MISSamplingOuput, misOutput);

    bool validity = false;
    for (int sampleIdx = 0; sampleIdx < _RaytracingNumSamples; ++sampleIdx)
    {
        // Compute the current sample index
        int globalSampleIndex = _RaytracingFrameIndex * _RaytracingNumSamples + sampleIdx;

        // Generate the new sample (follwing values of the sequence)
        misInput.noiseValue.x = GetBNDSequenceSample(currentPixelCoord, globalSampleIndex, 0);
        misInput.noiseValue.y = GetBNDSequenceSample(currentPixelCoord, globalSampleIndex, 1);
        
        // Pick the sampling technique
        EvaluateMISTechnique(misInput);

        // Generate the right MIS Sample
        validity = GenerateMISSample(misInput, squad, viewWS,  misOutput);

        // If we could not sample , or the sample is not in the hemisphere or the sample is on the backface of the light
        if (!validity || dot(misOutput.dir, normalData.normalWS) <= 0.0 || dot(misOutput.dir, lightData.forward) >= 0.0)
        {
            continue;
        }

        // Make sure it is taken into account in the ray counters
        if (_RayCountEnabled > 0)
        {
            uint3 counterIdx = uint3(currentPixelCoord, INDEX_TEXTURE2D_ARRAY_X(RAYCOUNTVALUES_SHADOW_AREA_LIGHT));
            _RayCountTexture[counterIdx] = _RayCountTexture[counterIdx] + 1;
        }

        // Let's shift the origin and destination positions by a bias
        #ifdef LIGHT_TO_SURFACE
        // In order to match the behavior of the raster pipeline, shadow rays are cast from the light source and not the point (to mimic backface culling in shadowmaps)
        float3 rayOrigin = misOutput.pos + lightData.forward * _RaytracingRayBias;
        float3 rayDestination = positionWS + normalData.normalWS * _RaytracingRayBias;
        float3 rayDirection = normalize(rayDestination-rayOrigin);
        uint rayFlag = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;
        #else
        float3 rayOrigin = positionWS + normalData.normalWS * _RaytracingRayBias;
        float3 rayDestination = misOutput.pos + lightData.forward * _RaytracingRayBias;
        float3 rayDirection = normalize(rayDestination-rayOrigin);
        uint rayFlag = RAY_FLAG_CULL_FRONT_FACING_TRIANGLES;
        #endif

        // Create the ray descriptor for this pixel
        RayDesc rayDescriptor;
        rayDescriptor.Origin = rayOrigin;
        rayDescriptor.Direction = rayDirection;
        rayDescriptor.TMin = 0.0;
        rayDescriptor.TMax = length(rayDestination - rayOrigin);

        // Create and init the RayIntersection structure for this
        RayIntersection rayIntersection;
        rayIntersection.color = float3(0.0, 0.0, 0.0);
        rayIntersection.incidentDirection = rayDescriptor.Direction;

        // Evaluate the ray visibility term and PDF
        TraceRay(_RaytracingAccelerationStructure, rayFlag | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, RAYTRACINGRENDERERFLAG_CAST_SHADOW, 0, 1, 0, rayDescriptor, rayIntersection);

        // Evaluate the lighting
        CBSDF cbsdf = EvaluateBSDF(viewWS, misOutput.dir, preLightData, bsdfData);
        float3 diffuseLighting = cbsdf.diffR;
        float3 specularLighting = cbsdf.specR;

        // Combine the light color with the light cookie color (if any)
        float3 lightColor = lightData.color;
        if (lightData.cookieIndex >= 0)
        {
            float   cookieWidth = lightData.cookieScaleOffset.x * _CookieAtlasSize.x;
            float   cookieSizePOT = round(LOG2_E * log(cookieWidth));
            lightColor *= SampleCookie2D(misOutput.sampleUV, lightData.cookieScaleOffset, bsdfData.perceptualRoughness * cookieSizePOT);
        }

        diffuseLighting *= bsdfData.diffuseColor * lightData.diffuseDimmer * lightColor;
        specularLighting *= lightData.specularDimmer * lightColor;

        // Compute the MIS weight
        float misPDF = lerp(misOutput.lightPDF, misOutput.brdfPDF, misInput.brdfProb);
        float NdotL = saturate(dot(normalData.normalWS, misOutput.dir));
        float3 radiance = misPDF > 0.0 ? (diffuseLighting + specularLighting) * NdotL / misPDF : 0.0;

        // Accumulate
        Sn += radiance * rayIntersection.color;
        Un += radiance;
    }

    float SnL = Luminance(Sn) / _RaytracingNumSamples;
    float UnL = Luminance(Un) / _RaytracingNumSamples;

    // To avoid huge values on low PDFs (leading to potential precision issues),
    // we clip them proportionally to the unoccluded analytic value
    const float unoccludedThreshold = 10.0 * U;
    if (UnL > unoccludedThreshold)
    {
        SnL *= unoccludedThreshold / UnL;
        UnL = unoccludedThreshold;
    }

    // Pass on the values to the output buffer (Sn, Un) and U
    _RaytracedAreaShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(SnL, UnL);
    _AnalyticProbBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(U, misInput.brdfProb);
}

// Fallback default any hit shader for this raytrace shader
[shader("anyhit")]
void AnyHitMain(inout RayIntersection rayIntersection : SV_RayPayload, AttributeData attributeData : SV_IntersectionAttributes)
{
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    rayIntersection.t = RayTCurrent();
    AcceptHitAndEndSearch();
}

// Texture that holds the raytracing data
TEXTURE2D_X(_RaytracingDirectionBuffer);
TEXTURE2D_X(_RaytracingDistanceBuffer);

[shader("raygeneration")]
void RayGenAreaShadowSingle()
{
    // Grab the dimensions of the current raytrace shader
    uint3 LaunchIndex = DispatchRaysIndex();
    uint3 LaunchDim = DispatchRaysDimensions();

    UNITY_XR_ASSIGN_VIEW_INDEX(LaunchIndex.z);

    // Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Read the previous value of the buffer
    float2 previousValue = _RaytracedAreaShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)];
    float2 currentSample = _RaytracedAreaShadowSample[COORD_TEXTURE2D_X(currentPixelCoord)];

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;

    // If this is the background, or UnL is null or this pixel has been flagged as invalid, no 
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE || currentSample.y == 0.0 || _AnalyticProbBuffer[COORD_TEXTURE2D_X(currentPixelCoord)].y < 0.0)
    {
        _RaytracedAreaShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(previousValue.x, previousValue.y);
        return;
    }

    // Make sure it is taken into account in the ray counters
    if (_RayCountEnabled > 0)
    {
        uint3 counterIdx = uint3(currentPixelCoord, INDEX_TEXTURE2D_ARRAY_X(RAYCOUNTVALUES_SHADOW_AREA_LIGHT));
        _RayCountTexture[counterIdx] = _RayCountTexture[counterIdx] + 1;
    }

    // Fetch the data of the area light
    LightData lightData = _LightDatas[_RaytracingTargetAreaLight];

    // Compute the position input structure
    PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentPixelCoord, normalData);

    // Read the ray distance
    float3 rayDirection = LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentPixelCoord).xyz;
    float rayDistance = LOAD_TEXTURE2D_X(_RaytracingDistanceBuffer, currentPixelCoord).x;

    float3 rayOrigin = positionWS + rayDirection * rayDistance - lightData.forward * _RaytracingRayBias;
    float3 rayDestination = positionWS + normalData.normalWS * _RaytracingRayBias;
    rayDistance = length(rayDestination - rayOrigin);
    rayDirection = (rayDestination - rayOrigin) / rayDistance;

    // Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin = rayOrigin;
    rayDescriptor.Direction = rayDirection;
    rayDescriptor.TMin = 0.0;
    rayDescriptor.TMax = rayDistance;

    // Create and init the RayIntersection structure for this
    RayIntersection rayIntersection;
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    rayIntersection.incidentDirection = rayDescriptor.Direction;

    // Evaluate the ray visibility term and PDF
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, RAYTRACINGRENDERERFLAG_CAST_SHADOW, 0, 1, 0, rayDescriptor, rayIntersection);

    // Add the contribution of this sample
    _RaytracedAreaShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = float2(rayIntersection.color.x * currentSample.x + previousValue.x, currentSample.y + previousValue.y);
}

// Given that we do not want to have the blur stop right away when there is no intersection, this value has been been experimentally validated
#define MISS_RAY_TRACING_SHADOW_DISTANCE 5.0f

RW_TEXTURE2D_X(float, _RaytracedShadowIntegration);
RW_TEXTURE2D_X(float, _RaytracingDistanceBufferRW);
RW_TEXTURE2D_X(float, _VelocityBuffer);
float _DirectionalLightAngle;

[shader("raygeneration")]
void RayGenDirectionalShadowSingle()
{
    // Grab the dimensions of the current raytrace shader
    uint3 LaunchIndex = DispatchRaysIndex();
    uint3 LaunchDim = DispatchRaysDimensions();

    UNITY_XR_ASSIGN_VIEW_INDEX(LaunchIndex.z);

    // Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Read the previous value of the buffer
    float previousIntegrationValue = _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    float previousVelocityValue = _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    float previousDistanceValue = _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)].x;

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;

    // If this is the background, or UnL is null or this pixel has been flagged as invalid, no 
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Make sure it is taken into account in the ray counters
    if (_RayCountEnabled > 0)
    {
        uint3 counterIdx = uint3(currentPixelCoord, INDEX_TEXTURE2D_ARRAY_X(RAYCOUNTVALUES_SHADOW_DIRECTIONAL));
        _RayCountTexture[counterIdx] = _RayCountTexture[counterIdx] + 1;
    }

    // Compute the position input structure
    PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentPixelCoord, normalData);

    // Read the ray distance
    float3 rayDirection = LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentPixelCoord).xyz;
    float3 rayOrigin = positionWS + normalData.normalWS * _RaytracingRayBias;

    // Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin = rayOrigin;
    rayDescriptor.Direction = rayDirection;
    rayDescriptor.TMin = 0.0;
    rayDescriptor.TMax = 1000.0;

    // Create and init the RayIntersection structure for this
    RayIntersection rayIntersection;
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    rayIntersection.velocity = 0.0;
    rayIntersection.t = MISS_RAY_TRACING_SHADOW_DISTANCE;

    // Evaluate the ray visibility term
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_FRONT_FACING_TRIANGLES | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, RAYTRACINGRENDERERFLAG_CAST_SHADOW, 0, 1, 0, rayDescriptor, rayIntersection);

    // Add the contribution of this sample
    _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = previousIntegrationValue + rayIntersection.color.x / (float)_RaytracingNumSamples;
    _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = max(rayIntersection.velocity, previousVelocityValue);
    _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)] = previousDistanceValue + rayIntersection.t / (float)_RaytracingNumSamples;
}

RW_TEXTURE2D_X(float4, _RaytracedColorShadowIntegration);

[shader("raygeneration")]
void RayGenDirectionalColorShadowSingle()
{
    // Grab the dimensions of the current raytrace shader
    uint3 LaunchIndex = DispatchRaysIndex();
    uint3 LaunchDim = DispatchRaysDimensions();

    UNITY_XR_ASSIGN_VIEW_INDEX(LaunchIndex.z);

    // Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Read the previous value of the buffer
    float3 previousIntergrationValue = _RaytracedColorShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)].xyz;
    float previousVelocityValue = _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    float previousDistanceValue = _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)].x;

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;

    // If this is the background, or UnL is null or this pixel has been flagged as invalid, no 
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Make sure it is taken into account in the ray counters
    if (_RayCountEnabled > 0)
    {
        uint3 counterIdx = uint3(currentPixelCoord, INDEX_TEXTURE2D_ARRAY_X(RAYCOUNTVALUES_SHADOW_DIRECTIONAL));
        _RayCountTexture[counterIdx] = _RayCountTexture[counterIdx] + 1;
    }

    // Compute the position input structure
    PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentPixelCoord, normalData);

    // Read the ray distance
    float3 rayDirection = LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentPixelCoord).xyz;
    float3 rayOrigin = positionWS + normalData.normalWS * _RaytracingRayBias;

    // Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin = rayOrigin;
    rayDescriptor.Direction = rayDirection;
    rayDescriptor.TMin = 0.0;
    rayDescriptor.TMax = 1000.0;

    // Create and init the RayIntersection structure for this
    RayIntersection rayIntersection;
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    rayIntersection.velocity = 0.0;
    rayIntersection.t = MISS_RAY_TRACING_SHADOW_DISTANCE;

    // Evaluate the ray visibility term
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_FRONT_FACING_TRIANGLES | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, RAYTRACINGRENDERERFLAG_CAST_SHADOW_OPAQUE, 0, 1, 0, rayDescriptor, rayIntersection);
    
    // If we did not hit an opaque object
    if (rayIntersection.color.x != 0.0)
    {
        rayDescriptor.Origin = rayOrigin;
        rayDescriptor.Direction = rayDirection;
        rayDescriptor.TMin = 0.0;
        rayDescriptor.TMax = 1000.0;
        rayIntersection.color = float3(1.0, 1.0, 1.0);
        rayIntersection.t = MISS_RAY_TRACING_SHADOW_DISTANCE;

        TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_FRONT_FACING_TRIANGLES 
            | RAY_FLAG_FORCE_NON_OPAQUE, 
            RAYTRACINGRENDERERFLAG_CAST_SHADOW_TRANSPARENT, 0, 1, 1, rayDescriptor, rayIntersection);
    }

    _RaytracedColorShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = float4(previousIntergrationValue + rayIntersection.color / (float)_RaytracingNumSamples, 1.0);
    _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = max(rayIntersection.velocity, previousVelocityValue);
    _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)] = previousDistanceValue + rayIntersection.t / (float)_RaytracingNumSamples;
}

[shader("raygeneration")]
void RayGenShadowSegmentSingle()
{
    // Grab the dimensions of the current raytrace shader
    uint3 LaunchIndex = DispatchRaysIndex();
    uint3 LaunchDim = DispatchRaysDimensions();

    UNITY_XR_ASSIGN_VIEW_INDEX(LaunchIndex.z);

    // Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;

    // If this is the background, we do not need to do anything
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Read the ray distance
    float rayDistance = LOAD_TEXTURE2D_X(_RaytracingDistanceBuffer, currentPixelCoord).x;

    // If the distance is negative, it means the rays is a visible intersection.
    if (rayDistance < 0.0)
    {
        // Read the previous value and add one
        float previousValue = _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)];
        _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = previousValue + 1.0 / (float)_RaytracingNumSamples;
        _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = 1.0;
        return;
    }

    // Fetch the ray direction
    float4 rayDirection = LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentPixelCoord);

    // If the PDF is negative, means the ray means a hit (no need to shoot it)
    if (rayDirection.w < 0.0) return;

    // Make sure it is taken into account in the ray counters
    if (_RayCountEnabled > 0)
    {
        uint3 counterIdx = uint3(currentPixelCoord, INDEX_TEXTURE2D_ARRAY_X(RAYCOUNTVALUES_SHADOW_POINT_SPOT ));
        _RayCountTexture[counterIdx] = _RayCountTexture[counterIdx] + 1;
    }

    // Compute the world space position of the source pixel
    PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentPixelCoord, normalData);

    // Recompute the ray parameters
    float3 rayOrigin = positionWS + normalData.normalWS * _RaytracingRayBias; 
    float3 rayDestination = rayOrigin + rayDirection.xyz * (rayDistance -_RaytracingRayBias);

    // Re-normalize using t
    rayDistance = length(rayDestination - rayOrigin);
    rayDirection.xyz = (rayDestination - rayOrigin) / rayDistance;

    // Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin = rayOrigin;
    rayDescriptor.Direction = rayDirection.xyz;
    rayDescriptor.TMin = 0.0;
    rayDescriptor.TMax = rayDistance;

    // Create and init the RayIntersection structure for this
    RayIntersection rayIntersection;
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    rayIntersection.incidentDirection = rayDescriptor.Direction;
    rayIntersection.velocity = 0.0;
    rayIntersection.t = MISS_RAY_TRACING_SHADOW_DISTANCE;

    // Evaluate the ray visibility term and PDF
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_FRONT_FACING_TRIANGLES | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH, RAYTRACINGRENDERERFLAG_CAST_SHADOW, 0, 1, 0, rayDescriptor, rayIntersection);

    // Add the contribution of this sample
    float previousValue = _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)];
    float previousVelocityValue = _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    float previousDistanceValue = _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    
    _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = previousValue + rayIntersection.color.x / (float)_RaytracingNumSamples;
    _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = max(rayIntersection.velocity, previousVelocityValue);
    _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)] = previousDistanceValue + rayIntersection.t / (float)_RaytracingNumSamples;
}

[shader("raygeneration")]
void RayGenSemiTransparentShadowSegmentSingle()
{
    // Grab the dimensions of the current raytrace shader
    uint3 LaunchIndex = DispatchRaysIndex();
    uint3 LaunchDim = DispatchRaysDimensions();

    UNITY_XR_ASSIGN_VIEW_INDEX(LaunchIndex.z);

    // Pixel coordinate of the current pixel
    uint2 currentPixelCoord = uint2(LaunchIndex.x, LaunchIndex.y);

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentPixelCoord).x;

    // If this is the background, we do not need to do anything
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Read the ray distance
    float rayDistance = LOAD_TEXTURE2D_X(_RaytracingDistanceBuffer, currentPixelCoord).x;

    // If the distance is negative, it means the rays is a visible intersection.
    if (rayDistance < 0.0)
    {
        // Read the previous value and add one
        float previousValue = _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)];
        _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = previousValue + 1.0 / (float)_RaytracingNumSamples;
        return;
    }

    // Fetch the ray direction
    float4 rayDirection = LOAD_TEXTURE2D_X(_RaytracingDirectionBuffer, currentPixelCoord);

    // If the PDF is negative, means the ray means a hit (no need to shoot it)
    if (rayDirection.w < 0.0) return;

    // Make sure it is taken into account in the ray counters
    if (_RayCountEnabled > 0)
    {
        uint3 counterIdx = uint3(currentPixelCoord, INDEX_TEXTURE2D_ARRAY_X(RAYCOUNTVALUES_SHADOW_POINT_SPOT ));
        _RayCountTexture[counterIdx] = _RayCountTexture[counterIdx] + 1;
    }

    // Compute the world space position of the source pixel
    PositionInputs posInput = GetPositionInput(currentPixelCoord, _ScreenSize.zw, depthValue, UNITY_MATRIX_I_VP, GetWorldToViewMatrix(), 0);
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentPixelCoord, normalData);

    // Recompute the ray parameters
    float3 rayOrigin = positionWS + normalData.normalWS * _RaytracingRayBias; 
    float3 rayDestination = rayOrigin + rayDirection.xyz * (rayDistance -_RaytracingRayBias);

    // Re-normalize using t
    rayDistance = length(rayDestination - rayOrigin);
    rayDirection.xyz = (rayDestination - rayOrigin) / rayDistance;

    // Create the ray descriptor for this pixel
    RayDesc rayDescriptor;
    rayDescriptor.Origin = rayOrigin;
    rayDescriptor.Direction = rayDirection.xyz;
    rayDescriptor.TMin = 0.0;
    rayDescriptor.TMax = rayDistance;

    // Create and init the RayIntersection structure for this
    RayIntersection rayIntersection;
    rayIntersection.color = float3(0.0, 0.0, 0.0);
    rayIntersection.incidentDirection = rayDescriptor.Direction;
    rayIntersection.velocity = 0.0;
    rayIntersection.t = MISS_RAY_TRACING_SHADOW_DISTANCE;

    // Evaluate the ray visibility term and PDF
    TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_FRONT_FACING_TRIANGLES | RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH
                                            , RAYTRACINGRENDERERFLAG_CAST_SHADOW_OPAQUE, 0, 1, 0, rayDescriptor, rayIntersection);

    // If we did not hit an opaque object
    if (rayIntersection.color.x != 0.0)
    {
        rayDescriptor.Origin = rayOrigin;
        rayDescriptor.Direction = rayDirection.xyz;
        rayDescriptor.TMin = 0.0;
        rayDescriptor.TMax = rayDistance;
        rayIntersection.color = float3(1.0, 1.0, 1.0);
        rayIntersection.t = MISS_RAY_TRACING_SHADOW_DISTANCE;

        TraceRay(_RaytracingAccelerationStructure, RAY_FLAG_CULL_FRONT_FACING_TRIANGLES 
            | RAY_FLAG_FORCE_NON_OPAQUE, 
            RAYTRACINGRENDERERFLAG_CAST_SHADOW_TRANSPARENT, 0, 1, 1, rayDescriptor, rayIntersection);
    }

    // Add the contribution of this sample
    float previousValue = _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)];
    float previousVelocityValue = _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    float previousDistanceValue = _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)].x;
    _RaytracedShadowIntegration[COORD_TEXTURE2D_X(currentPixelCoord)] = previousValue + Luminance(rayIntersection.color) / (float)_RaytracingNumSamples;
    _VelocityBuffer[COORD_TEXTURE2D_X(currentPixelCoord)] = max(rayIntersection.velocity, previousVelocityValue);
    _RaytracingDistanceBufferRW[COORD_TEXTURE2D_X(currentPixelCoord)] = previousDistanceValue + rayIntersection.t / (float)_RaytracingNumSamples;
}
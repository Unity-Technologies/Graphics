#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch

#pragma multi_compile_local _ USE_SECOND_CLOUD_LAYER

#pragma kernel BakeCloudTexture KERNEL_NAME=BakeCloudTexture
//#pragma enable_d3d11_debug_symbols

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/VolumeRendering.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/SkyUtils.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/PhysicallyBasedSky/PhysicallyBasedSkyCommon.hlsl"

#ifndef USE_SECOND_CLOUD_LAYER
    #define NUM_LAYERS  1
    #define LAYER       0
#else
    #define NUM_LAYERS  2
    #define LAYER       dispatchThreadId.z
#endif

#define NUM_MULTI_SCATTERING_OCTAVES 2
#define FORWARD_ECCENTRICITY    0.7
#define BACKWARD_ECCENTRICITY   0.3
#define MULTI_SCATTERING        0.75
#define EARTH_RADIUS            6378100.0
#define _Thickness 800

TEXTURE2D(_CloudMapA);
SAMPLER(sampler_CloudMapA);

#ifdef USE_SECOND_CLOUD_LAYER
TEXTURE2D(_CloudMapB);
SAMPLER(sampler_CloudMapB);
#endif

RW_TEXTURE2D_ARRAY(float2, _CloudTexture);

float4 _Params;
float4 _Params1[NUM_LAYERS];
float4 _Params2[NUM_LAYERS];
float _Resolution;

#define _SunDirection       _Params.xyz
#define _UpperHemisphere    (_Params.w > 0)
#define _Opacities          _Params1[data.index]
#define _Rotation           _Params2[LAYER].x
#define _LightingSteps      _Params2[data.index].y
#define _SigmaT             _Params2[data.index].z
#define _Altitude           _Params2[data.index].w

struct LayerSamplingData
{
    int index;
    float4 weights;

    TEXTURE2D(cloudMap);
    SAMPLER(sampler_cloudMap);
};

void GetCloudVolumeIntersection(LayerSamplingData data, float3 dir, out float rangeStart, out float range)
{
    float rangeEnd;
    rangeStart = -IntersectSphere(_Altitude + EARTH_RADIUS, -dir.y, EARTH_RADIUS).x;
    rangeEnd = -IntersectSphere(_Altitude + _Thickness + EARTH_RADIUS, -dir.y, EARTH_RADIUS).x;
    range = rangeEnd - rangeStart;
}

float GetCloudVolumeIntersection_Light(LayerSamplingData data, float3 originWS, float3 dir)
{
    float3 startPS = originWS + float3(0, EARTH_RADIUS, 0);
    float lenStartPS = length(startPS), rcpLenStartPS = rcp(lenStartPS);
    float cosChi = dot(-dir, startPS * rcpLenStartPS);
    return -IntersectSphere(_Altitude + _Thickness + EARTH_RADIUS, cosChi, lenStartPS, rcpLenStartPS).x;
}

float3 InverseLatLong(float2 uv, float upperHemisphereOnly)
{
    const float2 invAtan = float2(0.1591, 0.3183);

    uv.y = upperHemisphereOnly ? uv.y * 0.5 + 0.5 : uv.y;
    uv = (uv - 0.5) / invAtan;

    float y = sin(uv.y);
    float scale = sqrt(1.0 - y*y);

    return float3(sin(uv.x) * scale, y, cos(uv.x) * scale);
}

float SampleCloudMap(LayerSamplingData data, float2 uv)
{
    float4 cloudLayerColor = SAMPLE_TEXTURE2D_LOD(data.cloudMap, data.sampler_cloudMap, uv, 0);

    float4 clouds = cloudLayerColor * data.weights;
    return clouds.r + clouds.g + clouds.b + clouds.a;
}

float3 RotationUp(float3 p, float2 cos_sin)
{
    float3 rotDirX = float3(cos_sin.x, 0, -cos_sin.y);
    float3 rotDirY = float3(cos_sin.y, 0,  cos_sin.x);

    return float3(dot(rotDirX, p), p.y, dot(rotDirY, p));
}

float GetDensity(LayerSamplingData data, float3 positionWS, float3 dir, float thickness)
{
    float rangeStart, range;
    GetCloudVolumeIntersection(data, dir, rangeStart, range);

    float distToCenter = length(dir * (rangeStart + 0.5 * range) - positionWS);
    return (distToCenter > range * thickness) ? 0 : 0.1 * thickness;
}

float GetDensity(LayerSamplingData data, float3 positionWS)
{
    float3 dir = normalize(positionWS);
    float thickness = SampleCloudMap(data, GetLatLongCoords(dir, _UpperHemisphere));
    return GetDensity(data, positionWS, dir, thickness);
}

float EvaluateSunLuminance(LayerSamplingData data, float3 positionWS, float phaseFunction[NUM_MULTI_SCATTERING_OCTAVES])
{
    const int _NumLightSteps = (int)_LightingSteps;

    float luminance = 0.0, extinction = 0.0;
    float totalLightDistance = GetCloudVolumeIntersection_Light(data, positionWS, _SunDirection);
    totalLightDistance = clamp(totalLightDistance, 0, 500);

    // Compute the size of the current step
    float stepSize = totalLightDistance / (float)_NumLightSteps;

    // Collect total density along light ray.
    for (int j = 1; j <= _NumLightSteps; j++)
    {
        float3 currentSamplePointWS = positionWS + _SunDirection * stepSize * j;
        extinction += GetDensity(data, currentSamplePointWS);
    }

    // Combine the luminance for each octave
    for (int o = 0; o < NUM_MULTI_SCATTERING_OCTAVES; ++o)
        luminance += exp(-stepSize * extinction * _SigmaT * PositivePow(MULTI_SCATTERING, o))
                     * phaseFunction[o]
                     * PositivePow(MULTI_SCATTERING, o);

    return luminance;
}

float2 ComputeCloudLighting(TEXTURE2D(cloudMap), SAMPLER(sampler_cloudMap), float2 uv, uint index)
{
    LayerSamplingData data;

    data.index = index;
    data.cloudMap = cloudMap;
    data.sampler_cloudMap = sampler_cloudMap;
    data.weights = _Opacities / max(_Opacities.r + _Opacities.g + _Opacities.b + _Opacities.a, 1.0);

    const float opacity = SampleCloudMap(data, uv);
    float2 finalColor = opacity;

    if ((int)_LightingSteps != 0)
    {
        const float3 dir = InverseLatLong(uv, _UpperHemisphere);
        const float cosAngle = dot(dir, _SunDirection);

        float phaseFunction[NUM_MULTI_SCATTERING_OCTAVES];
        for (int o = 0; o < NUM_MULTI_SCATTERING_OCTAVES; ++o)
        {
            const float forwardP = HenyeyGreensteinPhaseFunction(FORWARD_ECCENTRICITY * PositivePow(MULTI_SCATTERING, o), cosAngle);
            const float backwardsP = HenyeyGreensteinPhaseFunction(-BACKWARD_ECCENTRICITY * PositivePow(MULTI_SCATTERING, o), cosAngle);
            phaseFunction[o] = backwardsP + forwardP;
        }

        float rangeStart, range;
        GetCloudVolumeIntersection(data, dir, rangeStart, range);

        float3 currentPositionWS = dir * (rangeStart + 0.5 * (1 - opacity) * range);

        finalColor = 0;
        if (opacity != 0.0f)
        {
            const float sigmaE = 0.1 * opacity * _SigmaT;
            const float currentStepExtinction = exp(-sigmaE * range * opacity);
            const float luminance = EvaluateSunLuminance(data, currentPositionWS, phaseFunction);

            // Output (scattering, 1 - transmittance)
            finalColor.x = luminance - luminance * currentStepExtinction;
            finalColor.y = 1 - currentStepExtinction;
        }
    }

    return finalColor;
}

[numthreads(8, 8, NUM_LAYERS)]
void KERNEL_NAME(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    float2 uv = float2(dispatchThreadId.x * _Resolution, dispatchThreadId.y * _Resolution);
    if (_UpperHemisphere)
        uv.y *= 2.0f;

#ifndef USE_SECOND_CLOUD_LAYER
    float2 cloudLayerColor = ComputeCloudLighting(_CloudMapA, sampler_CloudMapA, uv, LAYER);
#else
    float2 cloudLayerColor = LAYER == 0 ?
        ComputeCloudLighting(_CloudMapA, sampler_CloudMapA, uv, LAYER) :
        ComputeCloudLighting(_CloudMapB, sampler_CloudMapB, uv, LAYER);
#endif

    dispatchThreadId.x = frac(uv.x + _Rotation) / _Resolution;
    _CloudTexture[dispatchThreadId] = cloudLayerColor;
}

#pragma kernel KMain

// HDRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Hammersley.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Sampling/Sampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Hair/Hair.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Hair/Reference/HairReference.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/HDStencilUsage.cs.hlsl"

RWStructuredBuffer<float> _FurnaceTestResult;

float3 _OutgoingDirection;

#define SAMPLE_COUNT 300000
#define GROUP_SIZE   128

// Local memory for parallel reduction.
groupshared float F_LDS[GROUP_SIZE];

SurfaceData ConfigureFiberSurface()
{
    SurfaceData surfaceData;
    ZERO_INITIALIZE(SurfaceData, surfaceData);

    // Smoothness (Longitudinal Roughness)
    surfaceData.perceptualSmoothness = 0.3;

    // Radial Smoothness (Azimuthal Roughness).
    surfaceData.perceptualRadialSmoothness = 0.3;

    // Cuticle Angle
    surfaceData.cuticleAngle = 2;

    // The theoretical fiber points in the Z-up direction.
    surfaceData.hairStrandDirectionWS = float3(0, 0, 1);

    return surfaceData;
}

float SampleHair(uint seed)
{
    // Configure a theoretical hair fiber to evaluate the average attenuation.
    SurfaceData surfaceData = ConfigureFiberSurface();

    // Use the conversion from the surface data to compute all of the per-lobe bsdf information.
    BSDFData bsdfData = ConvertSurfaceDataToBSDFData(uint2(0, 0), surfaceData);

    // Randomize H for this sample.
    bsdfData.h = -1 + 2 * GenerateHashedRandomFloat(seed);

    // Override the absorption.
    bsdfData.absorption = 0;

    // Unused in this case.
    PreLightData preLightData;
    ZERO_INITIALIZE(PreLightData, preLightData);

    float3 V = _OutgoingDirection;
    float2 U = Hammersley2d(seed, SAMPLE_COUNT);
    float3 L = SampleSphereUniform(U.x, U.y);

    // Invoke the reference fiber scattering function.
    CBSDF cbsdf = EvaluateHairReference(V, L, bsdfData);

    return (cbsdf.specR.x);
}

[numthreads(GROUP_SIZE, 1, 1)]
void KMain(uint dispatchThreadId : SV_DispatchThreadID,
           uint groupThreadId    : SV_GroupThreadID,
           uint groupId          : SV_GroupID)
{
    uint index = groupThreadId.x;

    F_LDS[index] = SampleHair(dispatchThreadId);

    GroupMemoryBarrierWithGroupSync();

    // Simple parallel reduction on the group.
    for (uint i = GROUP_SIZE / 2; i > 0; i >>= 1)
    {
        if (index < i)
        {
            F_LDS[index] += F_LDS[index + i];
        }

        GroupMemoryBarrierWithGroupSync();
    }

    if (index == 0)
    {
        _FurnaceTestResult[groupId] = F_LDS[0];
    }
}

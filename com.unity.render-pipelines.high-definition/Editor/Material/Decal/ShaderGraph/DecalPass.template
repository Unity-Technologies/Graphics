Pass
{ 
    $splice(PassName)
    Tags 
    { 
        $splice(LightMode)
    }

    // Render State
    $splice(RenderState)

    // Debug
    $splice(Debug)

    // --------------------------------------------------
    // Pass

    HLSLPROGRAM

    // Pragmas
    $splice(PassPragmas)

    // Keywords
    $splice(PassKeywords)
    $splice(GraphKeywords)

    // Defines
    $Material.AffectsAlbedo:                #define _MATERIAL_AFFECTS_ALBEDO 1
    $Material.AffectsNormal:                #define _MATERIAL_AFFECTS_NORMAL 1
    $Material.AffectsMaskMap:               #define _MATERIAL_AFFECTS_MASKMAP 1
    $Material.AffectsEmission:              #define _MATERIAL_AFFECTS_EMISSION 1
    $AttributesMesh.normalOS:               #define ATTRIBUTES_NEED_NORMAL
    $AttributesMesh.tangentOS:              #define ATTRIBUTES_NEED_TANGENT
    $AttributesMesh.uv0:                    #define ATTRIBUTES_NEED_TEXCOORD0
    $AttributesMesh.uv1:                    #define ATTRIBUTES_NEED_TEXCOORD1
    $AttributesMesh.uv2:                    #define ATTRIBUTES_NEED_TEXCOORD2
    $AttributesMesh.uv3:                    #define ATTRIBUTES_NEED_TEXCOORD3
    $AttributesMesh.color:                  #define ATTRIBUTES_NEED_COLOR
    $VaryingsMeshToPS.positionRWS:          #define VARYINGS_NEED_POSITION_WS
    $VaryingsMeshToPS.normalWS:             #define VARYINGS_NEED_TANGENT_TO_WORLD
    $VaryingsMeshToPS.texCoord0:            #define VARYINGS_NEED_TEXCOORD0
    $VaryingsMeshToPS.texCoord1:            #define VARYINGS_NEED_TEXCOORD1
    $VaryingsMeshToPS.texCoord2:            #define VARYINGS_NEED_TEXCOORD2
    $VaryingsMeshToPS.texCoord3:            #define VARYINGS_NEED_TEXCOORD3
    $VaryingsMeshToPS.color:                #define VARYINGS_NEED_COLOR
    $VaryingsMeshToPS.cullFace:             #define VARYINGS_NEED_CULLFACE
    $features.graphVertex:                  #define HAVE_MESH_MODIFICATION
    $splice(GraphDefines)

    $splice(HybridV1InjectedBuiltinProperties)

    // Includes
    $splice(PreGraphIncludes)

    // --------------------------------------------------
    // Structs and Packing

    $splice(PassStructs)

    $splice(InterpolatorPack)

    // --------------------------------------------------
    // Graph

    // Graph Properties
    $splice(GraphProperties)

    // Graph Functions
    $splice(GraphFunctions)

    // Graph Vertex
    $splice(GraphVertex)
    
    // Graph Pixel
    $splice(GraphPixel)

    // --------------------------------------------------
    // Build Graph Inputs

    $features.graphVertex:  $include("VertexAnimation.template.hlsl")
    $features.graphPixel:   $include("SharedCode.template.hlsl")

    // --------------------------------------------------
    // Build Surface Data

    void GetSurfaceData(FragInputs fragInputs, float3 V, PositionInputs posInput, out DecalSurfaceData surfaceData)
    {
        #if (SHADERPASS == SHADERPASS_DBUFFER_PROJECTOR) || (SHADERPASS == SHADERPASS_FORWARD_EMISSIVE_PROJECTOR)
            float4x4 normalToWorld = UNITY_ACCESS_INSTANCED_PROP(Decal, _NormalToWorld);
            float fadeFactor = clamp(normalToWorld[0][3], 0.0f, 1.0f);
            float2 scale = float2(normalToWorld[3][0], normalToWorld[3][1]);
            float2 offset = float2(normalToWorld[3][2], normalToWorld[3][3]);
            fragInputs.texCoord0.xy = fragInputs.texCoord0.xy * scale + offset;
            fragInputs.texCoord1.xy = fragInputs.texCoord1.xy * scale + offset;
            fragInputs.texCoord2.xy = fragInputs.texCoord2.xy * scale + offset;
            fragInputs.texCoord3.xy = fragInputs.texCoord3.xy * scale + offset;
        #else
            float fadeFactor = 1.0;
        #endif

        SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);

        // setup defaults -- these are used if the graph doesn't output a value
        ZERO_INITIALIZE(DecalSurfaceData, surfaceData);

        #if _MATERIAL_AFFECTS_EMISSION
            $SurfaceDescription.Emission:                   surfaceData.emissive.rgb = surfaceDescription.Emission.rgb * fadeFactor;
        #endif

        // copy across graph values, if defined
        #if _MATERIAL_AFFECTS_ALBEDO
            $SurfaceDescription.Albedo:                     surfaceData.baseColor.xyz = surfaceDescription.Albedo;
            $SurfaceDescription.AlphaAlbedo:                surfaceData.baseColor.w = surfaceDescription.AlphaAlbedo * fadeFactor;
            if(surfaceData.baseColor.w > 0)
            {
                surfaceData.HTileMask |= DBUFFERHTILEBIT_DIFFUSE;
            }
        #endif

        #if _MATERIAL_AFFECTS_NORMAL
            #if (SHADERPASS == SHADERPASS_DBUFFER_PROJECTOR) 
                $SurfaceDescription.Normal:                     surfaceData.normalWS.xyz = mul((float3x3)normalToWorld, surfaceDescription.Normal);
            #elif (SHADERPASS == SHADERPASS_DBUFFER_MESH) || (SHADERPASS == SHADERPASS_FORWARD_PREVIEW)
                // We need to normalize as we use mikkt tangent space and this is expected (tangent space is not normalize)
                $SurfaceDescription.Normal:                     surfaceData.normalWS.xyz = normalize(TransformTangentToWorld(surfaceDescription.Normal, fragInputs.tangentToWorld));
            #endif

            $SurfaceDescription.AlphaNormal:                surfaceData.normalWS.w = surfaceDescription.AlphaNormal * fadeFactor;
            if(surfaceData.normalWS.w > 0)
            {
                surfaceData.HTileMask |= DBUFFERHTILEBIT_NORMAL;
            }
        #else
            #if (SHADERPASS == SHADERPASS_FORWARD_PREVIEW) // Default to vertex normal
                $SurfaceDescription.Normal:                     surfaceData.normalWS.xyz = normalize(TransformTangentToWorld(float3(0.0, 0.0, 0.1), fragInputs.tangentToWorld));
            #endif
        #endif

        #if _MATERIAL_AFFECTS_MASKMAP
            $SurfaceDescription.Smoothness:                 surfaceData.mask.z = surfaceDescription.Smoothness;
            $SurfaceDescription.MAOSOpacity:                surfaceData.mask.w = surfaceDescription.MAOSOpacity * fadeFactor;

            #ifdef DECALS_4RT
                $SurfaceDescription.Metallic:                   surfaceData.mask.x = surfaceDescription.Metallic;
                $SurfaceDescription.Occlusion:                  surfaceData.mask.y = surfaceDescription.Occlusion;
            #endif

            #ifdef DECALS_4RT
                $SurfaceDescription.MAOSOpacity:                surfaceData.MAOSBlend.x = surfaceDescription.MAOSOpacity * fadeFactor;
                $SurfaceDescription.MAOSOpacity:                surfaceData.MAOSBlend.y = surfaceDescription.MAOSOpacity * fadeFactor;
            #endif

            if (surfaceData.mask.w > 0)
            {
                surfaceData.HTileMask |= DBUFFERHTILEBIT_MASK;
            }                                                        
        #endif
    }

    // --------------------------------------------------
    // Main

    $splice(PostGraphIncludes)

    ENDHLSL
}

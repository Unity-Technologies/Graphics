Pass
{
    $splice(PassName)
    Tags 
    { 
        $splice(LightMode)
    }

    // Render State
    $splice(RenderState)

    // Debug
    $splice(Debug)
    
    // --------------------------------------------------
    // Pass

    HLSLPROGRAM

    // Pragmas
    $splice(PassPragmas)

    // Keywords
    $splice(PassKeywords)
    $splice(GraphKeywords)

    //-------------------------------------------------------------------------------------
    // Variant Definitions
    //
    // (active field translations to some StackLit.shader defines that were switched into
    // variants with shader_feature : some are no longer needed as were only used in
    // StackLitData.hlsl)
    //-------------------------------------------------------------------------------------

    // // Predicate reference
    // Specific predicates
    // (ie generated from StackLitSubShader.GetActiveFieldsFromMasterNode)

    // // General surface and geometry semantics
    // $DoubleSided:
    // $DoubleSided.Flip:
    // $DoubleSided.Mirror:
    // $FragInputs.isFrontFace:     // will need this for determining normal flip mode
    // $AlphaTest:
    // $SurfaceType.Transparent:
    // $BlendMode.Alpha:
    // $BlendMode.Premultiply:
    // $BlendMode.Add:
    // $BlendMode.PreserveSpecular:
    // $AlphaFog:

    // // Combined (one predicate implicitly implying a combination of others)
    // // input slot presence + slot connection:
    // $BentNormal:
    // $Tangent:
    // $CoatNormal:

    // // Combined predicates: other special cases
    // // (eg property enabled + one or even multiple (and all of them) slots present,
    // // connection or unconnected but non default value):
    // $Specular.AA:             // this one is set whether we have GeometricSpecularAA or NormalMapFiltering (TODOTODO)
    // $Specular.GeometricAA:
    // $AmbientOcclusion: // not used, bugbug todotodo in Lit

    // // Features and config toggles
    // $BaseParametrization.SpecularColor:
    // $Specular.EnergyConserving:
    // $Material.Anisotropy:
    // $Material.Coat:
    // $Material.CoatNormal:
    // $Material.DualSpecularLobe:
    // $DualSpecularLobeParametrization.HazyGloss:
    // $CapHazinessIfNotMetallic:
    // $Material.Iridescence:
    // $Material.SubsurfaceScattering:
    // $Material.Transmission:
    // $AnisotropyForAreaLights:
    // $RecomputeStackPerLight:
    // $ShadeBaseUsingRefractedAngles:
    // $StackLitDebug:
    // $Decals:
    // $DisableSSR:
    // $SpecularOcclusion:
    // $AddPrecomputedVelocity:

    // // Original shader keywords reference
    // _ALPHATEST_ON
    // _DOUBLESIDED_ON
    // _DETAILMAP
    // _BENTNORMALMAP
    // _TANGENTMAP
    // _ENABLESPECULAROCCLUSION // This will control SO whether bent normals are there or not (cf Lit where only bent normals have effect with this keyword)


    // // Keyword for transparent
    // _SURFACE_TYPE_TRANSPARENT
    // _ _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY
    // _BLENDMODE_PRESERVE_SPECULAR_LIGHTING // handled in material.hlsl

    // // MaterialFeature used as shader feature
    // _MATERIAL_FEATURE_DUAL_SPECULAR_LOBE
    // _MATERIAL_FEATURE_ANISOTROPY
    // _MATERIAL_FEATURE_COAT
    // _MATERIAL_FEATURE_COAT_NORMALMAP
    // _MATERIAL_FEATURE_IRIDESCENCE
    // _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
    // _MATERIAL_FEATURE_TRANSMISSION
    // _MATERIAL_FEATURE_SPECULAR_COLOR
    // _MATERIAL_FEATURE_HAZY_GLOSS

    // // Performance vs appearance options
    // // Handling of anisotropy for area lights
    // _ANISOTROPY_FOR_AREA_LIGHTS
    
    // // Vertically layered BSDF test/tweak
    // _VLAYERED_RECOMPUTE_PERLIGHT
    // _VLAYERED_USE_REFRACTED_ANGLES_FOR_BASE

    // Defines
    $DisableDecals:                                      #define _DISABLE_DECALS
    $DisableSSR:                                         #define _DISABLE_SSR
    $AddPrecomputedVelocity:                             #define _ADD_PRECOMPUTED_VELOCITY

    // StackLit shader_features:
    $SpecularOcclusion:                                  #define _ENABLESPECULAROCCLUSION // main enable
    $BaseParametrization.SpecularColor:                  #define _MATERIAL_FEATURE_SPECULAR_COLOR
    $Material.Anisotropy:                                #define _MATERIAL_FEATURE_ANISOTROPY
    $Material.Coat:                                      #define _MATERIAL_FEATURE_COAT
    $Material.CoatNormal:                                #define _MATERIAL_FEATURE_COAT_NORMALMAP
    $Material.DualSpecularLobe:                          #define _MATERIAL_FEATURE_DUAL_SPECULAR_LOBE
    $DualSpecularLobeParametrization.HazyGloss:          #define _MATERIAL_FEATURE_HAZY_GLOSS
    $Material.Iridescence:                               #define _MATERIAL_FEATURE_IRIDESCENCE
    $Material.SubsurfaceScattering:                      #define _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
    $Material.Transmission:                              #define _MATERIAL_FEATURE_TRANSMISSION
    $AnisotropyForAreaLights:                            #define _ANISOTROPY_FOR_AREA_LIGHTS
    $RecomputeStackPerLight:                             #define _VLAYERED_RECOMPUTE_PERLIGHT
    $HonorPerLightMinRoughness:                          #define _STACK_LIT_HONORS_LIGHT_MIN_ROUGHNESS
    $ShadeBaseUsingRefractedAngles:                      #define _VLAYERED_USE_REFRACTED_ANGLES_FOR_BASE
    $StackLitDebug:                                      #define _STACKLIT_DEBUG
    $DepthOffset:                                        #define _DEPTHOFFSET_ON 1
    $BlendMode.PreserveSpecular:                         #define _BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
    $NormalDropOffTS:		                            #define _NORMAL_DROPOFF_TS 1
    $NormalDropOffOS:		                            #define _NORMAL_DROPOFF_OS 1
    $NormalDropOffWS:		                            #define _NORMAL_DROPOFF_WS 1

    // StackLit.hlsl config defines (direct, no feature keywords):
    // _SCREENSPACE_SPECULAROCCLUSION_METHOD, _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT, _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_DIR
    // _DATABASED_SPECULAROCCLUSION_METHOD, _DATABASED_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT
    $ScreenSpaceSpecularOcclusionBaseMode.Off:                          #define _SCREENSPACE_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_DISABLED
    $ScreenSpaceSpecularOcclusionBaseMode.DirectFromAO:                 #define _SCREENSPACE_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_FROM_AO
    $ScreenSpaceSpecularOcclusionBaseMode.ConeConeFromBentAO:           #define _SCREENSPACE_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_CONECONE
    $ScreenSpaceSpecularOcclusionBaseMode.SPTDIntegrationOfBentAO:      #define _SCREENSPACE_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_SPTD
    // This enum case isn't handled, and normally not valided in the input UI, but if set, fallback to default:
    $ScreenSpaceSpecularOcclusionBaseMode.Custom:                       #define _SCREENSPACE_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_FROM_AO

    $ScreenSpaceSpecularOcclusionAOConeSize.UniformAO:                  #define _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT BENT_VISIBILITY_FROM_AO_UNIFORM
    $ScreenSpaceSpecularOcclusionAOConeSize.CosWeightedAO:              #define _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT BENT_VISIBILITY_FROM_AO_COS
    $ScreenSpaceSpecularOcclusionAOConeSize.CosWeightedBentCorrectAO:   #define _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT BENT_VISIBILITY_FROM_AO_COS_BENT_CORRECTION

    $ScreenSpaceSpecularOcclusionAOConeDir.GeomNormal:                  #define _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_DIR BENT_VISIBILITY_DIR_GEOM_NORMAL
    $ScreenSpaceSpecularOcclusionAOConeDir.BentNormal:                  #define _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_DIR BENT_VISIBILITY_DIR_BENT_NORMAL
    $ScreenSpaceSpecularOcclusionAOConeDir.ShadingNormal:               #define _SCREENSPACE_SPECULAROCCLUSION_VISIBILITY_DIR BENT_VISIBILITY_DIR_SHADING_NORMAL

    $DataBasedSpecularOcclusionBaseMode.Off:                            #define _DATABASED_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_DISABLED
    $DataBasedSpecularOcclusionBaseMode.DirectFromAO:                   #define _DATABASED_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_FROM_AO
    $DataBasedSpecularOcclusionBaseMode.ConeConeFromBentAO:             #define _DATABASED_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_CONECONE
    $DataBasedSpecularOcclusionBaseMode.SPTDIntegrationOfBentAO:        #define _DATABASED_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_SPTD
    // TODO: Normally, we would need a per lobe specular occlusion value, or at least per interface in dual normal mode
    //       (Main rationale is that roughness can change IBL fetch direction and not only BSDF lobe width, and interface normal changes shading reference frame
    //       hence it also changes the directional relation between the visibility cone and the BSDF lobe)
    $DataBasedSpecularOcclusionBaseMode.Custom:                         #define _DATABASED_SPECULAROCCLUSION_METHOD SPECULAR_OCCLUSION_CUSTOM_EXT_INPUT

    $DataBasedSpecularOcclusionAOConeSize.UniformAO:                    #define _DATABASED_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT BENT_VISIBILITY_FROM_AO_UNIFORM
    $DataBasedSpecularOcclusionAOConeSize.CosWeightedAO:                #define _DATABASED_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT BENT_VISIBILITY_FROM_AO_COS
    $DataBasedSpecularOcclusionAOConeSize.CosWeightedBentCorrectAO:     #define _DATABASED_SPECULAROCCLUSION_VISIBILITY_FROM_AO_WEIGHT BENT_VISIBILITY_FROM_AO_COS_BENT_CORRECTION

    // Cone fixup is only for cone methods and only for data based SO:
    $SpecularOcclusionConeFixupMethod.Off:                              #define _BENT_VISIBILITY_FIXUP_FLAGS BENT_VISIBILITY_FIXUP_FLAGS_NONE
    $SpecularOcclusionConeFixupMethod.BoostBSDFRoughness:               #define _BENT_VISIBILITY_FIXUP_FLAGS BENT_VISIBILITY_FIXUP_FLAGS_BOOST_BSDF_ROUGHNESS
    $SpecularOcclusionConeFixupMethod.TiltDirectionToGeomNormal:        #define _BENT_VISIBILITY_FIXUP_FLAGS BENT_VISIBILITY_FIXUP_FLAGS_TILT_BENTNORMAL_TO_GEOM
    $SpecularOcclusionConeFixupMethod.BoostAndTilt:                     #define _BENT_VISIBILITY_FIXUP_FLAGS (BENT_VISIBILITY_FIXUP_FLAGS_BOOST_BSDF_ROUGHNESS|BENT_VISIBILITY_FIXUP_FLAGS_TILT_BENTNORMAL_TO_GEOM)

    // The other predicates that don't directly map to inputs (the more abstract, called "specific" above)
    // are used in the surfaceData and builtinData functions.
    // (eg Specular.EnergyConserving:, CapHazinessIfNotMetallic:, Specular.GeometricAA:, Specular.AA:)

    $AttributesMesh.normalOS:               #define ATTRIBUTES_NEED_NORMAL
    $AttributesMesh.tangentOS:              #define ATTRIBUTES_NEED_TANGENT
    $AttributesMesh.uv0:                    #define ATTRIBUTES_NEED_TEXCOORD0
    $AttributesMesh.uv1:                    #define ATTRIBUTES_NEED_TEXCOORD1
    $AttributesMesh.uv2:                    #define ATTRIBUTES_NEED_TEXCOORD2
    $AttributesMesh.uv3:                    #define ATTRIBUTES_NEED_TEXCOORD3
    $AttributesMesh.color:                  #define ATTRIBUTES_NEED_COLOR
    $VaryingsMeshToPS.positionRWS:          #define VARYINGS_NEED_POSITION_WS
    $VaryingsMeshToPS.normalWS:             #define VARYINGS_NEED_TANGENT_TO_WORLD
    $VaryingsMeshToPS.texCoord0:            #define VARYINGS_NEED_TEXCOORD0
    $VaryingsMeshToPS.texCoord1:            #define VARYINGS_NEED_TEXCOORD1
    $VaryingsMeshToPS.texCoord2:            #define VARYINGS_NEED_TEXCOORD2
    $VaryingsMeshToPS.texCoord3:            #define VARYINGS_NEED_TEXCOORD3
    $VaryingsMeshToPS.color:                #define VARYINGS_NEED_COLOR
    $VaryingsMeshToPS.cullFace:             #define VARYINGS_NEED_CULLFACE
    $features.graphVertex:                  #define HAVE_MESH_MODIFICATION
    $splice(GraphDefines)

    #ifndef DEBUG_DISPLAY
        // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
        // Don't do it with debug display mode as it is possible there is no depth prepass in this case
        #if !defined(_SURFACE_TYPE_TRANSPARENT) && defined(_ALPHATEST)
            #if SHADERPASS == SHADERPASS_FORWARD
            #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
            #elif SHADERPASS == SHADERPASS_GBUFFER
            #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
            #endif
        #endif
    #endif

    // If we use subsurface scattering, enable output split lighting
    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
        #define OUTPUT_SPLIT_LIGHTING
    #endif

    // We need isFontFace when using double sided
    #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
        #define VARYINGS_NEED_CULLFACE
    #endif

    #if !( (SHADERPASS == SHADERPASS_FORWARD) || (SHADERPASS == SHADERPASS_LIGHT_TRANSPORT))
        // StackLit.hlsl hooks the callback from PostInitBuiltinData() via #define MODIFY_BAKED_DIFFUSE_LIGHTING
        // but in ShaderGraph, we don't evaluate/set all input ports when the values are not used by the pass.
        // (In the material with the inspector UI, unused values were still normally set for all passes, here we
        // don't, this saves compilation time, but these should always be pruned by compilation anyways).
        // To prevent warnings, we disable our ModifyBakedDiffuseLighting() callback, while still leaving the
        // call to PostInitBuiltinData() here along with avoiding putting SHADERPASS dependencies directly in
        // StackLit.hlsl.
        #define DISABLE_MODIFY_BAKED_DIFFUSE_LIGHTING
    #endif

    // Dots Instancing
    $splice(DotsInstancingOptions)

    $splice(HybridV1InjectedBuiltinProperties)

    // Includes
    $splice(PreGraphIncludes)

    // Used by SceneSelectionPass
    int _ObjectId;
    int _PassValue;

    // --------------------------------------------------
    // Structs and Packing

    $splice(PassStructs)

    $splice(InterpolatorPack)

    // --------------------------------------------------
    // Graph

    //-------------------------------------------------------------------------------------
    // Graph generated code
    //
    // Note: the constant buffer is declared here, and we manually add
    // debug properties in the master node if debug is enabled.
    // These are in turn used in StackLit.hlsl, so we need the cbuffer declaration before 
    // including Material.hlsl.
    // TODO:
    // For now, we still splice the Graph here, and debug mode won't work, as we need to
    // splice the CBUFFER before lighting.hlsl (and thus material.hlsl), but the dependency
    // chain of ShaderGraphFunctions.hlsl (on which the graph generated code depends) prevent
    // us from doing that (eg it depends on the include-unguarded BuiltinUtilities which
    // depends itself on lighting.hlsl for the SH sampling)
    //-------------------------------------------------------------------------------------

    // Graph Properties
    $splice(GraphProperties)

    // Graph Functions
    $splice(GraphFunctions)

    // Graph Vertex
    $splice(GraphVertex)
    
    // Graph Pixel
    $splice(GraphPixel)

    // --------------------------------------------------
    // Build Graph Inputs

    $features.graphVertex:  $include("VertexAnimation.template.hlsl")
    $features.graphPixel:   $include("SharedCode.template.hlsl")

    // --------------------------------------------------
    // Build Surface Data

    void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData)
    {
        // setup defaults -- these are used if the graph doesn't output a value
        ZERO_INITIALIZE(SurfaceData, surfaceData);

        $CoatMaskOne: surfaceData.coatMask = 1.0;

        // Copy graph values to surfaceData, if defined
        $SurfaceDescription.BaseColor:                 surfaceData.baseColor =                surfaceDescription.BaseColor;
        $SurfaceDescription.SubsurfaceMask:            surfaceData.subsurfaceMask =           surfaceDescription.SubsurfaceMask;
        $SurfaceDescription.Thickness:                 surfaceData.thickness =                surfaceDescription.Thickness;
        $SurfaceDescription.DiffusionProfileHash:      surfaceData.diffusionProfileHash =     asuint(surfaceDescription.DiffusionProfileHash);
        $SurfaceDescription.IridescenceMask:           surfaceData.iridescenceMask =          surfaceDescription.IridescenceMask;
        $SurfaceDescription.IridescenceThickness:      surfaceData.iridescenceThickness =     surfaceDescription.IridescenceThickness;
        $SurfaceDescription.IridescenceCoatFixupTIR:   surfaceData.iridescenceCoatFixupTIR =  surfaceDescription.IridescenceCoatFixupTIR;
        $SurfaceDescription.IridescenceCoatFixupTIRClamp: surfaceData.iridescenceCoatFixupTIRClamp =  surfaceDescription.IridescenceCoatFixupTIRClamp;
        $SurfaceDescription.SpecularColor:             surfaceData.specularColor =            surfaceDescription.SpecularColor;
        $SurfaceDescription.DielectricIor:             surfaceData.dielectricIor =            surfaceDescription.DielectricIor;
        $SurfaceDescription.Metallic:                  surfaceData.metallic =                 surfaceDescription.Metallic;
        $SurfaceDescription.SmoothnessA:               surfaceData.perceptualSmoothnessA =    surfaceDescription.SmoothnessA;
        $SurfaceDescription.SmoothnessB:               surfaceData.perceptualSmoothnessB =    surfaceDescription.SmoothnessB;
        $SurfaceDescription.AmbientOcclusion:          surfaceData.ambientOcclusion =         surfaceDescription.AmbientOcclusion;
        //TODO: if custom external values are wanted, we would ideally need one SO value per lobe.
        $SurfaceDescription.SpecularOcclusion:         surfaceData.specularOcclusionCustomInput = surfaceDescription.SpecularOcclusion;
        $SurfaceDescription.SOConeFixupVisibilityThreshold: surfaceData.soFixupVisibilityRatioThreshold = surfaceDescription.SOConeFixupVisibilityThreshold;
        $SurfaceDescription.SOConeFixupStrength:            surfaceData.soFixupStrengthFactor =           surfaceDescription.SOConeFixupStrength;
        $SurfaceDescription.SOConeFixupMaxAddedRoughness:   surfaceData.soFixupMaxAddedRoughness =        surfaceDescription.SOConeFixupMaxAddedRoughness;

        $SurfaceDescription.AnisotropyA:               surfaceData.anisotropyA =              surfaceDescription.AnisotropyA;
        $SurfaceDescription.AnisotropyB:               surfaceData.anisotropyB =              surfaceDescription.AnisotropyB;
        $SurfaceDescription.CoatSmoothness:            surfaceData.coatPerceptualSmoothness = surfaceDescription.CoatSmoothness;
        $SurfaceDescription.CoatMask:                  surfaceData.coatMask =                 surfaceDescription.CoatMask;
        $SurfaceDescription.CoatIor:                   surfaceData.coatIor =                  surfaceDescription.CoatIor;
        $SurfaceDescription.CoatThickness:             surfaceData.coatThickness =            surfaceDescription.CoatThickness;
        $SurfaceDescription.CoatExtinction:            surfaceData.coatExtinction =           surfaceDescription.CoatExtinction;
        $SurfaceDescription.LobeMix:                   surfaceData.lobeMix =                  surfaceDescription.LobeMix;
        $SurfaceDescription.Haziness:                  surfaceData.haziness =                 surfaceDescription.Haziness;
        $SurfaceDescription.HazeExtent:                surfaceData.hazeExtent =               surfaceDescription.HazeExtent;
        // Note: we don't know yet if we put 1.0 in surfaceData.hazyGlossMaxDielectricF0 or the graph provided value:
        //$SurfaceDescription.HazyGlossMaxDielectricF0:  surfaceData.hazyGlossMaxDielectricF0 = surfaceDescription.HazyGlossMaxDielectricF0;

        // These static material feature allow compile time optimization
        surfaceData.materialFeatures = MATERIALFEATUREFLAGS_STACK_LIT_STANDARD;
        #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_SPECULAR_COLOR;
        #endif
        #ifdef _MATERIAL_FEATURE_DUAL_SPECULAR_LOBE
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_DUAL_SPECULAR_LOBE;
        #endif
        #ifdef _MATERIAL_FEATURE_HAZY_GLOSS
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_HAZY_GLOSS;
        #endif
        #ifdef _MATERIAL_FEATURE_ANISOTROPY
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_ANISOTROPY;
        #endif
        #ifdef _MATERIAL_FEATURE_COAT
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_COAT;
        #endif
        #ifdef _MATERIAL_FEATURE_COAT_NORMALMAP
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_COAT_NORMAL_MAP;
        #endif
        #ifdef _MATERIAL_FEATURE_IRIDESCENCE
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_IRIDESCENCE;
        #endif
        #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_SUBSURFACE_SCATTERING;
        #endif
        #ifdef _MATERIAL_FEATURE_TRANSMISSION
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_STACK_LIT_TRANSMISSION;
        #endif

        #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
            // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
            $Specular.EnergyConserving: surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
        #endif

        #ifdef _MATERIAL_FEATURE_HAZY_GLOSS
            surfaceData.hazyGlossMaxDielectricF0 = 1.0;
            $CapHazinessIfNotMetallic: surfaceData.hazyGlossMaxDielectricF0 = surfaceDescription.HazyGlossMaxDielectricF0;
            // ...no need for the SurfaceDescription.HazyGlossMaxDielectricF0: predicate,
            // the CapHazinessIfNotMetallic: predicate is only active if the pass wants the PixelShaderSlot HazyGlossMaxDielectricF0
            // and if masterNode.capHazinessWrtMetallic.isOn:, the later should ensure we're in hazygloss mode and thus,
            // the masterNode has the HazyGlossMaxDielectricF0 material slot added.
        #endif

        //
        // Setup all surfaceData normals: .normalWS, .bentNormalWS, .tangentWS, .coatNormalWS, .geomNormalWS
        //

        #ifdef _DOUBLESIDED_ON
            float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
        #else
            float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
        #endif

        surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];

        // normal delivered to master node
        float3 normalSrc = float3(0.0f, 0.0f, 1.0f);
        $SurfaceDescription.Normal: normalSrc = surfaceDescription.Normal;

        // compute world space normal
        #if _NORMAL_DROPOFF_TS
            GetNormalWS(fragInputs, normalSrc, surfaceData.normalWS, doubleSidedConstants);
        #elif _NORMAL_DROPOFF_OS
            surfaceData.normalWS = TransformObjectToWorldNormal(normalSrc);
        #elif _NORMAL_DROPOFF_WS
            surfaceData.normalWS = normalSrc;
        #endif

        surfaceData.coatNormalWS = surfaceData.geomNormalWS;
        $Material.CoatNormal: GetNormalWS(fragInputs, surfaceDescription.CoatNormal, surfaceData.coatNormalWS, doubleSidedConstants);

        // surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);
        // ...We don't need to normalize if we're going to call Orthonormalize anyways as long as
        // surfaceData.normalWS is normalized:
        surfaceData.tangentWS = (fragInputs.tangentToWorld[0].xyz); // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        $Tangent: surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);

        surfaceData.bentNormalWS = float3(0.0, 0.0, 0.0); // Initialise bentNormalWS before decal to keep compiler quiet, will be override after decal.

        #if HAVE_DECALS
            if (_EnableDecals)
            {
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, surfaceDescription.Alpha);
                ApplyDecalToSurfaceData(decalSurfaceData, surfaceData);
            }
        #endif

        surfaceData.bentNormalWS = surfaceData.normalWS;
        $BentNormal: GetNormalWS(fragInputs, surfaceDescription.BentNormal, surfaceData.bentNormalWS, doubleSidedConstants);

        surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

        //
        // SpecularAA
        //

        // TODO Note: specular occlusion that uses bent normals should also use filtering, although the visibility model is not a
        // specular lobe with roughness but a cone with solid angle determined by the ambient occlusion so this is an even more
        // empirical hack (with visibility modelled by a single circular region in direction space)
        // Intuitively, an increase of variance should enlarge (possible) visibility and thus diminish the occlusion
        // (enlarge the visibility cone). This goes in hand with the softer BSDF specular lobe.

        // Note that when using the Hazy Gloss parametrization, the user has no direct control on smoothnessB, and
        // surfaceData.perceptualSmoothnessB will be 0 in that case.
        // Conceptually, in that mode smoothnessB now depends on hazeExtent and smoothnessA only, and hazeExtent is
        // a perceptual control in that "smoothnessB from smoothnessA" dependency (it will also influence lobeMix and the new
        // f0 for the base layer precisely via smoothnessB). Finally, in that parametrization, smoothnessB is always <= smoothnessA.
        // It thus makes sense to only modify smoothnessA while doing SpecularAA, the hazemapping takes care of the rest.
        // The compiler should prune out our calculations for surfaceData.perceptualSmoothnessB in that case since it will never
        // be read before being overwritten later.

        float geometricVariance = 0.0;
    #if !defined(SHADER_STAGE_RAY_TRACING)
        // Note Specular.AA: or Specular.GeometricAA: guarantees surfaceDescription has SpecularAAScreenSpaceVariance and SpecularAAThreshold.
        $Specular.GeometricAA: geometricVariance = GeometricNormalVariance(fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance);
    #endif
        // TODO: Handle normal map filtering
        // Also handle texture normal filtering when we have the proper operator nodes and can thus have the variance port
        // in our master node:
        float textureFilteringVariance = 0.0;
        //$NormalTexturtextureFiltering: textureFilteringVariance = DecodeVariance(surfaceDescription.CodedNormalVarianceMeasure);
        float coatTextureFilteringVariance = 0.0;
        //$NormalTexturtextureFiltering: coatTextureFilteringVariance = DecodeVariance(surfaceDescription.CodedCoatNormalVarianceMeasure);

        #if defined(DEBUG_DISPLAY)
            if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
            {
                // TODO: need to update mip info
            }

            // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
            // as it can modify attributes used for static lighting
            ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
        #endif

        $Specular.AA: surfaceData.perceptualSmoothnessA = NormalFiltering(surfaceData.perceptualSmoothnessA, geometricVariance + textureFilteringVariance, surfaceDescription.SpecularAAThreshold);
        $Specular.AA: surfaceData.perceptualSmoothnessB = NormalFiltering(surfaceData.perceptualSmoothnessB, geometricVariance + textureFilteringVariance, surfaceDescription.SpecularAAThreshold);
        $Specular.AA: surfaceData.coatPerceptualSmoothness = NormalFiltering(surfaceData.coatPerceptualSmoothness, geometricVariance + coatTextureFilteringVariance, surfaceDescription.SpecularAAThreshold);
    }

    void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
    {
        #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
            LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
        #endif

        #ifdef _DOUBLESIDED_ON
            float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
        #else
            float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
        #endif

        ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

        SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);

        // Perform alpha test very early to save performance (a killed pixel will not sample textures)
        // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
        #ifdef _ALPHATEST_ON
            $DoAlphaTest: GENERIC_ALPHA_TEST(surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold);
        #endif

        $DepthOffset: ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);

        BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);

        // Builtin Data
        // For back lighting we use the oposite vertex normal 
        InitBuiltinData(posInput, surfaceDescription.Alpha, surfaceData.bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

        #ifdef _ALPHATEST_ON
            // Used for sharpening by alpha to mask
            $DoAlphaTest: builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
        #endif
        
        // override sampleBakedGI:
        $LightingGI: builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
        $BackLightingGI: builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;

        $SurfaceDescription.Emission: builtinData.emissiveColor = surfaceDescription.Emission;

        $DepthOffset: builtinData.depthOffset = surfaceDescription.DepthOffset;

        #if (SHADERPASS == SHADERPASS_DISTORTION)
            builtinData.distortion = surfaceDescription.Distortion;
            builtinData.distortionBlur = surfaceDescription.DistortionBlur;
        #else
            builtinData.distortion = float2(0.0, 0.0);
            builtinData.distortionBlur = 0.0;
        #endif

        PostInitBuiltinData(V, posInput, surfaceData, builtinData);
    }

    // --------------------------------------------------
    // Main

    $splice(PostGraphIncludes)

    ENDHLSL
}

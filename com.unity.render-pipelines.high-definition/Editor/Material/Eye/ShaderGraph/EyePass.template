Pass
{
    $splice(PassName)
    Tags 
    { 
        $splice(LightMode)
    }

    // Render State
    $splice(RenderState)

    // Debug
    $splice(Debug)
    
    // --------------------------------------------------
    // Pass

    HLSLPROGRAM

    // Pragmas
    $splice(PassPragmas)

    // Keywords
    $splice(PassKeywords)
    $splice(GraphKeywords)

    // Defines
    $Material.EyeCinematic:             #define _MATERIAL_FEATURE_EYE_CINEMATIC 1
    $Material.SubsurfaceScattering:     #define _MATERIAL_FEATURE_SUBSURFACE_SCATTERING 1
    $SpecularOcclusionFromAO:           #define _SPECULAR_OCCLUSION_FROM_AO 1
    $SpecularOcclusionFromAOBentNormal: #define _SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL 1
    $SpecularOcclusionCustom:           #define _SPECULAR_OCCLUSION_CUSTOM 1
    $DisableDecals:                     #define _DISABLE_DECALS 1
    $DisableSSR:                        #define _DISABLE_SSR 1
    $AddPrecomputedVelocity:            #define _ADD_PRECOMPUTED_VELOCITY
    $DepthOffset:                       #define _DEPTHOFFSET_ON 1
    $BlendMode.PreserveSpecular:        #define _BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
    $AttributesMesh.normalOS:           #define ATTRIBUTES_NEED_NORMAL
    $AttributesMesh.tangentOS:          #define ATTRIBUTES_NEED_TANGENT
    $AttributesMesh.uv0:                #define ATTRIBUTES_NEED_TEXCOORD0
    $AttributesMesh.uv1:                #define ATTRIBUTES_NEED_TEXCOORD1
    $AttributesMesh.uv2:                #define ATTRIBUTES_NEED_TEXCOORD2
    $AttributesMesh.uv3:                #define ATTRIBUTES_NEED_TEXCOORD3
    $AttributesMesh.color:              #define ATTRIBUTES_NEED_COLOR
    $VaryingsMeshToPS.positionRWS:      #define VARYINGS_NEED_POSITION_WS
    $VaryingsMeshToPS.normalWS:         #define VARYINGS_NEED_TANGENT_TO_WORLD
    $VaryingsMeshToPS.texCoord0:        #define VARYINGS_NEED_TEXCOORD0
    $VaryingsMeshToPS.texCoord1:        #define VARYINGS_NEED_TEXCOORD1
    $VaryingsMeshToPS.texCoord2:        #define VARYINGS_NEED_TEXCOORD2
    $VaryingsMeshToPS.texCoord3:        #define VARYINGS_NEED_TEXCOORD3
    $VaryingsMeshToPS.color:            #define VARYINGS_NEED_COLOR
    $VaryingsMeshToPS.cullFace:         #define VARYINGS_NEED_CULLFACE
    $features.graphVertex:              #define HAVE_MESH_MODIFICATION
    $splice(GraphDefines)

    // If we use subsurface scattering, enable output split lighting (for forward pass)
    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
        #define OUTPUT_SPLIT_LIGHTING
    #endif

    #ifndef DEBUG_DISPLAY
        // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
        // Don't do it with debug display mode as it is possible there is no depth prepass in this case
        #if !defined(_SURFACE_TYPE_TRANSPARENT) && defined(_ALPHATEST)
            #if SHADERPASS == SHADERPASS_FORWARD
            #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
            #elif SHADERPASS == SHADERPASS_GBUFFER
            #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
            #endif
        #endif
    #endif

    // We need isFontFace when using double sided
    #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
        #define VARYINGS_NEED_CULLFACE
    #endif

    // Dots Instancing
    $splice(DotsInstancingOptions)

    $splice(HybridV1InjectedBuiltinProperties)

    // Includes
    $splice(PreGraphIncludes)

    // Used by SceneSelectionPass
    int _ObjectId;
    int _PassValue;
    
    // --------------------------------------------------
    // Structs and Packing

    $splice(PassStructs)

    $splice(InterpolatorPack)

    // --------------------------------------------------
    // Graph

    // Graph Properties
    $splice(GraphProperties)

    // Graph Functions
    $splice(GraphFunctions)

    // Graph Vertex
    $splice(GraphVertex)
    
    // Graph Pixel
    $splice(GraphPixel)

    // --------------------------------------------------
    // Build Graph Inputs

    $features.graphVertex:  $include("VertexAnimation.template.hlsl")
    $features.graphPixel:   $include("SharedCode.template.hlsl")

    // --------------------------------------------------
    // Build Surface Data

    void ApplyDecalToSurfaceData(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData)
    {
        // using alpha compositing https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch23.html
        if (decalSurfaceData.HTileMask & DBUFFERHTILEBIT_DIFFUSE)
        {
            surfaceData.baseColor.xyz = surfaceData.baseColor.xyz * decalSurfaceData.baseColor.w + decalSurfaceData.baseColor.xyz;
        }

        if (decalSurfaceData.HTileMask & DBUFFERHTILEBIT_NORMAL)
        {
            surfaceData.normalWS.xyz = normalize(surfaceData.normalWS.xyz * decalSurfaceData.normalWS.w + decalSurfaceData.normalWS.xyz);
        }

        if (decalSurfaceData.HTileMask & DBUFFERHTILEBIT_MASK)
        {
            #ifdef DECALS_4RT // only smoothness in 3RT mode
                // Don't apply any metallic modification
                surfaceData.ambientOcclusion = surfaceData.ambientOcclusion * decalSurfaceData.MAOSBlend.y + decalSurfaceData.mask.y;
            #endif

            surfaceData.perceptualSmoothness = surfaceData.perceptualSmoothness * decalSurfaceData.mask.w + decalSurfaceData.mask.z;
        }
    }

    void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
    {
        // setup defaults -- these are used if the graph doesn't output a value
        ZERO_INITIALIZE(SurfaceData, surfaceData);

        // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
        // however specularOcclusion can come from the graph, so need to be init here so it can be override.
        surfaceData.specularOcclusion = 1.0;

	    // copy across graph values, if defined
        $SurfaceDescription.Albedo:                     surfaceData.baseColor =                 surfaceDescription.Albedo;
        $SurfaceDescription.SpecularOcclusion:          surfaceData.specularOcclusion =         surfaceDescription.SpecularOcclusion;
        $SurfaceDescription.Smoothness:                 surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        $SurfaceDescription.Occlusion:                  surfaceData.ambientOcclusion            = surfaceDescription.Occlusion;
        $SurfaceDescription.IOR:                        surfaceData.IOR                         = surfaceDescription.IOR;
        $SurfaceDescription.Mask:                       surfaceData.mask =                      surfaceDescription.Mask;
        $SurfaceDescription.DiffusionProfileHash:       surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);

        // These static material feature allow compile time optimization
        surfaceData.materialFeatures = 0;

        #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_EYE_SUBSURFACE_SCATTERING;
        #endif

        #ifdef _MATERIAL_FEATURE_EYE_CINEMATIC
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_EYE_CINEMATIC;
        #endif

        #ifdef _DOUBLESIDED_ON
            float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
        #else
            float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
        #endif

        // Note: It is assume that user in the shader graph provide a normal map with flat normal at the Cornea location
        // and an iris normal map. Same for smoothness, IOR and for subsurface mask. So we don't do any operation here.

        $SurfaceDescription.SubsurfaceMask: surfaceData.subsurfaceMask = surfaceDescription.SubsurfaceMask;

        // tangent-space normal
        float3 normalTS = float3(0.0f, 0.0f, 1.0f);
        $SurfaceDescription.Normal: normalTS = surfaceDescription.Normal;

        // compute world space normal
        GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

        float3 irisNormalTS = normalTS; // By default Iris normal is same as normal
        $SurfaceDescription.IrisNormal: irisNormalTS = surfaceDescription.IrisNormal;

         // compute world space normal
        GetNormalWS(fragInputs, irisNormalTS, surfaceData.irisNormalWS, doubleSidedConstants);

        surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];

        #if HAVE_DECALS
            if (_EnableDecals)
            {
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, surfaceDescription.Alpha);
                ApplyDecalToSurfaceData(decalSurfaceData, surfaceData);
            }
        #endif

        bentNormalWS = surfaceData.irisNormalWS; // Use diffuse normal (iris) to fetch GI, unless users provide explicit bent normal (not affected by decals)
        $BentNormal: GetNormalWS(fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants);
       
        #ifdef DEBUG_DISPLAY
            if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
            {
                // TODO: need to update mip info
            }

            // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
            // as it can modify attribute use for static lighting
            ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
        #endif

        #if defined(_SPECULAR_OCCLUSION_CUSTOM)
            // Just use the value passed through via the slot (not active otherwise)
        #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
            // If we have bent normal and ambient occlusion, process a specular occlusion
            surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
        #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
            surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
        #endif
    }

    void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
    {
        #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
            LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
        #endif

        #ifdef _DOUBLESIDED_ON
            float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
        #else
            float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
        #endif

        ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

        SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);

        // Perform alpha test very early to save performance (a killed pixel will not sample textures)
        // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
        #ifdef _ALPHATEST_ON
            $DoAlphaTest: DoAlphaTest(surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold);
        #endif

        $DepthOffset: ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);

        float3 bentNormalWS;
        BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);

        // Builtin Data
        // For back lighting we use the oposite vertex normal
        InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

        #ifdef _ALPHATEST_ON
            // Used for sharpening by alpha to mask
            $DoAlphaTest: builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
        #endif

        // override sampleBakedGI:
        $LightingGI: builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
        $BackLightingGI: builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;

        $DepthOffset: builtinData.depthOffset = surfaceDescription.DepthOffset;

        $SurfaceDescription.Emission: builtinData.emissiveColor = surfaceDescription.Emission;

        PostInitBuiltinData(V, posInput, surfaceData, builtinData);
    }

    // --------------------------------------------------
    // Main

    $splice(PostGraphIncludes)

    ENDHLSL
}

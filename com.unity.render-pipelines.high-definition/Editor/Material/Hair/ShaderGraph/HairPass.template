Pass
{
    $splice(PassName)
    Tags
    {
        $splice(LightMode)
    }

    // Render State
    $splice(RenderState)

    // Debug
    $splice(Debug)

    // --------------------------------------------------
    // Pass

    HLSLPROGRAM

    // Pragmas
    $splice(PassPragmas)

    // Keywords
    $splice(PassKeywords)
    $splice(GraphKeywords)

    // Defines
    $Material.KajiyaKay:                #define _MATERIAL_FEATURE_HAIR_KAJIYA_KAY 1
    $Occlusion:                         #define _OCCLUSION 1
    $SpecularOcclusionFromAO:           #define _SPECULAR_OCCLUSION_FROM_AO 1
    $SpecularOcclusionFromAOBentNormal: #define _SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL 1
    $SpecularOcclusionCustom:           #define _SPECULAR_OCCLUSION_CUSTOM 1
    $Specular.AA:                       #define _ENABLE_GEOMETRIC_SPECULAR_AA 1
    $DisableDecals:                     #define _DISABLE_DECALS 1
    $DisableSSR:                        #define _DISABLE_SSR 1
    $AddPrecomputedVelocity:            #define _ADD_PRECOMPUTED_VELOCITY
    $TransparentWritesMotionVec:        #define _TRANSPARENT_WRITES_MOTION_VEC 1
    $DepthOffset:                       #define _DEPTHOFFSET_ON 1
    $UseLightFacingNormal:              #define _USE_LIGHT_FACING_NORMAL 1
    $BlendMode.PreserveSpecular:        #define _BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
    $AttributesMesh.normalOS:           #define ATTRIBUTES_NEED_NORMAL
    $AttributesMesh.tangentOS:          #define ATTRIBUTES_NEED_TANGENT
    $AttributesMesh.uv0:                #define ATTRIBUTES_NEED_TEXCOORD0
    $AttributesMesh.uv1:                #define ATTRIBUTES_NEED_TEXCOORD1
    $AttributesMesh.uv2:                #define ATTRIBUTES_NEED_TEXCOORD2
    $AttributesMesh.uv3:                #define ATTRIBUTES_NEED_TEXCOORD3
    $AttributesMesh.color:              #define ATTRIBUTES_NEED_COLOR
    $VaryingsMeshToPS.positionRWS:      #define VARYINGS_NEED_POSITION_WS
    $VaryingsMeshToPS.normalWS:         #define VARYINGS_NEED_TANGENT_TO_WORLD
    $VaryingsMeshToPS.texCoord0:        #define VARYINGS_NEED_TEXCOORD0
    $VaryingsMeshToPS.texCoord1:        #define VARYINGS_NEED_TEXCOORD1
    $VaryingsMeshToPS.texCoord2:        #define VARYINGS_NEED_TEXCOORD2
    $VaryingsMeshToPS.texCoord3:        #define VARYINGS_NEED_TEXCOORD3
    $VaryingsMeshToPS.color:            #define VARYINGS_NEED_COLOR
    $VaryingsMeshToPS.cullFace:         #define VARYINGS_NEED_CULLFACE
    $features.graphVertex:              #define HAVE_MESH_MODIFICATION
    $splice(GraphDefines)

    #ifndef DEBUG_DISPLAY
        // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
        // Don't do it with debug display mode as it is possible there is no depth prepass in this case
        #if !defined(_SURFACE_TYPE_TRANSPARENT) && defined(_ALPHATEST)
            #if SHADERPASS == SHADERPASS_FORWARD
            #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
            #elif SHADERPASS == SHADERPASS_GBUFFER
            #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
            #endif
        #endif
    #endif

    // We need isFontFace when using double sided
    #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
        #define VARYINGS_NEED_CULLFACE
    #endif

    //translate transparent motion vector define
    #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
        #define _WRITE_TRANSPARENT_MOTION_VECTOR
    #endif

    // Dots Instancing
    $splice(DotsInstancingOptions)

    $splice(HybridV1InjectedBuiltinProperties)

    // Includes
    $splice(PreGraphIncludes)

    // Used by SceneSelectionPass
    int _ObjectId;
    int _PassValue;

    // --------------------------------------------------
    // Structs and Packing

    $splice(PassStructs)

    $splice(InterpolatorPack)

    // --------------------------------------------------
    // Graph

    // Graph Properties
    $splice(GraphProperties)

    // Graph Functions
    $splice(GraphFunctions)

    // Graph Vertex
    $splice(GraphVertex)

    // Graph Pixel
    $splice(GraphPixel)

    // --------------------------------------------------
    // Build Graph Inputs

    $features.graphVertex:  $include("VertexAnimation.template.hlsl")
    $features.graphPixel:   $include("SharedCode.template.hlsl")

    // --------------------------------------------------
    // Build Surface Data

    void ApplyDecalToSurfaceData(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData)
    {
        // using alpha compositing https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch23.html
        if (decalSurfaceData.HTileMask & DBUFFERHTILEBIT_DIFFUSE)
        {
            surfaceData.diffuseColor.xyz = surfaceData.diffuseColor.xyz * decalSurfaceData.baseColor.w + decalSurfaceData.baseColor.xyz;
        }

        if (decalSurfaceData.HTileMask & DBUFFERHTILEBIT_NORMAL)
        {
            surfaceData.normalWS.xyz = normalize(surfaceData.normalWS.xyz * decalSurfaceData.normalWS.w + decalSurfaceData.normalWS.xyz);
        }

        if (decalSurfaceData.HTileMask & DBUFFERHTILEBIT_MASK)
        {
            #ifdef DECALS_4RT // only smoothness in 3RT mode
                // Don't apply any metallic modification
                surfaceData.ambientOcclusion = surfaceData.ambientOcclusion * decalSurfaceData.MAOSBlend.y + decalSurfaceData.mask.y;
            #endif

            surfaceData.perceptualSmoothness = surfaceData.perceptualSmoothness * decalSurfaceData.mask.w + decalSurfaceData.mask.z;
        }
    }

    void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
    {
        // setup defaults -- these are used if the graph doesn't output a value
        ZERO_INITIALIZE(SurfaceData, surfaceData);

        // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
        // however specularOcclusion can come from the graph, so need to be init here so it can be override.
        surfaceData.specularOcclusion = 1.0;

        // copy across graph values, if defined
        $SurfaceDescription.BaseColor:                      surfaceData.diffuseColor =                  surfaceDescription.BaseColor;
        $SurfaceDescription.SpecularOcclusion:              surfaceData.specularOcclusion =             surfaceDescription.SpecularOcclusion;
        $SurfaceDescription.Smoothness:                     surfaceData.perceptualSmoothness =          surfaceDescription.Smoothness;
        $SurfaceDescription.Occlusion:                      surfaceData.ambientOcclusion =              surfaceDescription.Occlusion;
        $SurfaceDescription.Transmittance:                  surfaceData.transmittance =                 surfaceDescription.Transmittance;
        $SurfaceDescription.RimTransmissionIntensity:       surfaceData.rimTransmissionIntensity =      surfaceDescription.RimTransmissionIntensity;

        $SurfaceDescription.SpecularTint:                   surfaceData.specularTint =                  surfaceDescription.SpecularTint;
        $SurfaceDescription.SpecularShift:                  surfaceData.specularShift =                 surfaceDescription.SpecularShift;

        $SurfaceDescription.SecondarySmoothness:            surfaceData.secondaryPerceptualSmoothness = surfaceDescription.SecondarySmoothness;
        $SurfaceDescription.SecondarySpecularTint:          surfaceData.secondarySpecularTint =         surfaceDescription.SecondarySpecularTint;
        $SurfaceDescription.SecondarySpecularShift:         surfaceData.secondarySpecularShift =        surfaceDescription.SecondarySpecularShift;

        // These static material feature allow compile time optimization
        surfaceData.materialFeatures = 0;

        // Transform the preprocess macro into a material feature
        #ifdef _MATERIAL_FEATURE_HAIR_KAJIYA_KAY
            surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_HAIR_KAJIYA_KAY;
        #endif

        #ifdef _DOUBLESIDED_ON
            float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
        #else
            float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
        #endif

        // For a typical Unity quad, you have tangent vectors pointing to the right (X axis),
        // and bitangent vectors pointing up (Y axis).
        // The current hair setup uses mesh cards (e.g. quads).
        // Hair is usually painted top-down, from the root to the tip.
        // Therefore, DefaultHairStrandTangent = -MeshCardBitangent.
        // Both the SurfaceData and the BSDFData store the hair tangent
        // (which represents the hair strand direction, root to tip).
        surfaceData.hairStrandDirectionWS = -fragInputs.tangentToWorld[1].xyz;
        // The hair strand direction texture contains tangent-space vectors.
        // We use the same convention for the texture, which means that
        // to get the default behavior (DefaultHairStrandTangent = -MeshCardBitangent),
        // the artist has to paint (0, -1, 0).
        // TODO: pending artist feedback...
        $HairStrandDirection: surfaceData.hairStrandDirectionWS = TransformTangentToWorld(surfaceDescription.HairStrandDirection, fragInputs.tangentToWorld);
        // The original Kajiya-Kay BRDF model expects an orthonormal TN frame.
        // Since we use the tangent shift hack (http://web.engr.oregonstate.edu/~mjb/cs519/Projects/Papers/HairRendering.pdf),
        // we may as well not bother to orthonormalize anymore.
        // The tangent should still be a unit vector, though.
        surfaceData.hairStrandDirectionWS = normalize(surfaceData.hairStrandDirectionWS);

        // Small digression about hair and normals [NOTE-HAIR-NORMALS].
        // Since a hair strand is (approximately) a cylinder,
        // there is a whole "circle" of normals corresponding to any given tangent vector.
        // Since we use the Kajiya-Kay shading model,
        // the way we compute and use normals is a bit complicated.
        // We need 4 separate sets of normals.
        // For shadow bias, we use the geometric normal.
        // For direct lighting, we either (conceptually) use the "light-facing" normal
        // or the user-provided normal.
        // For reflected GI (light probes and reflection probes), we use the normal most aligned
        // with the view vector (the "view-facing" normal), or the user-provided normal.
        // We reflect this normal for transmitted GI.
        // For the highlight shift hack (along the tangent), we use the user-provided normal.

        surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];

        // tangent-space normal
        float3 normalTS = float3(0.0f, 0.0f, 1.0f);
        $SurfaceDescription.NormalTS: normalTS = surfaceDescription.NormalTS;

        // compute world space (user-provided) normal
        GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

        #if HAVE_DECALS
            if (_EnableDecals)
            {
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, surfaceDescription.Alpha);
                ApplyDecalToSurfaceData(decalSurfaceData, surfaceData);
            }
        #endif

        #if (_USE_LIGHT_FACING_NORMAL)
            float3 viewFacingNormalWS = ComputeViewFacingNormal(V, surfaceData.hairStrandDirectionWS);
            float3 N = viewFacingNormalWS; // Not affected by decals
        #else
            float3 N = surfaceData.normalWS;
        #endif

        bentNormalWS = N;

        $BentNormal: GetNormalWS(fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants);
        
        #ifdef DEBUG_DISPLAY
            if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
            {
                // TODO: need to update mip info
            }

            // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
            // as it can modify attribute use for static lighting
            ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
        #endif

        #if defined(_SPECULAR_OCCLUSION_CUSTOM)
            // Just use the value passed through via the slot (not active otherwise)
        #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
            // If we have bent normal and ambient occlusion, process a specular occlusion
            surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, N, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
        #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
            surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(N, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
        #endif

        #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
            surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
        #endif
    }

    void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
    {
        #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
            LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
        #endif

        #ifdef _DOUBLESIDED_ON
            float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
        #else
            float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
        #endif

        ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

        SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);

        // Perform alpha test very early to save performance (a killed pixel will not sample textures)
        // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
        #ifdef _ALPHATEST_ON
            $DoAlphaTest:         GENERIC_ALPHA_TEST(surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold);
            $DoAlphaTestPrepass:  GENERIC_ALPHA_TEST(surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdDepthPrepass);
            $DoAlphaTestPostpass: GENERIC_ALPHA_TEST(surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdDepthPostpass);
            $DoAlphaTestShadow:   GENERIC_ALPHA_TEST(surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
        #endif

        $DepthOffset: ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);

        float3 bentNormalWS;
        BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);

        // Builtin Data
        // For back lighting we use the oposite vertex normal
        InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

        #ifdef _ALPHATEST_ON
            // Used for sharpening by alpha to mask
            $DoAlphaTest:         builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
            $DoAlphaTestPrepass:  builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThresholdDepthPrepass;
            $DoAlphaTestPostpass: builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThresholdDepthPostpass;
            $DoAlphaTestShadow:   builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThresholdShadow;
        #endif

        // override sampleBakedGI:
        $LightingGI: builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
        $BackLightingGI: builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;

        $DepthOffset: builtinData.depthOffset = surfaceDescription.DepthOffset;

        $SurfaceDescription.Emission: builtinData.emissiveColor = surfaceDescription.Emission;

        PostInitBuiltinData(V, posInput, surfaceData, builtinData);
    }

    // --------------------------------------------------
    // Main

    $splice(PostGraphIncludes)

    ENDHLSL
}

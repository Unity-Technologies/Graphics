$splice(PassPragmas)

#pragma multi_compile _FORCE_DISABLE_TANGENT_STREAM

// TODO: Keywords (shader_feature) incompatible with compute
$splice(GraphKeywords)

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition

#include "Packages/com.unity.render-pipelines.core/Runtime/RenderPipeline/LineRendering/LineRenderingCommon.hlsl"

// --------------------------------------------------
// Defines

#define _WRITE_TRANSPARENT_MOTION_VECTOR

// Attribute
$AttributesMesh.normalOS:                           #define ATTRIBUTES_NEED_NORMAL
$AttributesMesh.tangentOS:                          #define ATTRIBUTES_NEED_TANGENT
$AttributesMesh.uv0:                                #define ATTRIBUTES_NEED_TEXCOORD0
$AttributesMesh.uv1:                                #define ATTRIBUTES_NEED_TEXCOORD1
$AttributesMesh.uv2:                                #define ATTRIBUTES_NEED_TEXCOORD2
$AttributesMesh.uv3:                                #define ATTRIBUTES_NEED_TEXCOORD3
$AttributesMesh.color:                              #define ATTRIBUTES_NEED_COLOR
$AttributesMesh.vertexID:                           #define ATTRIBUTES_NEED_VERTEXID
$VaryingsMeshToPS.positionRWS:                      #define VARYINGS_NEED_POSITION_WS
$VaryingsMeshToPS.positionPredisplacementRWS:       #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
$VaryingsMeshToPS.normalWS:                         #define VARYINGS_NEED_TANGENT_TO_WORLD
$VaryingsMeshToPS.texCoord0:                        #define VARYINGS_NEED_TEXCOORD0
$VaryingsMeshToPS.texCoord1:                        #define VARYINGS_NEED_TEXCOORD1
$VaryingsMeshToPS.texCoord2:                        #define VARYINGS_NEED_TEXCOORD2
$VaryingsMeshToPS.texCoord3:                        #define VARYINGS_NEED_TEXCOORD3
$VaryingsMeshToPS.color:                            #define VARYINGS_NEED_COLOR
$VaryingsMeshToPS.elementToWorld0:                  #define VARYINGS_NEED_ELEMENT_TO_WORLD
$VaryingsMeshToPS.worldToElement0:                  #define VARYINGS_NEED_WORLD_TO_ELEMENT

$features.graphVertex:                              #define HAVE_MESH_MODIFICATION

$SurfaceDescriptionInputs.FaceSign:                 // Define when IsFontFaceNode is included in ShaderGraph
$SurfaceDescriptionInputs.FaceSign:                 #define VARYINGS_NEED_CULLFACE

$VertexDescription.CustomVelocity: #define _ADD_CUSTOM_VELOCITY

$splice(GraphDefines)

#ifndef SHADER_UNLIT
// We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
// VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
    #define VARYINGS_NEED_CULLFACE
#endif
#endif

// -- Graph Properties
$splice(GraphProperties)

// Includes
$splice(PreGraphIncludes)
$splice(GraphIncludes)

// --------------------------------------------------
// Structs and Packing

$splice(PassStructs)

$splice(InterpolatorPack)

// --------------------------------------------------
// Graph

// Graph Functions
$splice(GraphFunctions)

// Graph Vertex
$splice(GraphVertex)

// --------------------------------------------------
// Build Graph Inputs

$features.graphVertex:  $include("Vertex.template.hlsl")

// --------------------------------------------------
// Main

// Required to compile since we have to include the pass.
void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
{
    ZERO_INITIALIZE(SurfaceData, surfaceData);
    ZERO_INITIALIZE(BuiltinData, builtinData);
}

$splice(PostGraphIncludes)

// --------------------------------------------------
// Kernel

#define DECLARE_ATTRIBUTE_BUFFER(attr)     \
    ByteAddressBuffer _VertexBuffer##attr; \
    int _VertexBuffer##attr##Stride;       \
    int _VertexBuffer##attr##Offset;

DECLARE_ATTRIBUTE_BUFFER(Position)
DECLARE_ATTRIBUTE_BUFFER(Normal)
DECLARE_ATTRIBUTE_BUFFER(Tangent)
DECLARE_ATTRIBUTE_BUFFER(Color)
DECLARE_ATTRIBUTE_BUFFER(TexCoord0)
DECLARE_ATTRIBUTE_BUFFER(TexCoord1)
DECLARE_ATTRIBUTE_BUFFER(TexCoord2)
DECLARE_ATTRIBUTE_BUFFER(TexCoord3)
DECLARE_ATTRIBUTE_BUFFER(TexCoord4)
DECLARE_ATTRIBUTE_BUFFER(TexCoord5)
DECLARE_ATTRIBUTE_BUFFER(TexCoord6)
DECLARE_ATTRIBUTE_BUFFER(TexCoord7)
DECLARE_ATTRIBUTE_BUFFER(BlendWeight)
DECLARE_ATTRIBUTE_BUFFER(BlendIndices)

#define LOAD_ATTRIBUTE_FLOAT(attr, i)\
    asfloat(_VertexBuffer##attr.Load((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset))

#define LOAD_ATTRIBUTE_FLOAT3(attr, i)\
    asfloat(_VertexBuffer##attr.Load3((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset))

#define LOAD_ATTRIBUTE_FLOAT4(attr, i)\
    asfloat(_VertexBuffer##attr.Load4((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset))

#define LOAD_ATTRIBUTE_UINT(attr, i)\
    (_VertexBuffer##attr.Load((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset))

#define LOAD_ATTRIBUTE_UINT3(attr, i)\
    (_VertexBuffer##attr.Load3((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset))

#define LOAD_ATTRIBUTE_UINT4(attr, i)\
    (_VertexBuffer##attr.Load4((_VertexBuffer##attr##Stride * i) + _VertexBuffer##attr##Offset)

RWByteAddressBuffer _Vertex0RecordBuffer;
RWByteAddressBuffer _Vertex1RecordBuffer;
RWByteAddressBuffer _Vertex2RecordBuffer;
RWByteAddressBuffer _Vertex3RecordBuffer;

RWByteAddressBuffer _CounterBuffer;

void BuildStrandBasis(uint i, float3 positionOS, out float3 normalOS, out float4 tangentOS)
{
#if !defined(_FORCE_DISABLE_TANGENT_STREAM)
    // TODO: Handle tangent flip
	float3 vertexBitangentOS = normalize(LOAD_ATTRIBUTE_FLOAT4(Tangent, i).xyz);
	tangentOS = float4(normalize(cross(vertexBitangentOS, GetWorldSpaceNormalizeViewDir(positionOS))), 0);
	normalOS = cross(tangentOS.xyz, vertexBitangentOS);
#else
    // Force disable attribute loading for streams that do not exist in the mesh.
    // We need to do it like this instead of #undef ATTRIBUTE_TANGENT etc. because the user shader graph might later override
    // the tangent or normal.
    tangentOS = float4(1, 0, 0, 0);
    normalOS  = float3(0, 0, 1);
#endif
}

int _VertexOffset;

[numthreads(128, 1, 1)]
void VertexSetup (uint3 dispatchThreadID : SV_DispatchThreadID)
{
    const uint i = dispatchThreadID.x;

    if (i >= (uint)_VertexCount)
        return;

    // Construct the input vertex.
    AttributesMesh inputMesh;
    {
        ZERO_INITIALIZE(AttributesMesh, inputMesh);
        inputMesh.positionOS = LOAD_ATTRIBUTE_FLOAT3(Position, i);
#if defined(ATTRIBUTES_NEED_NORMAL) || defined(ATTRIBUTES_NEED_TANGENT)
        BuildStrandBasis(i, inputMesh.positionOS, inputMesh.normalOS, inputMesh.tangentOS);
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD0
        inputMesh.uv0 = LOAD_ATTRIBUTE_FLOAT(TexCoord0, i);
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD1
    //   // Demo team hair package stores the UV in the upper 16 bits.
    //   const uint mask = 0xFFFF << 16;

    //   // Manually decode the UNORM value back into a float.
    //   uint texCoord1 = LOAD_ATTRIBUTE_UINT(TexCoord1, i);

    //   // Mask out the lower bits.
    //   texCoord1 &= mask;

    //   // Retrieve a decimal value.
    //   inputMesh.uv1 = texCoord1 / float(mask);
        inputMesh.uv1 = LOAD_ATTRIBUTE_FLOAT(TexCoord1, i);
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD2
    // TODO
#endif
#ifdef ATTRIBUTES_NEED_TEXCOORD3
    // TODO
#endif
#ifdef ATTRIBUTES_NEED_COLOR
    // TODO
#endif
    }

    AttributesPass inputPass;
    ZERO_INITIALIZE(AttributesPass, inputPass);

    VaryingsType output;
    ZERO_INITIALIZE(VaryingsType, output);

    output.vmesh = VertMesh(inputMesh);
    output = MotionVectorVS_Internal(output, inputMesh, inputPass);

    // Store the clip space position for now (should be every interpolator).
    VertexRecord vertexRecord;
    ZERO_INITIALIZE(VertexRecord, vertexRecord);
    {
        vertexRecord.positionCS = output.vpass.positionCS;

        // Have to manually provide a previous position that will result in a zero length movec for force disable.
        if (unity_MotionVectorsParams.y == 0)
            vertexRecord.previousPositionCS = output.vpass.positionCS;
        else
            vertexRecord.previousPositionCS = output.vpass.previousPositionCS;

#ifdef VARYINGS_NEED_TEXCOORD0
        vertexRecord.texCoord0 = output.vmesh.texCoord0.x;
#endif
#ifdef VARYINGS_NEED_TEXCOORD1
        vertexRecord.texCoord1 = output.vmesh.texCoord1.y;
#endif
#ifdef VARYINGS_NEED_TANGENT_TO_WORLD
        vertexRecord.normalWS  = output.vmesh.normalWS;
        vertexRecord.tangentWS = output.vmesh.tangentWS.xyz;
#endif
    }

    const uint offset = _VertexOffset + i;
    _Vertex0RecordBuffer.Store4(offset << 4, asuint(vertexRecord.positionCS));
    _Vertex1RecordBuffer.Store4(offset << 4, asuint(vertexRecord.previousPositionCS));

#ifdef VARYINGS_NEED_TANGENT_TO_WORLD
    const uint2 encodedN = asuint(PackNormalOctQuadEncode(vertexRecord.normalWS));
    const uint2 encodedT = asuint(PackNormalOctQuadEncode(vertexRecord.tangentWS));
    _Vertex2RecordBuffer.Store4(offset << 4, uint4(encodedN, encodedT));
#endif

#if defined(VARYINGS_NEED_TEXCOORD0) || defined(VARYINGS_NEED_TEXCOORD1)
    _Vertex3RecordBuffer.Store2(8 * offset, asuint(float2(vertexRecord.texCoord0, vertexRecord.texCoord1)));
#endif
}

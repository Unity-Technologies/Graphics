using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace UnityEditor.GraphToolsFoundation.Overdrive
{
    /// <summary>
    /// Graph processing options.
    /// </summary>
    public enum RequestGraphProcessingOptions
    {
        /// <summary>
        /// Process the graph.
        /// </summary>
        Default,

        /// <summary>
        /// Save the graph and process it.
        /// </summary>
        SaveGraph,
    }

    /// <summary>
    /// Helper class for graph processing.
    /// </summary>
    public static class GraphProcessingHelper
    {
        /// <summary>
        /// Processes the graph using the graph processors provided by <see cref="Stencil.GetGraphProcessorContainer"/>.
        /// </summary>
        /// <param name="graphModel">The graph to process.</param>
        /// <param name="changeset">A description of what changed in the graph. If null, the method assumes everything changed.</param>
        /// <param name="options">Graph processing options.</param>
        /// <returns>The results of the graph processing.</returns>
        public static IReadOnlyList<GraphProcessingResult> ProcessGraph(
            IGraphModel graphModel,
            GraphModelStateComponent.Changeset changeset,
            RequestGraphProcessingOptions options)
        {
            var stencil = (Stencil)graphModel?.Stencil;
            if (stencil == null)
                return null;

            var changes = changeset == null ? null : new GraphChangeDescription(changeset.NewModels, changeset.ChangedModelsAndHints, changeset.DeletedModels);

            if (options == RequestGraphProcessingOptions.SaveGraph)
                (graphModel.Asset as ISerializedGraphAsset)?.Save();

            return stencil.GetGraphProcessorContainer().ProcessGraph(graphModel, changes);
        }

        /// <summary>
        /// Converts the errors generated by the processing of the graph to instances of <see cref="IGraphProcessingErrorModel"/>.
        /// </summary>
        /// <param name="stencil">The stencil.</param>
        /// <param name="results">The graph processing results used as the source of errors to convert.</param>
        /// <returns>The converted errors.</returns>
        public static IEnumerable<IGraphProcessingErrorModel> GetErrors(Stencil stencil, IReadOnlyList<GraphProcessingResult> results)
        {
            if (results != null && results.Any())
            {
                return results.SelectMany(r => r.Errors.Select(stencil.CreateProcessingErrorModel).Where(m => m != null));
            }

            return Enumerable.Empty<IGraphProcessingErrorModel>();
        }
    }
}

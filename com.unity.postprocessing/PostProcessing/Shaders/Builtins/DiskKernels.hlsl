#ifndef UNITY_POSTFX_DISK_KERNELS
#define UNITY_POSTFX_DISK_KERNELS

// rings = 2
// points per ring = 5 (+5 per ring)
// 1st ring spacing: 8/15
// 2nd ring spacing: 15/15
static const int kSmallSampleCount = 16;
static const half3 kSmallDiskKernel[kSmallSampleCount] = {
    half3(0,0,0),
    half3(0.54545456,0,0.5454546),
    half3(0.16855472,0.5187581,0.5454546),
    half3(-0.44128203,0.3206101,0.5454546),
    half3(-0.44128197,-0.3206102,0.5454546),
    half3(0.1685548,-0.5187581,0.5454546),
    half3(1,0,1),
    half3(0.809017,0.58778524,1),
    half3(0.30901697,0.95105654,1),
    half3(-0.30901703,0.9510565,1),
    half3(-0.80901706,0.5877852,1),
    half3(-1,0,1),
    half3(-0.80901694,-0.58778536,1),
    half3(-0.30901664,-0.9510566,1),
    half3(0.30901712,-0.9510565,1),
    half3(0.80901694,-0.5877853,1),
};

// rings = 4
// points per ring = 7 (+7 per ring)
// 1st ring spacing : 8/29
// 2nd ring spacing : 15/29
// 3rd ring spacing : 22/29
// 4th ring spacing : 29/29
static const int kDiskAllKernelSizes[5] = { 1, 8, 22, 43, 71 };
static const half kDiskAllKernelRcpSizes[5] = { 1, 1.0/8, 1.0/22, 1.0/43, 1.0/71 };
static const half3 kDiskAllKernels[71] = {
    half3(0, 0, 0),
    // ring 1 index=1
    half3(0.275862068965517, 0, 0.275862068965517),
    half3(0.171997186719651, 0.215677650336008, 0.275862068965517),
    half3(-0.0613850852293281, 0.26894563094671, 0.275862068965517),
    half3(-0.248543135973081, 0.119692065963464, 0.275862068965517),
    half3(-0.248543135973081, -0.119692065963464, 0.275862068965517),
    half3(-0.0613850852293282, -0.26894563094671, 0.275862068965517),
    half3(0.171997186719651, -0.215677650336008, 0.275862068965517),
    // ring 2 index=8
    half3(0.517241379310345, 0, 0.517241379310345),
    half3(0.466018379949527, 0.224422623681496, 0.517241379310345),
    half3(0.322494725099345, 0.404395594380015, 0.517241379310345),
    half3(0.11509703480499, 0.504273058025081, 0.517241379310345),
    half3(-0.11509703480499, 0.504273058025081, 0.517241379310345),
    half3(-0.322494725099345, 0.404395594380015, 0.517241379310345),
    half3(-0.466018379949527, 0.224422623681496, 0.517241379310345),
    half3(-0.517241379310345, 6.33437999558976E-17, 0.517241379310345),
    half3(-0.466018379949527, -0.224422623681496, 0.517241379310345),
    half3(-0.322494725099345, -0.404395594380015, 0.517241379310345),
    half3(-0.11509703480499, -0.504273058025081, 0.517241379310345),
    half3(0.11509703480499, -0.504273058025081, 0.517241379310345),
    half3(0.322494725099345, -0.404395594380015, 0.517241379310345),
    half3(0.466018379949527, -0.224422623681495, 0.517241379310345),
    // ring 3 index=22
    half3(0.758620689655172, 0, 0.758620689655172),
    half3(0.72491730094121, 0.223607373691031, 0.758620689655172),
    half3(0.626801828791444, 0.427346250944817, 0.758620689655172),
    half3(0.472992263479039, 0.593113538424023, 0.758620689655172),
    half3(0.277155259864162, 0.706180085178362, 0.758620689655172),
    half3(0.0566917951345288, 0.756499432344343, 0.758620689655172),
    half3(-0.168808984380652, 0.739600485103452, 0.758620689655172),
    half3(-0.379310344827586, 0.65698478907785, 0.758620689655172),
    half3(-0.556108316560558, 0.515993111412422, 0.758620689655172),
    half3(-0.683493623925973, 0.329153181399527, 0.758620689655172),
    half3(-0.750147523343201, 0.113066546754339, 0.758620689655172),
    half3(-0.750147523343201, -0.113066546754339, 0.758620689655172),
    half3(-0.683493623925973, -0.329153181399527, 0.758620689655172),
    half3(-0.556108316560558, -0.515993111412422, 0.758620689655172),
    half3(-0.379310344827587, -0.65698478907785, 0.758620689655172),
    half3(-0.168808984380652, -0.739600485103452, 0.758620689655172),
    half3(0.0566917951345288, -0.756499432344343, 0.758620689655172),
    half3(0.277155259864162, -0.706180085178362, 0.758620689655172),
    half3(0.472992263479039, -0.593113538424023, 0.758620689655172),
    half3(0.626801828791444, -0.427346250944817, 0.758620689655172),
    half3(0.72491730094121, -0.223607373691031, 0.758620689655172),
    // ring 4 index=43
    half3(1, 0, 1),
    half3(0.974927912181824, 0.222520933956314, 1),
    half3(0.900968867902419, 0.433883739117558, 1),
    half3(0.78183148246803, 0.623489801858733, 1),
    half3(0.623489801858734, 0.78183148246803, 1),
    half3(0.433883739117558, 0.900968867902419, 1),
    half3(0.222520933956314, 0.974927912181824, 1),
    half3(6.12323399573677E-17, 1, 1),
    half3(-0.222520933956314, 0.974927912181824, 1),
    half3(-0.433883739117558, 0.900968867902419, 1),
    half3(-0.623489801858733, 0.78183148246803, 1),
    half3(-0.781831482468029, 0.623489801858734, 1),
    half3(-0.900968867902419, 0.433883739117558, 1),
    half3(-0.974927912181824, 0.222520933956314, 1),
    half3(-1, 1.22464679914735E-16, 1),
    half3(-0.974927912181824, -0.222520933956314, 1),
    half3(-0.900968867902419, -0.433883739117558, 1),
    half3(-0.78183148246803, -0.623489801858734, 1),
    half3(-0.623489801858734, -0.78183148246803, 1),
    half3(-0.433883739117558, -0.900968867902419, 1),
    half3(-0.222520933956315, -0.974927912181824, 1),
    half3(-1.83697019872103E-16, -1, 1),
    half3(0.222520933956313, -0.974927912181824, 1),
    half3(0.433883739117558, -0.900968867902419, 1),
    half3(0.623489801858733, -0.78183148246803, 1),
    half3(0.78183148246803, -0.623489801858734, 1),
    half3(0.900968867902419, -0.433883739117558, 1),
    half3(0.974927912181824, -0.222520933956315, 1),
    // totalSampleCount=71
};

#endif // UNITY_POSTFX_DISK_KERNELS
